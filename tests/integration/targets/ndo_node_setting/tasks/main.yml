# Test code for the MSO modules
# Copyright: (c) 2024, Sabari Jaganathan (@sajagana) <sajagana@cisco.com>

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI MultiSite host, username and password
  ansible.builtin.fail:
    msg: "Please define the following variables: mso_hostname, mso_username and mso_password."
  when: mso_hostname is not defined or mso_username is not defined or mso_password is not defined

# CLEAN ENVIRONMENT
- name: Set vars
  ansible.builtin.set_fact:
    mso_info: &mso_info
      host: "{{ mso_hostname }}"
      username: "{{ mso_username }}"
      password: "{{ mso_password }}"
      validate_certs: "{{ mso_validate_certs | default(false) }}"
      use_ssl: "{{ mso_use_ssl | default(true) }}"
      use_proxy: "{{ mso_use_proxy | default(true) }}"
      output_level: '{{ mso_output_level | default("info") }}'

# QUERY VERSION
- name: Query MSO version
  cisco.mso.mso_version:
    <<: *mso_info
    state: query
  register: version

- name: Execute tasks only for NDO version > 4.3
  when: version.current.version is version('4.3', '>')
  block:
    # Setup Part
    - name: Ensure Fabric template not exist
      cisco.mso.ndo_template: &ndo_fabric_template_absent
        <<: *mso_info
        template: '{{ ansible_fabric_template | default("ansible_test") }}'
        template_type: fabric_policy
        state: absent

    # Fabric Template Setup
    - name: Create a new Fabric template
      cisco.mso.ndo_template:
        <<: *ndo_fabric_template_absent
        state: present

    # Test Part
    - name: Query all Node Settings when the Fabric template is empty
      cisco.mso.ndo_node_setting:
        <<: *mso_info
        template: '{{ ansible_fabric_template | default("ansible_test") }}'
        state: "query"
      register: query_all_ns

    - name: Assertion check for query all Node Settings when the Fabric template is empty
      ansible.builtin.assert:
        that:
          - query_all_ns is not changed
          - query_all_ns.current == {}

    - name: Create Node Settings object with default values - check_mode
      cisco.mso.ndo_node_setting: &cm_ns1_present
        <<: *mso_info
        template: '{{ ansible_fabric_template | default("ansible_test") }}'
        name: "ns1"
        state: "present"
        output_level: debug
      check_mode: true
      register: cm_ns1_present

    - name: Assertion check for create Node Settings object with default values - check_mode
      ansible.builtin.assert:
        that:
          - cm_ns1_present is changed
          - cm_ns1_present.current.name == "ns1"
          - cm_ns1_present.previous == {}
          - cm_ns1_present.proposed.name == "ns1"

    - name: Create Node Settings object with default values - normal_mode
      cisco.mso.ndo_node_setting:
        <<: *cm_ns1_present
      register: nm_ns1_present

    - name: Create Node Settings object with default values - normal_mode again
      cisco.mso.ndo_node_setting:
        <<: *cm_ns1_present
      register: nm_ns1_present_again

    - name: Assertion check for create Node Settings object with default values - normal_mode
      ansible.builtin.assert:
        that:
          - nm_ns1_present is changed
          - nm_ns1_present.current.description == ""
          - nm_ns1_present.current.name == "ns1"
          - nm_ns1_present.current.uuid is defined
          - nm_ns1_present.previous == {}
          - nm_ns1_present_again is not changed

    - name: Query ns1 Node Settings with name
      cisco.mso.ndo_node_setting:
        <<: *mso_info
        template: '{{ ansible_fabric_template | default("ansible_test") }}'
        name: "ns1"
        state: "query"
      register: query_ns1_with_name

    - name: Assertion check for query ns1 Node Settings with name
      ansible.builtin.assert:
        that:
          - query_ns1_with_name is not changed
          - query_ns1_with_name.current.description == ""
          - query_ns1_with_name.current.name == "ns1"
          - query_ns1_with_name.current.uuid is defined

    - name: Update ns1 object with synce and ptp values - check_mode
      cisco.mso.ndo_node_setting: &cm_update_ns1
        <<: *mso_info
        template: '{{ ansible_fabric_template | default("ansible_test") }}'
        name: "ns1"
        description: "Updated description"
        synce:
          admin_state: "enabled"
          quality_level: "option_2_generation_1"
        ptp:
          node_domain: 25
          priority_2: 128
        state: "present"
        output_level: debug
      check_mode: true
      register: cm_update_ns1

    - name: Assertion check for update ns1 object with synce and ptp values - check_mode
      ansible.builtin.assert:
        that:
          - cm_update_ns1 is changed
          - cm_update_ns1.current.description == "Updated description"
          - cm_update_ns1.current.name == "ns1"
          - cm_update_ns1.current.ptp.domain == 25
          - cm_update_ns1.current.ptp.prio1 == 128
          - cm_update_ns1.current.ptp.prio2 == 128
          - cm_update_ns1.current.synce.adminState == "enabled"
          - cm_update_ns1.current.synce.qlOption == "op2g1"
          - cm_update_ns1.current.uuid is defined
          - cm_update_ns1.previous.description == ""
          - cm_update_ns1.previous.name == "ns1"
          - cm_update_ns1.previous.uuid is defined
          - cm_update_ns1.proposed.description == "Updated description"
          - cm_update_ns1.proposed.name == "ns1"
          - cm_update_ns1.proposed.ptp.domain == 25
          - cm_update_ns1.proposed.ptp.prio1 == 128
          - cm_update_ns1.proposed.ptp.prio2 == 128
          - cm_update_ns1.proposed.synce.adminState == "enabled"
          - cm_update_ns1.proposed.synce.qlOption == "op2g1"
          - cm_update_ns1.proposed.uuid is defined

    - name: Update ns1 object with synce and ptp values - normal_mode
      cisco.mso.ndo_node_setting:
        <<: *cm_update_ns1
      register: nm_update_ns1

    - name: Update ns1 object with synce and ptp values - normal_mode again
      cisco.mso.ndo_node_setting:
        <<: *cm_update_ns1
      register: nm_update_ns1_again

    - name: Assertion check for update ns1 object with synce and ptp values - normal_mode
      ansible.builtin.assert:
        that:
          - nm_update_ns1 is changed
          - nm_update_ns1.current.description == "Updated description"
          - nm_update_ns1.current.name == "ns1"
          - nm_update_ns1.current.ptp.domain == 25
          - nm_update_ns1.current.ptp.prio1 == 128
          - nm_update_ns1.current.ptp.prio2 == 128
          - nm_update_ns1.current.synce.adminState == "enabled"
          - nm_update_ns1.current.synce.qlOption == "op2g1"
          - nm_update_ns1.current.uuid is defined
          - nm_update_ns1.previous.description == ""
          - nm_update_ns1.previous.name == "ns1"
          - nm_update_ns1_again is not changed

    - name: Clear ns1 synce values with UUID
      cisco.mso.ndo_node_setting:
        <<: *mso_info
        template: '{{ ansible_fabric_template | default("ansible_test") }}'
        uuid: "{{ nm_update_ns1.current.uuid }}"
        synce:
          state: "disabled"
        state: "present"
      register: clear_ns1_synce

    - name: Assertion check for clear ns1 synce values with UUID
      ansible.builtin.assert:
        that:
          - clear_ns1_synce is changed
          - clear_ns1_synce.current.description == "Updated description"
          - clear_ns1_synce.current.name == "ns1"
          - clear_ns1_synce.current.ptp.domain == 25
          - clear_ns1_synce.current.ptp.prio1 == 128
          - clear_ns1_synce.current.ptp.prio2 == 128
          - clear_ns1_synce.current.uuid is defined
          - clear_ns1_synce.previous.description == "Updated description"
          - clear_ns1_synce.previous.name == "ns1"
          - clear_ns1_synce.previous.ptp.domain == 25
          - clear_ns1_synce.previous.ptp.prio1 == 128
          - clear_ns1_synce.previous.ptp.prio2 == 128
          - clear_ns1_synce.previous.synce.adminState == "enabled"
          - clear_ns1_synce.previous.synce.qlOption == "op2g1"

    - name: Enable ns1 synce values with UUID
      cisco.mso.ndo_node_setting:
        <<: *mso_info
        template: '{{ ansible_fabric_template | default("ansible_test") }}'
        uuid: "{{ nm_update_ns1.current.uuid }}"
        synce:
          state: "enabled"
        state: "present"
      register: nt_ns1_synce
      ignore_errors: true

    - name: Assertion check for enable ns1 synce values with UUID
      ansible.builtin.assert:
        that:
          - nt_ns1_synce is not changed
          - nt_ns1_synce.msg == "state is enabled but all of the following are missing{{':'}} admin_state, quality_level found in synce"

    - name: Clear ns1 ptp values
      cisco.mso.ndo_node_setting:
        <<: *mso_info
        template: '{{ ansible_fabric_template | default("ansible_test") }}'
        uuid: "{{ nm_update_ns1.current.uuid }}"
        ptp:
          state: "disabled"
        state: "present"
      register: clear_ns1_ptp

    - name: Assertion check for clear ns1 ptp values
      ansible.builtin.assert:
        that:
          - clear_ns1_ptp is changed
          - clear_ns1_ptp.current.description == "Updated description"
          - clear_ns1_ptp.current.name == "ns1"
          - clear_ns1_ptp.current.uuid is defined
          - clear_ns1_ptp.previous.description == "Updated description"
          - clear_ns1_ptp.previous.name == "ns1"
          - clear_ns1_ptp.previous.ptp.domain == 25
          - clear_ns1_ptp.previous.ptp.prio1 == 128
          - clear_ns1_ptp.previous.ptp.prio2 == 128
          - clear_ns1_ptp.previous.uuid is defined

    - name: Enable ns1 ptp values
      cisco.mso.ndo_node_setting:
        <<: *mso_info
        template: '{{ ansible_fabric_template | default("ansible_test") }}'
        uuid: "{{ nm_update_ns1.current.uuid }}"
        ptp:
          state: "enabled"
        state: "present"
      register: nt_ns1_ptp
      ignore_errors: true

    - name: Assertion check for enable ns1 ptp values
      ansible.builtin.assert:
        that:
          - nt_ns1_ptp is not changed
          - nt_ns1_ptp.msg == "state is enabled but all of the following are missing{{':'}} node_domain, priority_2 found in ptp"

    - name: Query ns1 Node Settings with UUID
      cisco.mso.ndo_node_setting:
        <<: *mso_info
        template: '{{ ansible_fabric_template | default("ansible_test") }}'
        uuid: "{{ nm_update_ns1.current.uuid }}"
        state: "query"
      register: query_ns1_with_uuid

    - name: Assertion check for query ns1 Node Settings with UUID
      ansible.builtin.assert:
        that:
          - query_ns1_with_uuid is not changed
          - query_ns1_with_uuid.current.description == "Updated description"
          - query_ns1_with_uuid.current.name == "ns1"
          - query_ns1_with_uuid.current.uuid is defined

    - name: Add ns1 synce values and name
      cisco.mso.ndo_node_setting:
        <<: *mso_info
        template: '{{ ansible_fabric_template | default("ansible_test") }}'
        uuid: "{{ nm_update_ns1.current.uuid }}"
        name: "ns1_new"
        description: ""
        synce:
          admin_state: "disabled"
          quality_level: "option_1"
        state: "present"
      register: add_ns1_synce

    - name: Update ns1_new synce quality_level value
      cisco.mso.ndo_node_setting:
        <<: *mso_info
        template: '{{ ansible_fabric_template | default("ansible_test") }}'
        uuid: "{{ nm_update_ns1.current.uuid }}"
        name: "ns1_new"
        description: ""
        synce:
          admin_state: "disabled"
          quality_level: "option_2_generation_2"
        state: "present"
      register: ns1_synce_quality_level_change

    - name: Assertion check for add ns1 synce values and name
      ansible.builtin.assert:
        that:
          - add_ns1_synce is changed
          - add_ns1_synce.current.description == ""
          - add_ns1_synce.current.name == "ns1_new"
          - add_ns1_synce.current.synce.adminState == "disabled"
          - add_ns1_synce.current.synce.qlOption == "op1"
          - add_ns1_synce.current.uuid is defined
          - add_ns1_synce.previous.description == "Updated description"
          - add_ns1_synce.previous.name == "ns1"
          - add_ns1_synce.previous.uuid is defined
          - ns1_synce_quality_level_change is changed
          - ns1_synce_quality_level_change.current.synce.qlOption == "op2g2"
          - ns1_synce_quality_level_change.previous.synce.qlOption == "op1"

    - name: Add ns1 ptp values
      cisco.mso.ndo_node_setting:
        <<: *mso_info
        template: '{{ ansible_fabric_template | default("ansible_test") }}'
        uuid: "{{ nm_update_ns1.current.uuid }}"
        ptp:
          node_domain: 26
          priority_2: 128
        state: "present"
      register: add_ns1_ptp

    - name: Assertion check for add ns1 ptp values
      ansible.builtin.assert:
        that:
          - add_ns1_ptp is changed
          - add_ns1_ptp.current.description == ""
          - add_ns1_ptp.current.name == "ns1_new"
          - add_ns1_ptp.current.ptp.domain == 26
          - add_ns1_ptp.current.ptp.prio1 == 128
          - add_ns1_ptp.current.ptp.prio2 == 128
          - add_ns1_ptp.current.synce.adminState == "disabled"
          - add_ns1_ptp.current.synce.qlOption == "op2g2"
          - add_ns1_ptp.current.uuid is defined
          - add_ns1_ptp.previous.description == ""
          - add_ns1_ptp.previous.name == "ns1_new"
          - add_ns1_ptp.previous.synce.adminState == "disabled"
          - add_ns1_ptp.previous.synce.qlOption == "op2g2"
          - add_ns1_ptp.previous.uuid is defined

    - name: Add ns2 with synce and ptp values
      cisco.mso.ndo_node_setting:
        <<: *cm_update_ns1
        name: ns2
        state: "present"
      register: add_ns2

    - name: Assertion check for add ns2 with synce and ptp values
      ansible.builtin.assert:
        that:
          - add_ns2 is changed
          - add_ns2.current.description == "Updated description"
          - add_ns2.current.name == "ns2"
          - add_ns2.current.ptp.domain == 25
          - add_ns2.current.ptp.prio1 == 128
          - add_ns2.current.ptp.prio2 == 128
          - add_ns2.current.synce.adminState == "enabled"
          - add_ns2.current.synce.qlOption == "op2g1"
          - add_ns2.current.uuid is defined
          - add_ns2.previous == {}

    - name: Query all Node Settings
      cisco.mso.ndo_node_setting:
        <<: *mso_info
        template: '{{ ansible_fabric_template | default("ansible_test") }}'
        state: "query"
      register: query_all_ns_again

    - name: Assertion check for query all Node Settings
      ansible.builtin.assert:
        that:
          - query_all_ns_again is not changed
          - query_all_ns_again.current | length == 2
          - "'ns1_new' in query_all_ns_again.current | map(attribute='name') | list"
          - "'ns2' in query_all_ns_again.current | map(attribute='name') | list"

    - name: Remove ns2 Node Settings with UUID
      cisco.mso.ndo_node_setting:
        <<: *mso_info
        template: '{{ ansible_fabric_template | default("ansible_test") }}'
        uuid: "{{ add_ns2.current.uuid }}"
        state: "absent"
      register: rm_ns2_uuid

    - name: Assertion check for remove ns4 Node Settings with UUID
      ansible.builtin.assert:
        that:
          - rm_ns2_uuid is changed
          - rm_ns2_uuid.current == {}
          - rm_ns2_uuid.previous.description == "Updated description"
          - rm_ns2_uuid.previous.name == "ns2"
          - rm_ns2_uuid.previous.uuid is defined

    - name: Remove ns1_new Node Settings with check_mode
      cisco.mso.ndo_node_setting:
        <<: *mso_info
        template: '{{ ansible_fabric_template | default("ansible_test") }}'
        name: "ns1_new"
        state: "absent"
        output_level: debug
      check_mode: true
      register: cm_rm_ns1

    - name: Assertion check for remove ns1_new Node Settings with check_mode
      ansible.builtin.assert:
        that:
          - cm_rm_ns1 is changed
          - cm_rm_ns1.current == {}
          - cm_rm_ns1.previous != {}

    - name: Remove ns1_new Node Settings with normal_mode
      cisco.mso.ndo_node_setting:
        <<: *mso_info
        template: '{{ ansible_fabric_template | default("ansible_test") }}'
        name: "ns1_new"
        state: "absent"
        output_level: debug
      register: nm_rm_ns1

    - name: Assertion check for remove ns1_new Node Settings with normal_mode
      ansible.builtin.assert:
        that:
          - nm_rm_ns1 is changed
          - nm_rm_ns1.current == {}
          - nm_rm_ns1.previous != {}

    - name: Remove ns1_new Node Settings with normal_mode again
      cisco.mso.ndo_node_setting:
        <<: *mso_info
        template: '{{ ansible_fabric_template | default("ansible_test") }}'
        name: "ns1_new"
        state: "absent"
      register: nm_rm_ns1_again

    - name: Assertion check for remove ns1_new Node Settings with normal_mode again
      ansible.builtin.assert:
        that:
          - nm_rm_ns1_again is not changed
          - nm_rm_ns1_again.current == {}
          - nm_rm_ns1_again.previous == {}

    # Cleanup Part
    - name: Remove Fabric template
      cisco.mso.ndo_template:
        <<: *ndo_fabric_template_absent
