# Test code for the MSO modules
# Copyright: (c) 2020, Cindy Zhao (@cizhao) <cizhao@cisco.com>

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI MultiSite host, username and password
  fail:
    msg: 'Please define the following variables: mso_hostname, mso_username and mso_password.'
  when: mso_hostname is not defined or mso_username is not defined or mso_password is not defined


# CLEAN ENVIRONMENT
- name: Set vars
  set_fact:
    mso_info: &mso_info
      host: '{{ mso_hostname }}'
      username: '{{ mso_username }}'
      password: '{{ mso_password }}'
      validate_certs: '{{ mso_validate_certs | default(false) }}'
      use_ssl: '{{ mso_use_ssl | default(true) }}'
      use_proxy: '{{ mso_use_proxy | default(false) }}'
      output_level: '{{ mso_output_level | default("info") }}'

- name: Query MSO version
  mso_version:
    <<: *mso_info
    state: query
  register: version

- name: Remove schemas
  mso_schema:
    <<: *mso_info
    schema: '{{ item }}'
    state: absent
  loop:
  - '{{ mso_schema | default("ansible_test") }}_3'
  - '{{ mso_schema | default("ansible_test") }}_2'
  - '{{ mso_schema | default("ansible_test") }}'

- name: Remove tenant2
  mso_tenant:
    <<: *mso_info
    tenant: ansible_test_2
    state: absent

- name: Ensure tenant ansible_test exist
  mso_tenant:
    <<: *mso_info
    tenant: ansible_test
    users:
    - '{{ mso_username }}'
    state: present

- name: Ensure schema 1 with Template 1 exist
  mso_schema_template:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    tenant: ansible_test
    template: Template 1
    state: present

- name: Ensure schema 1 with Template 2 exist
  mso_schema_template:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    tenant: ansible_test
    template: Template 2
    state: present

- name: Ensure schema 2 with Template 3 exist
  mso_schema_template:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    tenant: ansible_test
    template: Template 3
    state: present

- name: Ensure ANP exist (check_mode)
  mso_schema_template_anp:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    state: present
  check_mode: yes
  register: cm_create_anp

- name: Ensure ANP exist (normal_mode)
  mso_schema_template_anp:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    state: present
  register: nm_create_anp

- name: Create ANP again (normal_mode)
  mso_schema_template_anp:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    state: present
  register: nm_create_anp_again

- name: Verify cm_create_anp, nm_create_anp and nm_create_anp_again
  assert:
    that:
    - cm_create_anp is changed
    - nm_create_anp is changed
    - nm_create_anp_again is not changed
    - cm_create_anp.previous == {}
    - cm_create_anp.current.displayName == "ANP"
    - cm_create_anp.current.name == "ANP"
    - cm_create_anp.current.epgs == []
    - nm_create_anp.previous == {}
    - nm_create_anp.current.displayName == "ANP"
    - nm_create_anp.current.name == "ANP"
    - nm_create_anp.current.epgs == []
    - nm_create_anp_again.previous == nm_create_anp_again.current
    - nm_create_anp_again.current.displayName == "ANP"
    - nm_create_anp_again.current.name == "ANP"
    - nm_create_anp_again.current.epgs == []

- name: Create another anp (normal_mode)
  mso_schema_template_anp:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP_2
    display_name: another anp
    state: present
  register: nm_create_another_anp

- name: Verify nm_create_another_anp
  assert:
    that:
    - nm_create_another_anp is changed
    - nm_create_another_anp.previous == {}
    - nm_create_another_anp.current.displayName == "another anp"
    - nm_create_another_anp.current.name == "ANP_2"
    - nm_create_another_anp.current.epgs == []


# Add description for version >= 3.3
- name: Create another anp with description(normal_mode)
  mso_schema_template_anp:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP_3
    display_name: another anp
    description: "Description of an ANP_3"
    state: present
  register: nm_create_another_anp
  when: version.current.version is version('3.3', '>=')

- name: Verify nm_create_another_anp with description
  assert:
    that:
    - nm_create_another_anp is changed
    - nm_create_another_anp.previous == {}
    - nm_create_another_anp.current.displayName == "another anp"
    - nm_create_another_anp.current.name == "ANP_3"
    - nm_create_another_anp.current.description == "Description of an ANP_3"
    - nm_create_another_anp.current.epgs == []
  when: version.current.version is version('3.3', '>=')

- name: Change anp (normal_mode)
  mso_schema_template_anp:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    display_name: displayName for ANP
    state: present
  register: nm_change_anp

- name: Verify nm_change_anp
  assert:
    that:
    - nm_change_anp is changed
    - nm_change_anp.previous.name == nm_change_anp.current.name == "ANP"
    - nm_change_anp.previous.displayName == "ANP"
    - nm_change_anp.current.displayName == "displayName for ANP"
    - nm_change_anp.previous.epgs == nm_change_anp.current.epgs == []

- name: Query anp
  mso_schema_template_anp:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    state: query
  register: query_anp

- name: Verify query_anp
  assert:
    that:
    - query_anp is not changed
    - query_anp.current.name == "ANP"
    - query_anp.current.epgs == []
    - query_anp.current.displayName == "displayName for ANP"

- name: Query all
  mso_schema_template_anp:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    state: query
  register: query_all

- name: Verify query_all
  assert:
    that:
    - query_all is not changed
    - query_all.current | length == 2
  when: version.current.version is version('3.3', '<')

- name: Verify query_all
  assert:
    that:
    - query_all is not changed
    - query_all.current | length == 3
  when: version.current.version is version('3.3', '>=')

- name: Query non_existing anp
  mso_schema_template_anp:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: non_existing_anp
    state: query
  ignore_errors: yes
  register: query_non_existing_anp

- name: Verify query_non_existing_anp
  assert:
    that:
    - query_non_existing_anp.msg == "ANP 'non_existing_anp' not found"

- name: Use non_existing schema
  mso_schema_template_anp:
    <<: *mso_info
    schema: non_existing_schema
    template: Template 1
    anp: ANP
    state: query
  ignore_errors: yes
  register: query_non_existing_schema

- name: Use non_existing template
  mso_schema_template_anp:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: non_existing_template
    anp: ANP
    state: query
  ignore_errors: yes
  register: query_non_existing_template

- name: Verify query_non_existing_schema and query_non_existing_template
  assert:
    that:
    - query_non_existing_schema.msg == "Provided schema 'non_existing_schema' does not exist."
    - query_non_existing_template.msg == "Provided template 'non_existing_template' does not exist. Existing templates{{':'}} Template1, Template2"

- name: Remove anp (check_mode)
  mso_schema_template_anp:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    state: absent
  check_mode: yes
  register: cm_rm_anp

- name: Remove anp (normal_mode)
  mso_schema_template_anp:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    state: absent
  register: nm_rm_anp

- name: Verify cm_rm_anp and nm_rm_anp
  assert:
    that:
    - cm_rm_anp is changed
    - nm_rm_anp is changed
    - nm_rm_anp.previous == cm_rm_anp.previous
    - nm_rm_anp.current == cm_rm_anp.current == {}
    - nm_rm_anp.previous.name == cm_rm_anp.previous.name == "ANP"
    - nm_rm_anp.previous.displayName == cm_rm_anp.previous.displayName == "displayName for ANP"
    - nm_rm_anp.previous.epgs == cm_rm_anp.previous.epgs == []

- name: Remove anp again
  mso_schema_template_anp:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    state: absent
  register: nm_rm_anp_again

- name: Verify nm_rm_anp_again
  assert:
    that:
    - nm_rm_anp_again is not changed
    - nm_rm_anp_again.previous == nm_rm_anp_again.current == {}
