# Test code for the MSO modules
# Copyright: (c) 2021, Anvitha Jain (@anvitha-jain) <anvjain@cisco.com>
#

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI MultiSite host, username and password
  fail:
    msg: 'Please define the following variables: mso_hostname, mso_username and mso_password.'
  when: mso_hostname is not defined or mso_username is not defined or mso_password is not defined


# CLEAN ENVIRONMENT
- name: Set vars
  set_fact:
    mso_info: &mso_info
      host: '{{ mso_hostname }}'
      username: '{{ mso_username }}'
      password: '{{ mso_password }}'
      validate_certs: '{{ mso_validate_certs | default(false) }}'
      use_ssl: '{{ mso_use_ssl | default(true) }}'
      use_proxy: '{{ mso_use_proxy | default(true) }}'
      output_level: '{{ mso_output_level | default("info") }}'

- name: Query MSO version
  mso_version:
    <<: *mso_info
    state: query
  register: version

- name: Undeploy templates if deployed from previous test case
  mso_schema_template_deploy:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: "{{ item }}"
    site: '{{ mso_site | default("ansible_test") }}'
    state: undeploy
  ignore_errors: yes
  loop:
  - Template 1
  - Template 2

- name: Remove schemas
  mso_schema:
    <<: *mso_info
    schema: '{{ item }}'
    state: absent
  loop:
  - '{{ mso_schema | default("ansible_test") }}_2'
  - '{{ mso_schema | default("ansible_test") }}'

- name: Ensure ansible_test_1 external EPG does not exist
  mso_schema_template_external_epg:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    external_epg: ansible_test_1
    state: absent
  ignore_errors: yes

- name: Ensure tenant ansible_test exist
  mso_tenant:
    <<: *mso_info
    tenant: ansible_test
    users:
    - '{{ mso_username }}'
    state: present

- name: Ensure schema 1 with Template 1 exist
  mso_schema_template:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    tenant: ansible_test
    template: Template 1
    state: present

- name: Ensure VRF exist
  mso_schema_template_vrf:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    vrf: VRF
    state: present

- name: Ensure L3out exist
  mso_schema_template_l3out:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    l3out: L3out
    vrf:
      name: VRF
    state: present

- name: Ensure ANP exists
  mso_schema_template_anp:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP1
    state: present

- name: Add external EPG
  mso_schema_template_external_epg:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    external_epg: ansible_test_1
    vrf:
      name: VRF
    state: present

# ADD external EPG subnet
- name: Add external EPG subnet (check_mode)
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    external_epg: ansible_test_1
    subnet: 10.0.0.0/24
    state: present
  check_mode: yes
  register: cm_add_epg_subnet

- name: Verify cm_add_epg_subnet
  assert:
    that:
    - cm_add_epg_subnet is changed
    - cm_add_epg_subnet.previous == {}
    - cm_add_epg_subnet.current.ip == "10.0.0.0/24"

- name: Add external EPG subnet (normal mode)
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    external_epg: ansible_test_1
    subnet: 10.0.0.0/24
    state: present
  register: nm_add_epg_subnet

- name: Verify nm_add_epg_subnet
  assert:
    that:
    - nm_add_epg_subnet is changed
    - nm_add_epg_subnet.previous == {}
    - nm_add_epg_subnet.current.ip == "10.0.0.0/24"

- name: Add external EPG subnet again (check_mode)
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    external_epg: ansible_test_1
    subnet: 10.0.0.0/24
    state: present
  check_mode: yes
  register: cm_add_epg_subnet_again

- name: Verify cm_add_epg_subnet_again
  assert:
    that:
    - cm_add_epg_subnet_again is not changed
    - cm_add_epg_subnet_again.previous.ip == "10.0.0.0/24"
    - cm_add_epg_subnet_again.current.ip == "10.0.0.0/24"

- name: Add epg again subnet (normal mode)
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    external_epg: ansible_test_1
    subnet: 10.0.0.0/24
    state: present
  register: nm_add_epg_subnet_again

- name: Verify nm_add_epg_subnet_again
  assert:
    that:
    - nm_add_epg_subnet_again is not changed
    - nm_add_epg_subnet_again.previous.ip == "10.0.0.0/24"
    - nm_add_epg_subnet_again.current.ip == "10.0.0.0/24"

- name: Add external EPG subnet 2
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    external_epg: ansible_test_1
    subnet: 10.0.0.2/24
    state: present
  register: add_epg_subnet_2

- name: Verify add_epg_subnet_2
  assert:
    that:
    - add_epg_subnet_2 is changed
    - add_epg_subnet_2.current.ip == "10.0.0.2/24"

# QUERY ALL EPG Subnets
- name: Query all EPG (check_mode)
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    external_epg: ansible_test_1
    state: query
  check_mode: yes
  register: cm_query_all_epg_subnets

- name: Query all EPG (normal mode)
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    external_epg: ansible_test_1
    state: query
  register: nm_query_all_epg_subnets

- name: Verify query_all_epg_subnets
  assert:
    that:
    - cm_query_all_epg_subnets is not changed
    - nm_query_all_epg_subnets is not changed
    - cm_query_all_epg_subnets.current | length == nm_query_all_epg_subnets.current | length == 2

# QUERY AN EPG subnet
- name: Query epg subnet 1(check_mode)
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    external_epg: ansible_test_1
    subnet: 10.0.0.0/24
    state: query
  check_mode: yes
  register: cm_query_epg_subnet_1

- name: Query epg subnet 1(normal_mode)
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    external_epg: ansible_test_1
    subnet: 10.0.0.0/24
    state: query
  register: nm_query_epg_subnet_1

- name: Verify cm_query_epg_subnet_1 and nm_query_epg_subnet_1
  assert:
    that:
    - cm_query_epg_subnet_1 is not changed
    - nm_query_epg_subnet_1 is not changed
    - cm_query_epg_subnet_1.current.ip == "10.0.0.0/24" == nm_query_epg_subnet_1.current.ip

# REMOVE EPG
- name: Remove EPG subnet 1 (check_mode)
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    external_epg: ansible_test_1
    subnet: 10.0.0.0/24
    state: absent
  check_mode: yes
  register: cm_remove_epg_subnet_1

- name: Verify cm_remove_epg_subnet_1
  assert:
    that:
    - cm_remove_epg_subnet_1 is changed
    - cm_remove_epg_subnet_1.current == {}

- name: Remove EPG subnet 1 (normal_mode)
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    external_epg: ansible_test_1
    subnet: 10.0.0.0/24
    state: absent
  register: nm_remove_epg_subnet_1

- name: Verify nm_remove_epg_subnet_1
  assert:
    that:
    - nm_remove_epg_subnet_1 is changed
    - nm_remove_epg_subnet_1.current == {}

- name: Remove EPG subnet 1 again (normal mode)
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    external_epg: ansible_test_1
    subnet: 10.0.0.0/24
    state: absent
  register: nm_remove_epg_subnet_1_again

- name: Verify nm_remove_epg_subnet_1_again
  assert:
    that:
    - nm_remove_epg_subnet_1_again is not changed
    - nm_remove_epg_subnet_1_again.previous == nm_remove_epg_subnet_1_again.current == {}

# Chcek aggregate when scope parameter Shared control is absent and present
- name: Add aggregate without Shared control scope parameter
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    external_epg: ansible_test_1
    subnet: 10.0.0.2/24
    scope: import-rtctrl
    aggregate: shared-rtctrl
    state: present
  ignore_errors: yes
  register: add_epg_subnet_no_ag

- name: Verify add_epg_subnet_no_ag
  assert:
    that:
    - add_epg_subnet_no_ag is changed
    - add_epg_subnet_no_ag.msg == "MSO Error 400{{':'}} Bad Request{{':'}} Patch Failed, Received{{':'}} Aggregate should be enabled only if shared-rtctrl is enabled in Scope exception while trying to update schema"
  when: version.current.version is version('3.1.1g', '==')

- name: Verify add_epg_subnet_no_ag
  assert:
    that:
    - add_epg_subnet_no_ag is changed
    - add_epg_subnet_no_ag.msg == "MSO Error 400{{':'}} Bad Request{{':'}} Aggregate should be enabled only if shared-rtctrl is enabled in Scope"
  when:
  - version.current.version is version('3.1.1g', '!=')
  - version.current.version is version('3.6', '<')

- name: Get Validation status
  mso_schema_validate:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    state: query
  ignore_errors: yes
  register: query_validate
  when: version.current.version is version('3.6', '>=')

- name: Verify query_validate for a version that's after 3.6
  assert:
    that:
    - query_validate is not changed
    - query_validate.msg is match ("MSO Error 400{{':'}} Bad Request{{':'}} Patch Failed, Received{{':'}} Aggregate should be enabled only if shared-rtctrl is enabled in Scope exception while trying to update schema")
  when: version.current.version is version('3.6', '>=')

- name: Add aggregate with Shared control scope parameter
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    external_epg: ansible_test_1
    subnet: 10.0.0.2/24
    scope: shared-rtctrl
    aggregate: shared-rtctrl
    state: present
  ignore_errors: yes
  register: add_epg_subnet_ag

- name: Verify add_epg_subnet_ag
  assert:
    that:
    - add_epg_subnet_ag is changed
    - add_epg_subnet_ag.current.aggregate[0] == "shared-rtctrl"

- name: Change EPG subnet 2 by changing Route Controls
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    external_epg: ansible_test_1
    subnet: 10.0.0.2/24
    scope:
    - import-rtctrl
    - shared-security
    - export-rtctrl
    - shared-security
    - import-security
    state: present
  register: change_epg_subnet

- name: Verify change_epg_subnet
  assert:
    that:
    - change_epg_subnet is changed
    - change_epg_subnet.current.ip == "10.0.0.2/24"
    - change_epg_subnet.current.scope | length == 5

# QUERY NON-EXISTING EPG subnet
- name: Query non-existing EPG subnet(check_mode)
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    external_epg: ansible_test_1
    subnet: 10.0.0.10/24
    state: query
  ignore_errors: yes
  check_mode: yes
  register: cm_query_non_existing_epg_subnet

- name: Query non-existing EPG subnet(normal_mode)
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    external_epg: ansible_test_1
    subnet: 10.0.0.10/24
    state: query
  ignore_errors: yes
  register: nm_query_non_existing_epg_subnet

- name: Verify cm_query_non_existing_epg_subnet and nm_query_non_existing_epg_subnet
  assert:
    that:
    - cm_query_non_existing_epg_subnet is not changed
    - nm_query_non_existing_epg_subnet is not changed
    - cm_query_non_existing_epg_subnet == nm_query_non_existing_epg_subnet
    - cm_query_non_existing_epg_subnet.msg == nm_query_non_existing_epg_subnet.msg == "Subnet '10.0.0.10/24' not found"

# QUERY NON-EXISTING EPG
- name: Query non-existing EPG subnet(check_mode)
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    external_epg: non_existing_epg
    subnet: 10.0.0.2/24
    state: query
  ignore_errors: yes
  check_mode: yes
  register: cm_query_non_existing_epg

- name: Query non-existing EPG subnet(normal_mode)
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    external_epg: non_existing_epg
    subnet: 10.0.0.2/24
    state: query
  ignore_errors: yes
  register: nm_query_non_existing_epg

- name: Verify cm_query_non_existing_epg and nm_query_non_existing_epg
  assert:
    that:
    - cm_query_non_existing_epg is not changed
    - nm_query_non_existing_epg is not changed
    - cm_query_non_existing_epg == nm_query_non_existing_epg
    - cm_query_non_existing_epg.msg == nm_query_non_existing_epg.msg == "Provided External EPG 'non_existing_epg' does not exist. Existing epgs{{':'}} ansible_test_1"

# USE A NON-EXISTING SCHEMA
- name: Non-existing schema for epg subnet(check_mode)
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: non-existing-schema
    template: Template 1
    external_epg: ansible_test_1
    subnet: 10.0.0.0/24
    state: query
  check_mode: yes
  ignore_errors: yes
  register: cm_non_existing_schema

- name: Non-existing schema for epg subnet(normal_mode)
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: non-existing-schema
    template: Template 1
    external_epg: ansible_test_1
    subnet: 10.0.0.0/24
    state: query
  ignore_errors: yes
  register: nm_non_existing_schema

- name: Verify non_existing_schema
  assert:
    that:
    - cm_non_existing_schema is not changed
    - nm_non_existing_schema is not changed
    - cm_non_existing_schema == nm_non_existing_schema
    - cm_non_existing_schema.msg == nm_non_existing_schema.msg == "Provided schema 'non-existing-schema' does not exist."

# USE A NON-EXISTING TEMPLATE
- name: Non-existing template for epg subnet(check_mode)
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: non-existing-template
    external_epg: ansible_test_1
    subnet: 10.0.0.0/24
    state: query
  check_mode: yes
  ignore_errors: yes
  register: cm_non_existing_template

- name: Non-existing template for epg subnet(normal_mode)
  mso_schema_template_external_epg_subnet:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: non-existing-template
    external_epg: ansible_test_1
    subnet: 10.0.0.0/24
    state: query
  ignore_errors: yes
  register: nm_non_existing_template

- name: Verify non_existing_template
  assert:
    that:
    - cm_non_existing_template is not changed
    - nm_non_existing_template is not changed
    - cm_non_existing_template == nm_non_existing_template
    - cm_non_existing_template.msg == nm_non_existing_template.msg == "Provided template 'non-existing-template' does not exist. Existing templates{{':'}} Template1"