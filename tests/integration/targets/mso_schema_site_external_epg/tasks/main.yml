# Test code for the MSO modules
# Copyright: (c) 2021, Anvitha Jain (@anvitha-jain) <anvjain@cisco.com>
#

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI MultiSite host, username and password
  fail:
    msg: 'Please define the following variables: mso_hostname, mso_username and mso_password.'
  when: mso_hostname is not defined or mso_username is not defined or mso_password is not defined

# CLEAN ENVIRONMENT
- name: Set vars
  set_fact:
    mso_info: &mso_info
      host: '{{ mso_hostname }}'
      username: '{{ mso_username }}'
      password: '{{ mso_password }}'
      validate_certs: '{{ mso_validate_certs | default(false) }}'
      use_ssl: '{{ mso_use_ssl | default(true) }}'
      use_proxy: '{{ mso_use_proxy | default(true) }}'
      output_level: '{{ mso_output_level | default("info") }}'

- name: Query MSO version
  mso_version:
    <<: *mso_info
    state: query
  register: version

- name: Ensure site exists
  mso_site:
    <<: *mso_info
    site: '{{ mso_site | default("ansible_test") }}'
    apic_username: '{{ apic_username }}'
    apic_password: '{{ apic_password }}'
    apic_site_id: '{{ apic_site_id | default(101) }}'
    urls:
    - https://{{ apic_hostname }}
    state: present

- name: Ensure tenant ansible_test exist
  mso_tenant:
    <<: *mso_info
    tenant: ansible_test
    users:
    - '{{ mso_username }}'
    sites:
    - '{{ mso_site | default("ansible_test") }}'
    state: present
  ignore_errors: yes

- name: Associate non-cloud site with ansible_test
  mso_tenant_site:
    <<: *mso_info
    tenant: ansible_test
    site: '{{ mso_site | default("ansible_test") }}'
    state: present  
  register: add_ncs

- name: Verify add_ncs
  assert:
    that:
    - add_ncs is not changed

- name: Remove a site from a schema with Template1
  mso_schema_site:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: '{{ mso_site | default("ansible_test") }}'
    template: '{{ item }}'
    state: absent
  ignore_errors: yes
  loop:
  - Template2
  - Template1

- name: Remove schemas
  mso_schema:
    <<: *mso_info
    schema: '{{ item }}'
    state: absent
  loop:
  - '{{ mso_schema | default("ansible_test") }}_2'
  - '{{ mso_schema | default("ansible_test") }}'

# Ensure pre requisites exist
- name: Ensure schema 1 with Template1 and 2 exists
  mso_schema_template: 
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    tenant: ansible_test
    template: '{{ item }}'
    state: present
  loop:
  - Template1
  - Template2
  - Template3

- name: Ensure VRF1 exists
  mso_schema_template_vrf:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    vrf: VRF1
    state: present

- name: Ensure L3Out Exists
  mso_schema_template_l3out:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    vrf:
      name: VRF1
    l3out: '{{ item }}'
    state: present
  loop:
  - L3out1
  - L3out2

# ADD external EPG to template
- name: Add external EPG at template level(check_mode)
  mso_schema_template_external_epg:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    external_epg: ansible_test_1
    vrf:
      name: VRF1
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template1
    state: present
  check_mode: yes
  register: cm_add_epg

- name: Verify cm_add_epg
  assert:
    that:
    - cm_add_epg is changed
    - cm_add_epg.previous == {}
    - cm_add_epg.current.name == "ansible_test_1"
    - cm_add_epg.current.vrfRef.templateName == "Template1"
    - cm_add_epg.current.vrfRef.vrfName == "VRF1"

- name: Add external EPG at template level(normal mode)
  mso_schema_template_external_epg:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    external_epg: ansible_test_1
    vrf:
      name: VRF1
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template1
    state: present
  register: nm_add_epg

- name: Verify nm_add_epg
  assert:
    that:
    - nm_add_epg is changed
    - nm_add_epg.previous == {}
    - nm_add_epg.current.name == "ansible_test_1"
    - nm_add_epg.current.vrfRef.templateName == "Template1"
    - nm_add_epg.current.vrfRef.vrfName == "VRF1"
    - cm_add_epg.current.vrfRef.schemaId ==  nm_add_epg.current.vrfRef.schemaId

# Add External EPG to Site when MSO version >= 3.3
- name: Execute tasks only for MSO version >= 3.3
  when: version.current.version is version('3.3', '>=')
  block:
  # Associate site to schema/template after creating External EPG
  - name: Add non-cloud site to a schema
    mso_schema_site:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      state: present
    register: add_site

  - name: Verify add_site
    assert:
      that:
      - add_site.current.siteId is match ("[0-9a-zA-Z]*")
      - add_site.current.templateName == "Template1"

  - name: Add site L3Out (normal_mode)
    mso_schema_site_l3out:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      l3out: '{{item.l3out}}'
      vrf:
          name: VRF1
          template: Template1
          schema: '{{ mso_schema | default("ansible_test") }}'
      state: present
    loop:
    - { l3out: L3out1}
    - { l3out: L3out2}

  # ADD External EPGs to site
  - name: ADD External EPG1 to site (check_mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      site: '{{ mso_site | default("ansible_test") }}'
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template1
      external_epg: ansible_test_1
      l3out: L3out1
      state: present
    check_mode: yes
    register: cm_add_epg

  - name: Verify cm_add_epg
    assert:
      that:
      - cm_add_epg is changed
      - cm_add_epg.previous == {}
      - cm_add_epg.current.externalEpgRef.externalEpgName == "ansible_test_1"
      - cm_add_epg.current.externalEpgRef.templateName == "Template1"

  - name: Add external EPG to site (normal mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      site: '{{ mso_site | default("ansible_test") }}'
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template1
      external_epg: ansible_test_1
      l3out: L3out1
      state: present
    register: nm_add_epg

  - name: Verify nm_add_epg
    assert:
      that:
      - nm_add_epg is changed
      - nm_add_epg.previous == {}
      - nm_add_epg.current.externalEpgRef.externalEpgName == "ansible_test_1"
      - nm_add_epg.current.externalEpgRef.templateName == "Template1"
      - cm_add_epg.current.externalEpgRef.schemaId ==  nm_add_epg.current.externalEpgRef.schemaId

  - name: ADD External EPG1 to site again
    mso_schema_site_external_epg:
      <<: *mso_info
      site: '{{ mso_site | default("ansible_test") }}'
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template1
      external_epg: ansible_test_1
      l3out: L3out1
      state: present
    register: add_epg_again

  - name: Verify add_epg_again
    assert:
      that:
      - add_epg_again is not changed
      - add_epg_again.current.externalEpgRef.externalEpgName == "ansible_test_1"
      - add_epg_again.current.externalEpgRef.templateName == "Template1"

  # QUERY ALL EPG
  - name: Query all external EPGs in site (check_mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      state: query
    check_mode: yes
    register: cm_query_all_epgs

  - name: Query all EPG (normal mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      state: query
    register: nm_query_all_epgs

  - name: Verify query_all_epgs
    assert:
      that:
      - cm_query_all_epgs is not changed
      - nm_query_all_epgs is not changed

  # QUERY AN EPG
  - name: Query epg 1(check_mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      external_epg: ansible_test_1
      l3out: L3out1
      state: query
    check_mode: yes
    register: cm_query_epg_1

  - name: Query epg 1(normal_mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      external_epg: ansible_test_1
      l3out: L3out1
      state: query
    register: nm_query_epg_1

  - name: Verify cm_query_epg_1 and nm_query_epg_1
    assert:
      that:
      - cm_query_epg_1 is not changed
      - nm_query_epg_1 is not changed

  # REMOVE EPG
  - name: Remove EPG (check_mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      external_epg: ansible_test_1
      l3out: L3out1
      state: absent
    check_mode: yes
    register: cm_remove_epg

  - name: Verify cm_remove_epg
    assert:
      that:
      - cm_remove_epg is changed
      - cm_remove_epg.current == {}

  - name: Remove EPG (normal_mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      external_epg: ansible_test_1
      l3out: L3out1
      state: absent
    register: nm_remove_epg

  - name: Verify nm_remove_epg
    assert:
      that:
      - nm_remove_epg is changed
      - nm_remove_epg.current == {}

  # Associate site to schema/template before creating External EPG
  - name: Add non-cloud site to a schema
    mso_schema_site:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template2
      state: present
    when: version.current.version is version('3.3', '>=')
    register: add_site

  - name: Verify add_site
    assert:
      that:
      - add_site.current.siteId is match ("[0-9a-zA-Z]*")
      - add_site.current.templateName == "Template2"

  # Create template External EPG after site association
  - name: Add external EPG (at template level)
    mso_schema_template_external_epg:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template2
      external_epg: ansible_test_2
      vrf:
        name: VRF1
        schema: '{{ mso_schema | default("ansible_test") }}'
        template: Template1
      state: present
    register: nm_add_ex_epg

  - name: Verify nm_add_ex_epg
    assert:
      that:
      - nm_add_ex_epg is changed
      - nm_add_ex_epg.previous == {}
      - nm_add_ex_epg.current.name == "ansible_test_2"
      - nm_add_ex_epg.current.vrfRef.vrfName == "VRF1"

  - name: Add external EPG to site (normal mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      site: '{{ mso_site | default("ansible_test") }}'
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template2
      external_epg: ansible_test_2
      l3out: L3out1
      state: present
    register: nm_add_epg

  - name: Verify nm_add_epg
    assert:
      that:
      - nm_add_epg is changed
      - nm_add_epg.previous == {}
      - nm_add_epg.current.externalEpgRef.externalEpgName == "ansible_test_2"
      - nm_add_epg.current.externalEpgRef.templateName == "Template2"

  # QUERY NON-EXISTING external EPG
  - name: Query non-existing External EPG (check_mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      external_epg: non_existing_epg
      l3out: L3out1
      state: query
    check_mode: yes
    ignore_errors: yes
    register: cm_query_non_external_epg

  - name: Query non-existing External EPG (normal_mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      external_epg: non_existing_epg
      l3out: L3out1
      state: query
    ignore_errors: yes
    register: nm_query_non_external_epg

  - name: Verify cm_query_non_external_epg and nm_query_non_external_epg
    assert:
      that:
      - cm_query_non_external_epg is not changed
      - nm_query_non_external_epg is not changed
      - cm_query_non_external_epg.msg == nm_query_non_external_epg.msg == "External EPG 'non_existing_epg' not found"

  # USE NON-EXISTING STATE
  - name: non_existing_state state (check_mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      external_epg: ansible_test_2
      l3out: L3out1
      state: non_existing_state
    ignore_errors: yes
    register: cm_non_existing_state

  - name: non_existing_state state (normal_mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      external_epg: ansible_test_2
      l3out: L3out1
      state: non_existing_state
    ignore_errors: yes
    register: nm_non_existing_state

  - name: Verify cm_non_existing_state and nm_non_existing_state
    assert:
      that:
      - cm_non_existing_state is not changed
      - nm_non_existing_state is not changed
      - cm_non_existing_state.msg == nm_non_existing_state.msg == "value of state must be one of{{':'}} absent, present, query, got{{':'}} non_existing_state"

  # USE A NON_EXISTING_TEMPLATE
  - name: non_existing_template (check_mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: non_existing_template
      external_epg: ansible_test_2
      l3out: L3out1
      state: query
    check_mode: yes
    ignore_errors: yes
    register: cm_non_existing_template

  - name: non_existing_template (normal_mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: non_existing_template
      external_epg: ansible_test_2
      l3out: L3out1
      state: query
    ignore_errors: yes
    register: nm_non_existing_template

  - name: Verify cm_non_existing_template and nm_non_existing_template
    assert:
      that:
      - cm_non_existing_template is not changed
      - nm_non_existing_template is not changed
      - cm_non_existing_template.msg == nm_non_existing_template.msg == "Provided template 'non_existing_template' does not exist. Existing templates{{':'}} Template1, Template2, Template3"

  # USE A NON_EXISTING_SCHEMA
  - name: non_existing_schema (check_mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      schema: non_existing_schema
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      external_epg: ansible_test_2
      l3out: L3out1
      state: query
    check_mode: yes
    ignore_errors: yes
    register: cm_non_existing_schema

  - name: non_existing_schema (normal_mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      schema: non_existing_schema
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      external_epg: ansible_test_2
      l3out: L3out1
      state: query
    ignore_errors: yes
    register: nm_non_existing_schema

  - name: Verify cm_non_existing_schema and nm_non_existing_schema
    assert:
      that:
      - cm_non_existing_schema is not changed
      - nm_non_existing_schema is not changed
      - cm_non_existing_schema.msg == nm_non_existing_schema.msg == "Provided schema 'non_existing_schema' does not exist."

  # USE A NON_EXISTING_SITE
  - name: non_existing_site (check_mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: non_existing_site
      template: Template1
      external_epg: ansible_test_2
      l3out: L3out1
      state: query
    check_mode: yes
    ignore_errors: yes
    register: cm_non_existing_site

  - name: non_existing_site (normal_mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: non_existing_site
      template: Template1
      external_epg: ansible_test_2
      l3out: L3out1
      state: query
    ignore_errors: yes
    register: nm_non_existing_site

  - name: Verify cm_non_existing_site and nm_non_existing_site
    assert:
      that:
      - cm_non_existing_site is not changed
      - nm_non_existing_site is not changed
      - cm_non_existing_site.msg == nm_non_existing_site.msg == "Site 'non_existing_site' is not a valid site name."

  # USE A NON_EXISTING_SITE_TEMPLATE
  - name: non_existing_site_template (check_mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template3
      external_epg: ansible_test_2
      l3out: L3out1
      state: query
    check_mode: yes
    ignore_errors: yes
    register: cm_non_existing_site_template

  - name: non_existing_site_template (normal_mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template3
      external_epg: ansible_test_2
      l3out: L3out1
      state: query
    ignore_errors: yes
    register: nm_non_existing_site_template

  - name: Verify cm_non_existing_site_template and nm_non_existing_site_template
    assert:
      that:
      - cm_non_existing_site_template is not changed
      - nm_non_existing_site_template is not changed
      - cm_non_existing_site_template.msg == nm_non_existing_site_template.msg == "Provided template 'Template3' does not exist. Existing templates{{':'}} Template1, Template2, Template3"

  # USE A TEMPLATE WITHOUT ANY SITE
  - name: Add site L3Out to Schema Template2 without any site associated (check mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template3
      external_epg: ansible_test_2
      l3out: L3out1
      state: present
    check_mode: yes
    ignore_errors: yes
    register: cm_no_site_associated

  - name: Add site L3Out to Template2 without any site associated (normal mode)
    mso_schema_site_external_epg:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template3
      external_epg: ansible_test_2
      l3out: L3out1
      state: present
    ignore_errors: yes
    register: nm_no_site_associated

  - name: Verify cm_no_site_associated and nm_no_site_associated
    assert:
      that:
      - cm_no_site_associated is not changed
      - nm_no_site_associated is not changed
      - cm_no_site_associated.msg == nm_no_site_associated.msg == "Provided template 'Template3' does not exist. Existing templates{{':'}} Template1, Template2, Template3"
