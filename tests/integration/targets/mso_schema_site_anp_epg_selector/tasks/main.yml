# Test code for the MSO modules
# Copyright: (c) 2020, Cindy Zhao (@cizhao) <cizhao@cisco.com>
# Copyright: (c) 2020, Lionel Hercot (@lhercot) <lhercot@cisco.com>
# Copyright: (c) 2018, Dag Wieers (@dagwieers) <dag@wieers.com> (based on mso_site test case)

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI MultiSite host, username and password
  fail:
    msg: 'Please define the following variables: mso_hostname, mso_username and mso_password.'
  when: mso_hostname is not defined or mso_username is not defined or mso_password is not defined

# CLEAN ENVIRONMENT
- name: Set vars
  set_fact: 
    mso_info: &mso_info
      host: '{{ mso_hostname }}'
      username: '{{ mso_username }}'
      password: '{{ mso_password }}'
      validate_certs: '{{ mso_validate_certs | default(false) }}'
      use_ssl: '{{ mso_use_ssl | default(true) }}'
      use_proxy: '{{ mso_use_proxy | default(true) }}'
      output_level: '{{ mso_output_level | default("info") }}'

- name: Query MSO version
  mso_version:
    <<: *mso_info
    state: query
  register: version

- name: Remove schemas
  mso_schema:
    <<: *mso_info
    schema: '{{ item }}'
    state: absent
  loop:
  - '{{ mso_schema | default("ansible_test") }}_2'
  - '{{ mso_schema | default("ansible_test") }}'

- name: Ensure azure site exists
  mso_site:
    <<: *mso_info
    site: 'azure_{{ mso_site | default("ansible_test") }}'
    apic_username: '{{ azure_apic_username }}'
    apic_password: '{{ azure_apic_password }}'
    apic_site_id: '{{ azure_site_id }}'
    urls:
    - https://{{ azure_apic_hostname }}
    state: present

- name: Ensure aws site exists
  mso_site:
    <<: *mso_info
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    apic_username: '{{ aws_apic_username }}'
    apic_password: '{{ aws_apic_password }}'
    apic_site_id: '{{ aws_site_id }}'
    urls:
    - https://{{ aws_apic_hostname }}
    state: present

- name: Ensure tenant ansible_test exists
  mso_tenant: 
    <<: *mso_info
    tenant: ansible_test
    users:
      - '{{ mso_username }}'
    # sites:
    # - '{{ mso_site | default("ansible_test") }}'
    state: present

- name: Associate aws site with ansible_test in normal mode
  mso_tenant_site:
    <<: *mso_info
    tenant: ansible_test
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    cloud_account: "000000000000"
    aws_trusted: false
    aws_access_key: "1"
    secret_key: "0"
    state: present 
  register: aaws_nm

- name: Associate azure site with access_type not present, with ansible_test in normal mode
  mso_tenant_site:
    <<: *mso_info
    tenant: ansible_test
    site: 'azure_{{ mso_site | default("ansible_test") }}'
    cloud_account: uni/tn-ansible_test/act-[100]-vendor-azure
    state: present 
  register: aazure_shared_nm

- name: Ensure schema 1 with Template 1, and Template 2, Template 3 exist
  mso_schema_template:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    tenant: ansible_test
    template: '{{item.template}}'
    state: present
  loop:
  - { template: Template 1}
  - { template: Template 2}
  - { template: Template 3}

- name: Ensure schema 2 with Template 3 exist
  mso_schema_template:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    tenant: ansible_test
    template: Template 3
    state: present

- name: Add aws site to a schema
  mso_schema_site:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: '{{item.template}}'
    state: present
  loop:
  - { template: Template 1}
  - { template: Template 2}
  when: version.current.version[0] | int < 3

- name: Add azure site to a schema
  mso_schema_site:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'azure_{{ mso_site | default("ansible_test") }}'
    template: '{{item.template}}'
    state: present
  loop:
  - { template: Template 1}
  - { template: Template 2}
  when: version.current.version[0] | int < 3

- name: Ensure VRF1 exists
  mso_schema_template_vrf: 
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    vrf: VRF1
    state: present

- name: Ensure ANP exist
  mso_schema_template_anp:
    <<: *mso_info
    schema: '{{ item.schema }}'
    template: '{{ item.template }}'
    anp: ANP
    state: present
  loop:
  - { schema: '{{ mso_schema | default("ansible_test") }}', template: 'Template 1' }
  - { schema: '{{ mso_schema | default("ansible_test") }}', template: 'Template 2' }

- name: Add a new CIDR in VRF1 at site level
  mso_schema_site_vrf_region_cidr: &mso_present
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    site: '{{ item }}'
    vrf: VRF1
    region: us-west-1
    cidr: 10.0.0.0/16
    primary: true
    state: present
  loop:
  - 'aws_{{ mso_site | default("ansible_test") }}'
  - 'azure_{{ mso_site | default("ansible_test") }}'

# ADD EPGs
- name: Ensure EPGs exist
  mso_schema_template_anp_epg:
    <<: *mso_info
    schema: '{{ item.schema }}'
    template: '{{ item.template }}'
    anp: ANP
    epg: '{{ item.epg }}'
    vrf:
      name: VRF1
      schema: ansible_test
      template: Template 1
    state: present
  loop:
  - { schema: '{{ mso_schema | default("ansible_test") }}', template: 'Template 1', epg: 'ansible_test_1' }
  - { schema: '{{ mso_schema | default("ansible_test") }}', template: 'Template 1', epg: 'ansible_test_2' }

- name: Add Selector to EPG (normal_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_1
    state: present
  register: nm_add_selector_1

- name: Verify nm_add_selector_1
  assert:
    that:
    - nm_add_selector_1 is changed
    - nm_add_selector_1.previous == {}
    - nm_add_selector_1.current.name == "selector_1"
    - nm_add_selector_1.current.expressions == []

- name: Add Selector 2 to EPG (normal_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_2
    expressions:
      - type: expression_2_template
        operator: in
        value: test
    state: present
  register: nm_add_selector_2

- name: Verify nm_add_selector_2
  assert:
    that:
    - nm_add_selector_2 is changed
    - nm_add_selector_2.previous == {}
    - nm_add_selector_2.current.name == "selector_2"
    - nm_add_selector_2.current.expressions[0].key == "Custom:expression_2_template"
    - nm_add_selector_2.current.expressions[0].operator == "in"
    - nm_add_selector_2.current.expressions[0].value == "test"

# ADD SELECTORS to site EPG
- name: Add selector site_selector_1 to site EPG ansible_test_1 with ANP (check_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_1
    state: present
  check_mode: yes
  register: cm_add_site_selector_1

- name: Verify cm_add_site_selector_1
  assert:
    that:
    - cm_add_site_selector_1 is changed
    - cm_add_site_selector_1.previous == {}
    - cm_add_site_selector_1.current.name == "site_selector_1"
    - cm_add_site_selector_1.current.expressions == []

- name: Add selector site_selector_1 to site EPG ansible_test_1 with ANP (normal_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_1
    state: present
  register: nm_add_site_selector_1

- name: Verify nm_add_site_selector_1
  assert:
    that:
    - nm_add_site_selector_1 is changed
    - nm_add_site_selector_1.previous == {}
    - nm_add_site_selector_1.current.name == "site_selector_1"
    - nm_add_site_selector_1.current.expressions == []

# Add selector 1 again
- name: Add selector site_selector_1 to site EPG ansible_test_1 with ANP again (normal_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_1
    state: present
  register: nm_add_site_selector_1_again

- name: Verify nm_add_site_selector_1_again
  assert:
    that:
    - nm_add_site_selector_1_again is not changed
    - nm_add_site_selector_1_again.current.name == "site_selector_1" == nm_add_site_selector_1_again.previous.name
    - nm_add_site_selector_1_again.current.expressions == [] == nm_add_site_selector_1_again.previous.expressions

- name: Add Selector 1 to site EPG with space in selector name (normal_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector 1
    state: present
  ignore_errors: yes
  register: nm_add_selector1_with_space_in_name

- name: Verify nm_add_selector1_with_space_in_name
  assert:
    that:
    - nm_add_selector1_with_space_in_name is not changed
    - nm_add_selector1_with_space_in_name.msg == "There should not be any space in selector name."

- name: Add Selector 2 to site EPG with space in expression type (normal_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_2
    expressions:
      - type: expression 2
        operator: in
        value: test
    state: present
  ignore_errors: yes
  register: nm_add_selector2_with_space_in_expression_type

- name: Verify nm_add_selector2_with_space_in_expression_type
  assert:
    that:
    - nm_add_selector2_with_space_in_expression_type is not changed
    - nm_add_selector2_with_space_in_expression_type.msg == "There should not be any space in 'type' attribute of expression 'expression 2'"

- name: Add Selector 2 to site EPG (check_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_2
    expressions:
      - type: expression_2
        operator: in
        value: test
    state: present
  check_mode: yes
  register: cm_add_site_selector_2

- name: Verify cm_add_selector_2
  assert:
    that:
    - cm_add_site_selector_2 is changed
    - cm_add_site_selector_2.previous == {}
    - cm_add_site_selector_2.current.name == "site_selector_2"
    - cm_add_site_selector_2.current.expressions[0].key == "Custom:expression_2"
    - cm_add_site_selector_2.current.expressions[0].operator == "in"
    - cm_add_site_selector_2.current.expressions[0].value == "test"

- name: Add Selector_2 to site EPG (normal_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_2
    expressions:
      - type: expression_2
        operator: in
        value: test
    state: present
  register: nm_add_site_selector_2

- name: Verify nm_add_site_selector_2
  assert:
    that:
    - nm_add_site_selector_2 is changed
    - nm_add_site_selector_2.previous == {}
    - nm_add_site_selector_2.current.name == "site_selector_2"
    - nm_add_site_selector_2.current.expressions[0].key == "Custom:expression_2"
    - nm_add_site_selector_2.current.expressions[0].operator == "in"
    - nm_add_site_selector_2.current.expressions[0].value == "test"

- name: Change Selector 2 - keyExist(normal_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_2
    expressions:
      - type: expression_5
        operator: has_key
        value: test
    state: present
  ignore_errors: yes
  register: nm_change_site_selector_2_key_exist

- name: Verify nm_change_site_selector_2_key_exist
  assert:
    that:
    - nm_change_site_selector_2_key_exist is not changed
    - nm_change_site_selector_2_key_exist.msg == "Attribute 'value' is not supported for operator 'has_key' in expression 'expression_5'"

- name: Change Selector 2 - keyNotExist (normal_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_2
    expressions:
      - type: expression_6
        operator: does_not_have_key
        value: test
    state: present
  ignore_errors: yes
  register: nm_change_site_selector_2_key_not_exist

- name: Verify nm_change_site_selector_2_key_not_exist
  assert:
    that:
    - nm_change_site_selector_2_key_not_exist is not changed
    - nm_change_site_selector_2_key_not_exist.msg == "Attribute 'value' is not supported for operator 'does_not_have_key' in expression 'expression_6'"

- name: Change Selector 2 - equals (normal_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_2
    expressions:
      - type: expression_6
        operator: equals
    state: present
  ignore_errors: yes
  register: nm_change_site_selector_2_equals

- name: Verify nm_change_site_selector_2_equals
  assert:
    that:
    - nm_change_site_selector_2_equals is not changed
    - nm_change_site_selector_2_equals.msg == "Attribute 'value' needed for operator 'equals' in expression 'expression_6'"

# Remove site ANP
- name: Remove site ANP (normal_mode)
  mso_schema_site_anp:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    state: absent

- name: Query site ANP
  mso_schema_site_anp:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    state: query
  ignore_errors: yes
  register: query_site_ANP

- name: Verify query_site_ANP
  assert:
    that:
    - query_site_ANP.msg == "ANP 'ANP' not found"

# Query without site ANP
- name: Query site_selectors without site ANP
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    state: query
  ignore_errors: yes
  register: query_without_site_ANP

- name: Verify query_without_site_ANP
  assert:
    that:
    - query_without_site_ANP is not changed
    - query_without_site_ANP.msg == "Anp 'ANP' does not exist in site level."

# - name: Add selector without ANP exist in site level
- name: Add site selector 3 without site ANP exist (normal_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_3
    expressions:
        - type: expression_3
          operator: in
          value: test
    state: present
  register: nm_add_site_selector_3_without_anp

- name: Verify nm_add_site_selector_3_without_anp
  assert:
    that:
    - nm_add_site_selector_3_without_anp is changed
    - nm_add_site_selector_3_without_anp.previous == {}
    - nm_add_site_selector_3_without_anp.current.name == "site_selector_3"
    - nm_add_site_selector_3_without_anp.current.expressions[0].key == "Custom:expression_3"
    - nm_add_site_selector_3_without_anp.current.expressions[0].operator == "in"
    - nm_add_site_selector_3_without_anp.current.expressions[0].value == "test"

# Remove site level EPG
- name: Remove site EPG
  mso_schema_site_anp_epg:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    state: absent

# Query without site level EPG
- name: Query site_selectors without site EPG
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    state: query
  ignore_errors: yes
  register: query_without_site_EPG

- name: Verify query_without_site_EPG
  assert:
    that:
    - query_without_site_EPG is not changed
    - query_without_site_EPG.msg == "Epg 'ansible_test_1' does not exist in site level."

- name: Add site selector 1 without site EPG exist (normal_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_1
    state: present
  register: nm_add_site_selector_1_without_epg

- name: Verify nm_add_site_selector_1_without_epg
  assert:
    that:
    - nm_add_site_selector_1_without_epg is changed
    - nm_add_site_selector_1_without_epg.previous == {}
    - nm_add_site_selector_1_without_epg.current.name == "site_selector_1"
    - nm_add_site_selector_1_without_epg.current.expressions == []

- name: Add site_selector_1 site_selector_2 site_selector_3 again
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: '{{ item.selector }}'
    expressions:
      - type: '{{ item.type }}'
        operator: in
        value: test
    state: present
  loop:
  - {selector: 'site_selector_1', type: 'expression_1'}
  - {selector: 'site_selector_2', type: 'expression_2'}
  - {selector: 'site_selector_3', type: 'expression_3'}
  register: nm_add_site_selectors_again

- name: Verify nm_add_site_selectors_again
  assert:
    that:
    - nm_add_site_selectors_again is changed

# Query all selectors
- name: Query selectors to site EPG
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    state: query
  register: query_all_site_selectors

- name: Verify query_all_site_selectors
  assert:
    that:
    - query_all_site_selectors is not changed
    - query_all_site_selectors.current | length == 3
    - query_all_site_selectors.current[0].name == "site_selector_1"
    - query_all_site_selectors.current[0].expressions[0].key == "Custom:expression_1"
    - query_all_site_selectors.current[0].expressions[0].operator == "in"
    - query_all_site_selectors.current[0].expressions[0].value == "test"
    - query_all_site_selectors.current[1].name == "site_selector_2"
    - query_all_site_selectors.current[1].expressions[0].key == "Custom:expression_2"
    - query_all_site_selectors.current[1].expressions[0].operator == "in"
    - query_all_site_selectors.current[1].expressions[0].value == "test"
    - query_all_site_selectors.current[2].name == "site_selector_3"
    - query_all_site_selectors.current[2].expressions[0].key == "Custom:expression_3"
    - query_all_site_selectors.current[2].expressions[0].operator == "in"
    - query_all_site_selectors.current[2].expressions[0].value == "test"

# Query sepecific seletor to site EPG
- name: Query selector to site EPG
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_1
    state: query
  register: query_site_selector_1

- name: Verify query_site_selector_1
  assert:
    that:
    - query_site_selector_1 is not changed
    - query_site_selector_1.current.name == "site_selector_1"
    - query_site_selector_1.current.expressions[0].key == "Custom:expression_1"
    - query_site_selector_1.current.expressions[0].operator == "in"
    - query_site_selector_1.current.expressions[0].value == "test"

- name: Remove site selector 3 (normal_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_3
    state: absent
  register: nm_remove_site_selector_3

- name: Verify nm_remove_site_selector_3
  assert:
    that:
    - nm_remove_site_selector_3 is changed
    - nm_remove_site_selector_3.current == {}

- name: Remove site selector 3 again (normal_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_3
    state: absent
  register: nm_remove_site_selector_3_again

- name: Verify nm_remove_site_selector_3_again
  assert:
    that:
    - nm_remove_site_selector_3_again is not changed
    - nm_remove_site_selector_3_again.current == {}

# QUERY NON-EXISTING Selector to EPG
- name: Query non-existing selector (check_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: non_existing_selector
    state: query
  check_mode: yes
  ignore_errors: yes
  register: cm_query_non_selector

- name: Query non-existing selector (normal mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: non_existing_selector
    state: query
  ignore_errors: yes
  register: nm_query_non_selector

- name: Verify cm_query_non_selector and nm_query_non_selector
  assert:
    that:
    - cm_query_non_selector is not changed
    - nm_query_non_selector is not changed
    - cm_query_non_selector == nm_query_non_selector
    - cm_query_non_selector.msg == "Selector 'non_existing_selector' not found"
    - nm_query_non_selector.msg == "Selector 'non_existing_selector' not found"

# QUERY NON-EXISTING EPG
- name: Query non-existing EPG (check_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: non_existing_epg
    selector: site_selector_1
    state: query
  check_mode: yes
  ignore_errors: yes
  register: cm_query_non_epg

- name: Query non-existing EPG (normal mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: non_existing_epg
    selector: site_selector_1
    state: query
  ignore_errors: yes
  register: nm_query_non_epg

- name: Verify query_non_epg
  assert:
    that:
    - cm_query_non_epg is not changed
    - nm_query_non_epg is not changed
    - cm_query_non_epg == nm_query_non_epg
    - cm_query_non_epg.msg == nm_query_non_epg.msg == "Provided EPG 'non_existing_epg' does not exist. Existing EPGs{{':'}} ansible_test_1, ansible_test_2"

# QUERY NON-EXISTING ANP
- name: Query non-existing ANP (check_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: non_existing_anp
    epg: ansible_test_1
    selector: site_selector_1
    state: query
  check_mode: yes
  ignore_errors: yes
  register: cm_query_non_anp

- name: Query non-existing ANP (normal mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: non_existing_anp
    epg: ansible_test_1
    selector: site_selector_1
    state: query
  ignore_errors: yes
  register: nm_query_non_anp

- name: Verify query_non_anp
  assert:
    that:
    - cm_query_non_anp is not changed
    - nm_query_non_anp is not changed
    - cm_query_non_anp == nm_query_non_anp
    - cm_query_non_anp.msg == nm_query_non_anp.msg == "Provided anp 'non_existing_anp' does not exist. Existing anps{{':'}} ANP"

# USE A NON-EXISTING STATE
- name: Non-existing state (check_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_1
    state: non-existing-state
  check_mode: yes
  ignore_errors: yes
  register: cm_non_existing_state

- name: Non-existing state (normal_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_1
    state: non-existing-state
  ignore_errors: yes
  register: nm_non_existing_state

- name: Verify non_existing_state
  assert:
    that:
    - cm_non_existing_state is not changed
    - nm_non_existing_state is not changed
    - cm_non_existing_state == nm_non_existing_state
    - cm_non_existing_state.msg == nm_non_existing_state.msg == "value of state must be one of{{':'}} absent, present, query, got{{':'}} non-existing-state"

# USE A NON-EXISTING TEMPLATE
- name: Non-existing template (check_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: non-existing-template
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_1
    state: query
  check_mode: yes
  ignore_errors: yes
  register: cm_non_existing_template

- name: Non-existing template (normal_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: non-existing-template
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_1
    state: query
  ignore_errors: yes
  register: nm_non_existing_template

- name: Verify non_existing_template
  assert:
    that:
    - cm_non_existing_template is not changed
    - nm_non_existing_template is not changed
    - cm_non_existing_template == nm_non_existing_template
    - cm_non_existing_template.msg == nm_non_existing_template.msg == "Provided template 'non-existing-template' does not exist. Existing templates{{':'}} Template1, Template2, Template3"

# USE A NON-EXISTING SCHEMA
- name: Non-existing schema (check_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: non-existing-schema
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_1
    state: query
  check_mode: yes
  ignore_errors: yes
  register: cm_non_existing_schema

- name: Non-existing schema (normal_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: non-existing-schema
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_1
    state: query
  ignore_errors: yes
  register: nm_non_existing_schema

- name: Verify non_existing_schema
  assert:
    that:
    - cm_non_existing_schema is not changed
    - nm_non_existing_schema is not changed
    - cm_non_existing_schema == nm_non_existing_schema
    - cm_non_existing_schema.msg == nm_non_existing_schema.msg == "Provided schema 'non-existing-schema' does not exist"

# USE A NON-EXISTING SITE
- name: Non-existing site (check_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: non-existing-site
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_1
    state: query
  check_mode: yes
  ignore_errors: yes
  register: cm_non_existing_site

- name: Non-existing site (normal_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: non-existing-site
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_1
    state: query
  ignore_errors: yes
  register: nm_non_existing_site

- name: Verify non_existing_site
  assert:
    that:
    - cm_non_existing_site is not changed
    - nm_non_existing_site is not changed
    - cm_non_existing_site == nm_non_existing_site
    - cm_non_existing_site.msg == nm_non_existing_site.msg == "Site 'non-existing-site' is not a valid site name."

# USE A NON-EXISTING SITE-TEMPLATE 
- name: Non-existing site-template (check_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 3
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_1
    state: query
  check_mode: yes
  ignore_errors: yes
  register: cm_non_existing_site_template

- name: Non-existing site-template  (normal_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 3
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_1
    state: query
  ignore_errors: yes
  register: nm_non_existing_site_template

- name: Verify non_existing_site_template
  assert:
    that:
    - cm_non_existing_site_template is not changed
    - nm_non_existing_site_template is not changed
    - cm_non_existing_site_template == nm_non_existing_site_template
    - cm_non_existing_site_template.msg == nm_non_existing_site_template.msg == "Provided site-template association 'aws_{{ mso_site | default("ansible_test") }}-Template3' does not exist."

- name: Add Selector_4 to site EPG (normal_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_4
    expressions:
      - type: ip_address
        operator: has_key
    state: present
  ignore_errors: yes
  register: nm_add_site_selector_4

- name: Verify nm_add_site_selector_4
  assert:
    that:
    - nm_add_site_selector_4 is not changed
    - nm_add_site_selector_4.msg == "Operator 'has_key' is not supported when expression type is 'ip_address'"

- name: Add Selector_4 to site EPG again (normal_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_4
    expressions:
      - type: ip_address
        operator: in
        value: test
    state: present
  register: nm_add_site_selector_4_again

- name: Verify nm_add_site_selector_4
  assert:
    that:
    - nm_add_site_selector_4_again is changed
    - nm_add_site_selector_4_again.current.name == "site_selector_4"

- name: Add azure site_selector_1 to site EPG (normal_mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'azure_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_1
    expressions:
      - type: zone
        operator: in
        value: test
    state: present
  ignore_errors: yes
  register: nm_add_azure_site_selector_1

- name: Verify nm_add_azure_site_selector_1
  assert:
    that:
    - nm_add_azure_site_selector_1 is not changed
    - nm_add_azure_site_selector_1.msg == "Type 'zone' is only supported for aws"

# USE A TEMPLATE WITHOUT ANY SITE
- name: Add site EPG selector to Schema 2 Template 3 without any site associated (check mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    site: 'azure_{{ mso_site | default("ansible_test") }}'
    template: Template 3
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_1
    expressions:
      - type: zone
        operator: in
        value: test
    state: present
  ignore_errors: yes
  check_mode: yes
  register: cm_no_site_associated

- name: Add site EPG selector to Template 3 without any site associated (normal mode)
  mso_schema_site_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    site: 'azure_{{ mso_site | default("ansible_test") }}'
    template: Template 3
    anp: ANP
    epg: ansible_test_1
    selector: site_selector_1
    expressions:
      - type: zone
        operator: in
        value: test
    state: present
  ignore_errors: yes
  register: nm_no_site_associated

- name: Verify cm_no_site_associated and nm_no_site_associated
  assert:
    that:
    - cm_no_site_associated is not changed
    - nm_no_site_associated is not changed
    - cm_no_site_associated.msg == nm_no_site_associated.msg == "No site associated with template 'Template3'. Associate the site with the template using mso_schema_site."