# Test code for the MSO modules
# Copyright: (c) 2020, Anvitha Jain (@anvitha-jain) <anvjain@cisco.com>
#

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI MultiSite host, username and password
  fail:
    msg: 'Please define the following variables: mso_hostname, mso_username and mso_password.'
  when: mso_hostname is not defined or mso_username is not defined or mso_password is not defined


# CLEAN ENVIRONMENT
- name: Set vars
  set_fact:
    mso_info: &mso_info
      host: '{{ mso_hostname }}'
      username: '{{ mso_username }}'
      password: '{{ mso_password }}'
      validate_certs: '{{ mso_validate_certs | default(false) }}'
      use_ssl: '{{ mso_use_ssl | default(true) }}'
      use_proxy: '{{ mso_use_proxy | default(true) }}'
      output_level: '{{ mso_output_level | default("info") }}'

- name: Query MSO version
  mso_version:
    <<: *mso_info
    state: query
  register: version

- name: Remove schemas
  cisco.mso.mso_schema:
    <<: *mso_info
    schema: '{{ item }}'
    state: absent
  loop:
  - '{{ mso_schema | default("ansible_test") }}_2'
  - '{{ mso_schema | default("ansible_test") }}'

- name: Remove tenant ansible_test
  mso_tenant:
    <<: *mso_info
    tenant: ansible_test
    state: absent

# QUERY SCHEMAS
- name: Query schema
  mso_rest:
    <<: *mso_info
    path: /mso/api/v1/schemas
    method: get
  register: query_all_schema

- name: Verify query_all_schema
  assert:
    that:
    - query_all_schema is not changed

# QUERY A USER
- name: Query our user
  mso_user:
    <<: *mso_info
    state: query
    user: '{{ mso_username }}'
  check_mode: true
  register: query_user_id

- name: Verify query_user_id
  assert:
    that:
    - query_user_id is not changed
    - query_user_id.current.username == '{{ mso_username }}'

# ADD tenant
- name: Add tenant
  mso_rest:
    <<: *mso_info
    path: /mso/api/v1/tenants
    method: post
    content:
      displayName: ansible_test
      name: ansible_test
      description: MSO tenant
      siteAssociations: []
      userAssociations:
      - userId: '{{ query_user_id.current.id }}'
      _updateVersion: 0
  register: add_tenant

- name: Verify add_tenant in yaml_string
  assert:
    that:
    - add_tenant is changed
    - add_tenant.jsondata.displayName == 'ansible_test'

# ADD schema
- name: Add schema
  mso_rest:
    <<: *mso_info
    path: /mso/api/v1/schemas
    method: post
    content:
      displayName: '{{ mso_schema | default("ansible_test") }}'
      templates:
        - name: Template_1
          tenantId: '{{ add_tenant.jsondata.id }}'
          displayName: Template_1
          templateSubType: []
          templateType: stretched-template
          anps: []
          contracts: []
          vrfs: []
          bds: []
          filters: []
          externalEpgs: []
          serviceGraphs: []
          intersiteL3outs: []
      sites: []
      _updateVersion: 0
  register: add_schema

- name: Verify add_schema in yaml_string
  assert:
    that:
    - add_schema is changed
    - add_schema.jsondata.displayName == 'ansible_test'

# PUT schema
- name: Put schema
  mso_rest:
    <<: *mso_info
    path: "/mso/api/v1/schemas/{{ add_schema.jsondata.id }}"
    method: put
    content:
      displayName: ansible_test_2
      templates:
      - name: Template_1
        tenantId: '{{ add_tenant.jsondata.id }}'
        displayName: Template_1
        templateSubType: []
        templateType: stretched-template
        anps: []
        contracts: []
        vrfs: []
        bds: []
        filters: []
        externalEpgs: []
        serviceGraphs: []
        intersiteL3outs: []
      sites: []
      _updateVersion: 0
  register: put_schema

- name: Verify put_schema in yaml_string
  assert:
    that:
    - put_schema is changed
    - put_schema.jsondata.displayName == 'ansible_test_2'

# PATCH schema
- name: Patch schema
  mso_rest:
    <<: *mso_info
    path: "/mso/api/v1/schemas/{{ add_schema.jsondata.id }}"
    method: patch
    content:
      - op: add
        path: /templates/Template_1/anps/-
        value:
          name: AP2
          displayName: AP2
          epgs: []
        _updateVersion: 0
  register: patch_schema

- name: Verify patch_schema in yaml_string
  assert:
    that:
    - patch_schema is changed

- name: Verify patch_schema in yaml_string
  assert:
    that:
    - patch_schema.jsondata.templates[0].anps[0].displayName == 'AP2'
  # MSO 3.3 PATCH does not return anything anymore.
  when: version.current.version is version('3.3', '<')

# DELETE the schema
- name: Delete the schema
  mso_rest:
    <<: *mso_info
    path: "/mso/api/v1/schemas/{{ add_schema.jsondata.id }}"
    method: delete
  register: delete_schema

- name: Verify delete_schema in yaml_string
  assert:
    that:
    - delete_schema is changed
    - delete_schema.jsondata == None

# DELETE TENANT
- name: Delete the tenant
  mso_rest:
    <<: *mso_info
    path: "/mso/api/v1/tenants/{{ add_tenant.jsondata.id }}"
    method: delete
  register: delete_tenant

- name: Verify delete_tenant in yaml_string
  assert:
    that:
    - delete_tenant is changed
    - delete_tenant.jsondata == None