# Test code for the MSO modules
# Copyright: (c) 2025, Gaspard Micol (@gmicol) <gmicol@cisco.com>

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI MultiSite host, username and password
  ansible.builtin.fail:
    msg: 'Please define the following variables: mso_hostname, mso_username and mso_password.'
  when: mso_hostname is not defined or mso_username is not defined or mso_password is not defined

# CLEAN ENVIRONMENT
- name: Set vars
  ansible.builtin.set_fact:
    mso_info: &mso_info
      host: '{{ mso_hostname }}'
      username: '{{ mso_username }}'
      password: '{{ mso_password }}'
      validate_certs: '{{ mso_validate_certs | default(false) }}'
      use_ssl: '{{ mso_use_ssl | default(true) }}'
      use_proxy: '{{ mso_use_proxy | default(true) }}'
      output_level: '{{ mso_output_level | default("info") }}'

# QUERY VERSION
- name: Query MSO version
  cisco.mso.mso_version:
    <<: *mso_info
    state: query
  register: version


- name: Execute tasks only for MSO version > 4.3
  when: version.current.version is version('4.3', '>=')
  block:

    - name: Ensure sites exists
      cisco.mso.mso_site:
        <<: *mso_info
        site: '{{ item.site }}'
        apic_username: '{{ apic_username }}'
        apic_password: '{{ apic_password }}'
        apic_site_id: '{{ item.apic_site_id }}'
        urls:
          - https://{{ apic_hostname }}
        state: present
      loop:
        - {site: "ansible_test", apic_site_id: 101}
        - {site: "ansible_test_2", apic_site_id: 102}

    - name: Ensure templates do not exist
      cisco.mso.ndo_template: &template_absent
        <<: *mso_info
        name: ansible_fabric_policy_template
        template_type: fabric_policy
        tenant: ansible_test
        state: absent

    - name: Ensure templates exist
      cisco.mso.ndo_template:
        <<: *template_absent
        state: present

    # CREATE

    - name: Create a new NTP Policy (check_mode)
      cisco.mso.ndo_ntp_policy: &create_ntp_policy
        <<: *mso_info
        template: ansible_fabric_policy_template
        name: ansible_test_ntp_policy
        description: Ansible NTP policy
        ntp_keys:
          - id: 1
            key: my_key
            authentification_type: md5
            trusted: true
        ntp_providers:
          - host: background
            minimum_poll_interval: 4
            maximum_poll_interval: 16
            management_epg_type: oob
            management_epg: default
            preferred: true
            authentification_key_id: 1
        admin_state: enabled
        server_state: enabled
        master_mode: enabled
        stratum: 4
        authentification_state: enabled
        state: present
      check_mode: true
      register: cm_create_new_ntp_policy

    - name: Create a new NTP Policy
      cisco.mso.ndo_ntp_policy:
        <<: *create_ntp_policy
      register: nm_create_new_ntp_policy

    - name: Create a new NTP Policy again
      cisco.mso.ndo_ntp_policy:
        <<: *create_ntp_policy
      register: nm_create_new_ntp_policy_again
    
    - name: Create another NTP Policy with minimum requirements
      cisco.mso.ndo_ntp_policy: &create_ntp_policy_2
        <<: *mso_info
        template: ansible_fabric_policy_template
        name: ansible_test_ntp_policy_2
        state: present
      register: nm_create_another_ntp_policy

    - name: Assert NTP Policy was created
      assert:
        that:
          - cm_create_new_ntp_policy is changed
          - cm_create_new_ntp_policy.previous == {}
          - cm_create_new_ntp_policy.current.name == "ansible_test_ntp_policy"
          - cm_create_new_ntp_policy.current.description == "Ansible NTP policy"
          - nm_create_new_ntp_policy is changed
          - nm_create_new_ntp_policy.previous == {}
          - nm_create_new_ntp_policy.current.name == "ansible_test_ntp_policy"
          - nm_create_new_ntp_policy.current.description == "Ansible NTP policy"
          - nm_create_new_ntp_policy.current.uuid is defined
          - nm_create_new_ntp_policy_again is not changed
          - nm_create_new_ntp_policy_again.previous.name == "ansible_test_ntp_policy"
          - nm_create_new_ntp_policy_again.previous.description == "Ansible NTP policy"
          - nm_create_new_ntp_policy_again.previous.uuid is defined
          - nm_create_new_ntp_policy_again.current.name == "ansible_test_ntp_policy"
          - nm_create_new_ntp_policy_again.current.description == "Ansible NTP policy"
          - nm_create_new_ntp_policy_again.current.uuid is defined
          - nm_create_another_ntp_policy is changed
          - nm_create_another_ntp_policy.previous = {}
          - nm_create_another_ntp_policy.current.name = "ansible_test_ntp_policy_2"

    # UPDATE

    - name: Update a NTP Policy (check_mode)
      cisco.mso.ndo_ntp_policy: &update_ntp_policy
        <<: *create_ntp_policy
        description: New Ansible NTP policy
      check_mode: true
      register: cm_update_ntp_policy

    - name: Update a NTP Policy
      cisco.mso.ndo_ntp_policy:
        <<: *update_ntp_policy
      register: nm_update_ntp_policy

    - name: Update a NTP Policy again
      cisco.mso.ndo_ntp_policy:
        <<: *update_ntp_policy
      register: nm_update_ntp_policy_again

    - name: Remove NTP providers from NTP Policy
      cisco.mso.ndo_ntp_policy: &remove_ntp_policy_dscp
        <<: *update_ntp_policy
        ntp_providers: []
      register: nm_remove_ntp_policy_dscp

    - name: Remove NTP providers from NTP Policy again
      cisco.mso.ndo_ntp_policy:
        <<: *remove_ntp_policy_dscp
      register: nm_remove_ntp_policy_dscp_again

    - name: Assert NTP Policy was updated
      assert:
        that:
          - cm_update_ntp_policy is changed
          - cm_update_ntp_policy.previous.name == "ansible_test_ntp_policy"
          - cm_update_ntp_policy.previous.description == "Ansible NTP policy"
          - cm_update_ntp_policy.previous.uuid is defined
          - cm_update_ntp_policy.current.name == "ansible_test_ntp_policy"
          - cm_update_ntp_policy.current.description == "New Ansible NTP policy"       
          - cm_update_ntp_policy.current.uuid is defined
          - nm_update_ntp_policy is changed
          - nm_update_ntp_policy.previous.name == "ansible_test_ntp_policy"
          - nm_update_ntp_policy.previous.description == "Ansible NTP policy"
          - nm_update_ntp_policy.previous.uuid is defined
          - nm_update_ntp_policy.current.name == "ansible_test_ntp_policy"
          - nm_update_ntp_policy.current.description == "New Ansible NTP policy"       
          - nm_update_ntp_policy.current.uuid is defined
          - nm_update_ntp_policy_again is not changed
          - nm_update_ntp_policy_again.previous.name == "ansible_test_ntp_policy"
          - nm_update_ntp_policy_again.previous.description == "New Ansible NTP policy"        
          - nm_update_ntp_policy_again.previous.uuid is defined
          - nm_update_ntp_policy_again.current.name == "ansible_test_ntp_policy"
          - nm_update_ntp_policy_again.current.description == "New Ansible NTP policy"        
          - nm_update_ntp_policy_again.current.uuid is defined
          - cm_update_ntp_policy is changed
          - nm_remove_ntp_policy_dscp.previous.name == "ansible_test_ntp_policy"
          - nm_remove_ntp_policy_dscp.previous.description == "New Ansible NTP policy"
          - nm_remove_ntp_policy_dscp.previous.uuid is defined
          - nm_remove_ntp_policy_dscp.current.name == "ansible_test_ntp_policy"
          - nm_remove_ntp_policy_dscp.current.description == "New Ansible NTP policy"
          - nm_remove_ntp_policy_dscp.current.uuid is defined
          - nm_remove_ntp_policy_dscp_again is not changed
          - nm_remove_ntp_policy_dscp_again.previous.name == "ansible_test_ntp_policy"
          - nm_remove_ntp_policy_dscp_again.previous.description == "New Ansible NTP policy"
          - nm_remove_ntp_policy_dscp_again.previous.uuid is defined
          - nm_remove_ntp_policy_dscp_again.current.name == "ansible_test_ntp_policy"
          - nm_remove_ntp_policy_dscp_again.current.description == "New Ansible NTP policy"
          - nm_remove_ntp_policy_dscp_again.current.uuid is defined

    - name: Update a NTP Policy name
      cisco.mso.ndo_ntp_policy: &update_ntp_policy_name
        <<: *remove_ntp_policy_dscp
        uuid: '{{ nm_update_ntp_policy.current.uuid }}'
        name: ansible_test_ntp_policy_changed
      register: nm_update_ntp_policy_name

    - name: Assert NTP Policy was updated
      assert:
        that:
          - nm_update_ntp_policy_name is changed
          - nm_update_ntp_policy_name.previous.name == "ansible_test_ntp_policy"
          - nm_update_ntp_policy_name.current.name == "ansible_test_ntp_policy_changed"

    # QUERY

    - name: Query a NTP Policy with template_name
      cisco.mso.ndo_ntp_policy:
        <<: *create_ntp_policy_2
        state: query
      register: query_one

    - name: Query a NTP Policy with template_name and UUID
      cisco.mso.ndo_ntp_policy: &query_ntp_policy_uuid
        <<: *create_ntp_policy_2
        uuid: '{{ query_one.current.uuid }}'
        name: '{{ fakevar | default(omit)}}'
        state: query
      register: query_one_uuid

    - name: Query all NTP Policy in the template
      cisco.mso.ndo_ntp_policy:
        <<: *mso_info
        template: ansible_fabric_policy_template
        state: query
      register: query_all

    - name: Assert NTP Policy was queried
      assert:
        that:
          - query_one is not changed
          - query_one.current.name == "ansible_test_ntp_policy_2"
          - query_one_uuid is not changed
          - query_one_uuid.current.name == "ansible_test_ntp_policy_2"
          - query_all is not changed
          - query_all.current.0.name == "ansible_test_ntp_policy_changed"
          - query_all.current.1.name == "ansible_test_ntp_policy_2"
          - query_all.current | length == 2

    # DELETE

    - name: Delete a NTP Policy (check_mode)
      cisco.mso.ndo_ntp_policy: &delete_ntp_policy
        <<: *update_ntp_policy_name
        state: absent
      check_mode: true
      register: cm_delete_ntp_policy

    - name: Delete a NTP Policy
      cisco.mso.ndo_ntp_policy:
        <<: *delete_ntp_policy
      register: nm_delete_ntp_policy

    - name: Delete a NTP Policy again
      cisco.mso.ndo_ntp_policy:
        <<: *delete_ntp_policy
      register: nm_delete_ntp_policy_again

    - name: Assert NTP Policy was deleted
      assert:
        that:
          - cm_delete_ntp_policy is changed
          - cm_delete_ntp_policy.previous.name == "ansible_test_ntp_policy_changed"
          - cm_delete_ntp_policy.previous.description == "New Ansible NTP policy"       
          - cm_delete_ntp_policy.previous.uuid is defined
          - nm_delete_ntp_policy.current == {}
          - nm_delete_ntp_policy is changed
          - nm_delete_ntp_policy.previous.name == "ansible_test_ntp_policy_changed"
          - nm_delete_ntp_policy.previous.description == "New Ansible NTP policy"      
          - nm_delete_ntp_policy.previous.uuid is defined
          - nm_delete_ntp_policy.current == {}
          - nm_delete_ntp_policy_again is not changed
          - nm_delete_ntp_policy_again.previous == {}
          - nm_delete_ntp_policy_again.current == {}

    - name: Delete a NTP Policy with UUID
      cisco.mso.ndo_ntp_policy:
        <<: *query_ntp_policy_uuid
        state: absent
      register: nm_delete_ntp_policy_uuid

    - name: Assert NTP Policy was deleted with UUID
      assert:
        that:
          - nm_delete_ntp_policy_uuid is changed
          - nm_delete_ntp_policy_uuid.previous.name == "ansible_test_ntp_policy_2"
          - nm_delete_ntp_policy_uuid.current == {}

    # ERRORS AND NO POLICIES FOUND

    - name: Query all NTP Policy in the template when all are deleted
      cisco.mso.ndo_ntp_policy:
        <<: *mso_info
        template: ansible_fabric_policy_template
        state: query
      register: query_all_none
    
    - name: Update with non-existing UUID
      cisco.mso.ndo_ntp_policy:
        <<: *mso_info
        template: ansible_fabric_policy_template
        uuid: non-existing-uuid
        state: present
      ignore_errors: true
      register: update_non_existing_uuid

    - name: Assert no NTP Policy found
      assert:
        that:
          - query_all_none is not changed
          - query_all_none.current == {}
          - update_non_existing_uuid is failed
          - update_non_existing_uuid.msg == "NTP Policy with the UUID{{":"}} 'non-existing-uuid' not found"
  
    # CLEANUP TEMPLATE

    - name: Ensure templates do not exist
      cisco.mso.ndo_template:
        <<: *template_absent
