# Test code for the MSO modules
# Copyright: (c) 2020, Lionel Hercot (@lhercot) <lhercot@cisco.com>
# Copyright: (c) 2020, Shreyas Srish (@shrsr) <ssrish@cisco.com> (based on mso_schema_anp_epg_domain)
# Copyright: (c) 2018, Dag Wieers (@dagwieers) <dag@wieers.com> (based on mso_site test case)


# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI MultiSite host, username and password
  fail:
    msg: 'Please define the following variables: mso_hostname, mso_username and mso_password.'
  when: mso_hostname is not defined or mso_username is not defined or mso_password is not defined

# CLEAN ENVIRONMENT
- name: Set vars
  set_fact: 
    mso_info: &mso_info
      host: '{{ mso_hostname }}'
      username: '{{ mso_username }}'
      password: '{{ mso_password }}'
      validate_certs: '{{ mso_validate_certs | default(false) }}'
      use_ssl: '{{ mso_use_ssl | default(true) }}'
      use_proxy: '{{ mso_use_proxy | default(true) }}'
      output_level: '{{ mso_output_level | default("info") }}'
    sites: "['aws_{{ mso_site | default(\"ansible_test\") }}', 
              'azure_{{ mso_site | default(\"ansible_test\") }}',
              '{{ mso_site | default(\"ansible_test\") }}']"

- name: Query MSO version
  mso_version:
    <<: *mso_info
    state: query
  register: version

- name: Ensure site exists
  mso_site:
    <<: *mso_info
    site: '{{ mso_site | default("ansible_test") }}'
    apic_username: '{{ apic_username }}'
    apic_password: '{{ apic_password }}'
    apic_site_id: '{{ apic_site_id | default(101) }}'
    urls:
    - https://{{ apic_hostname }}
    state: present

- name: Ensure site exists
  mso_site:
    <<: *mso_info
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    apic_username: '{{ aws_apic_username }}'
    apic_password: '{{ aws_apic_password }}'
    apic_site_id: '{{ aws_site_id | default(102) }}'
    urls:
    - https://{{ aws_apic_hostname }}
    state: present

- name: Ensure site exists
  mso_site:
    <<: *mso_info
    site: 'azure_{{ mso_site | default("ansible_test") }}'
    apic_username: '{{ azure_apic_username }}'
    apic_password: '{{ azure_apic_password }}'
    apic_site_id: '{{ azure_site_id | default(103) }}'
    urls:
    - https://{{ azure_apic_hostname }}
    state: present

- name: Remove Schemas
  mso_schema:
    <<: *mso_info
    schema: '{{ item }}'
    state: absent
  loop:
  - '{{ mso_schema | default("ansible_test") }}_2'
  - '{{ mso_schema | default("ansible_test") }}'

- name: Ensure sites removed from tenant ansible_test
  mso_tenant_site:
    <<: *mso_info
    tenant: ansible_test
    site: '{{ item }}'
    state: absent
  loop:
    - '{{ mso_site | default("ansible_test") }}'
    - 'aws_{{ mso_site | default("ansible_test") }}'
    - 'azure_{{ mso_site | default("ansible_test") }}'

- name: Ensure tenant ansible_test exist
  mso_tenant: 
    <<: *mso_info
    tenant: ansible_test
    sites:
    - '{{ mso_site | default("ansible_test") }}'
    users:
    - '{{ mso_username }}'
    state: present

- name: Ensure AWS site is present under tenant ansible_test
  mso_tenant_site: 
    <<: *mso_info
    tenant: ansible_test
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    cloud_account: '000000000000'
    aws_access_key: 1
    secret_key: 0
    state: present

- name: Ensure Azure site is present under tenant ansible_test
  mso_tenant_site: 
    <<: *mso_info
    tenant: ansible_test
    site: 'azure_{{ mso_site | default("ansible_test") }}'
    cloud_account: uni/tn-ansible_test/act-[9]-vendor-azure
    state: present

- name: Ensure schema 1 with Template 1 and 2 exists
  mso_schema_template: 
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    tenant: ansible_test
    template: '{{ item }}'
    state: present
  loop:
    - Template 1
    - Template 2

- name: Ensure schema 2 with Template 3 exists
  mso_schema_template:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    tenant: ansible_test
    template: Template 3
    state: present

- name: Add physical site to Template 1
  mso_schema_site:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: '{{ mso_site | default("ansible_test") }}'
    template: Template 1
    state: present

- name: Ensure VRF1 exists
  mso_schema_template_vrf: 
    <<: *mso_info
    schema: '{{ item.schema }}'
    template: '{{ item.template }}'
    vrf: VRF1
    state: present
  loop:
  - { schema: '{{ mso_schema | default("ansible_test") }}', template: 'Template 1' }
  - { schema: '{{ mso_schema | default("ansible_test") }}', template: 'Template 2' }
  - { schema: '{{ mso_schema | default("ansible_test") }}_2', template: 'Template 3' }

- name: Ensure VRF2 exists
  mso_schema_template_vrf: 
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    vrf: VRF2
    state: present
  when: version.current.version is version('3', '<')

- name: Ensure VRF1 exists at Site level for the physical site
  mso_schema_site_vrf:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    site: '{{ mso_site | default("ansible_test") }}'
    vrf: VRF1
    state: present

# ADD SUBNET
- name: Add a new CIDR in VRF1 at AWS site level (check mode)
  mso_schema_site_vrf_region_cidr: &mso_present
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    vrf: VRF1
    region: us-west-1
    cidr: 10.0.0.0/16
    primary: true
    state: present
  check_mode: true
  register: cm_add_cidr

- name: Verify cm_add_cidr
  assert:
    that:
    - cm_add_cidr is changed
    - cm_add_cidr.previous == {}
    - cm_add_cidr.current.ip == '10.0.0.0/16'
    - cm_add_cidr.current.primary == true

- name: Add a new CIDR in VRF1 at AWS site level (normal mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_present
  register: nm_add_cidr

- name: Verify nm_add_cidr
  assert:
    that:
    - nm_add_cidr is changed
    - nm_add_cidr.previous == {}
    - nm_add_cidr.current.ip == '10.0.0.0/16'
    - nm_add_cidr.current.primary == true

- name: Add same CIDR in VRF1 at AWS site level (check mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_present
  register: cm_add_cidr_again

- name: Verify cm_add_cidr_again
  assert:
    that:
    - cm_add_cidr_again is not changed
    - cm_add_cidr_again.current.ip == cm_add_cidr_again.previous.ip == '10.0.0.0/16'
    - cm_add_cidr_again.current.primary == cm_add_cidr_again.previous.primary == true

- name: Add same CIDR in VRF1 at AWS site level (normal mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_present
  register: nm_add_cidr_again

- name: Verify nm_add_cidr_again
  assert:
    that:
    - nm_add_cidr_again is not changed
    - nm_add_cidr_again.current.ip == nm_add_cidr_again.previous.ip == '10.0.0.0/16'
    - nm_add_cidr_again.current.primary == nm_add_cidr_again.previous.primary == true

- name: Add a CIDR in VRF1 at Azure site level (check mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_present
    site: 'azure_{{ mso_site | default("ansible_test") }}'
    region: westus
    cidr: 10.1.0.0/16
    primary: true
  check_mode: true
  register: cm_add_cidr_2

- name: Verify cm_add_cidr_2
  assert:
    that:
    - cm_add_cidr_2 is changed
    - cm_add_cidr_2.previous == {}
    - cm_add_cidr_2.current.ip == '10.1.0.0/16'
    - cm_add_cidr_2.current.primary == true

- name: Add a CIDR in VRF1 at Azure site level (normal mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_present
    site: 'azure_{{ mso_site | default("ansible_test") }}'
    region: westus
    cidr: 10.1.0.0/16
    primary: true
  register: nm_add_cidr_2

- name: Verify nm_add_cidr_2
  assert:
    that:
    - nm_add_cidr_2 is changed
    - nm_add_cidr_2.previous == {}
    - nm_add_cidr_2.current.ip == '10.1.0.0/16'
    - nm_add_cidr_2.current.primary == true

- name: Add a second CIDR in VRF1 at AWS site level (check mode)
  mso_schema_site_vrf_region_cidr: &mso_present_2
    <<: *mso_present
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    region: us-west-1
    cidr: 10.2.0.0/16
    primary: false
  check_mode: true
  register: cm_add_cidr_3

- name: Verify cm_add_cidr_3
  assert:
    that:
    - cm_add_cidr_3 is changed
    - cm_add_cidr_3.previous == {}
    - cm_add_cidr_3.current.ip == '10.2.0.0/16'
    - cm_add_cidr_3.current.primary == false

- name: Add a second CIDR in VRF1 at AWS site level (normal mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_present_2
  register: nm_add_cidr_3

- name: Verify nm_add_cidr_3
  assert:
    that:
    - nm_add_cidr_3 is changed
    - nm_add_cidr_3.previous == {}
    - nm_add_cidr_3.current.ip == '10.2.0.0/16'
    - nm_add_cidr_3.current.primary == false

- name: Add a second CIDR in VRF1 at Azure site level (check mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_present
    site: 'azure_{{ mso_site | default("ansible_test") }}'
    region: westus
    cidr: 10.3.0.0/16
    primary: false
  check_mode: true
  register: cm_add_cidr_4

- name: Verify cm_add_cidr_4
  assert:
    that:
    - cm_add_cidr_4 is changed
    - cm_add_cidr_4.previous == {}
    - cm_add_cidr_4.current.ip == '10.3.0.0/16'
    - cm_add_cidr_4.current.primary == false

- name: Add a second CIDR in VRF1 at Azure site level (normal mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_present
    site: 'azure_{{ mso_site | default("ansible_test") }}'
    region: westus
    cidr: 10.3.0.0/16
    primary: false
  register: nm_add_cidr_4

- name: Verify nm_add_cidr_4
  assert:
    that:
    - nm_add_cidr_4 is changed
    - nm_add_cidr_4.previous == {}
    - nm_add_cidr_4.current.ip == '10.3.0.0/16'
    - nm_add_cidr_4.current.primary == false

# QUERY CIDR
- name: Query CIDR in VRF1 at AWS site level (check mode)
  mso_schema_site_vrf_region_cidr: &mso_query
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    vrf: VRF1
    region: us-west-1
    cidr: 10.0.0.0/16
    state: query
  check_mode: true
  register: cm_query_cidr

- name: Verify cm_query_cidr
  assert:
    that:
    - cm_query_cidr is not changed
    - cm_query_cidr.current.ip == '10.0.0.0/16'
    - cm_query_cidr.current.primary == true

- name: Query CIDR in VRF1 at AWS site level (normal mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_query
  register: nm_query_cidr

- name: Query CIDR in VRF1 at Azure site level (check mode)
  mso_schema_site_vrf_region_cidr: &mso_query_2
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    site: 'azure_{{ mso_site | default("ansible_test") }}'
    vrf: VRF1
    region: westus
    cidr: 10.1.0.0/16
    state: query
  check_mode: true
  register: cm_query_cidr_2

- name: Verify cm_query_cidr_2
  assert:
    that:
    - cm_query_cidr_2 is not changed
    - cm_query_cidr_2.current.ip == '10.1.0.0/16'
    - cm_query_cidr_2.current.primary == true

- name: Query CIDR in VRF1 at Azure site level (normal mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_query_2
  register: nm_query_cidr_2

- name: Verify nm_query_cidr_2
  assert:
    that:
    - nm_query_cidr_2 is not changed
    - nm_query_cidr_2.current.ip == '10.1.0.0/16'
    - nm_query_cidr_2.current.primary == true

# QUERY ALL CIDR
- name: Query all CIDR in VRF1 at AWS site level (check mode)
  mso_schema_site_vrf_region_cidr: &mso_query_all
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    vrf: VRF1
    region: us-west-1
    state: query
  check_mode: true
  register: cm_query_cidr_all_aws

- name: Query CIDR in VRF1 at Azure site level (check mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_query_all
    site: 'azure_{{ mso_site | default("ansible_test") }}'
    region: westus
    state: query
  check_mode: true
  register: cm_query_cidr_all_azure

- name: Verify cm_query_cidr_all_aws and cm_query_cidr_all_azure
  assert:
    that:
    - cm_query_cidr_all_aws is not changed
    - cm_query_cidr_all_aws.current[0].ip == '10.0.0.0/16'
    - cm_query_cidr_all_aws.current[0].primary == true
    - cm_query_cidr_all_aws.current[1].ip == '10.2.0.0/16'
    - cm_query_cidr_all_aws.current[1].primary == false
    - cm_query_cidr_all_azure is not changed
    - cm_query_cidr_all_azure.current[0].ip == '10.1.0.0/16'
    - cm_query_cidr_all_azure.current[0].primary == true
    - cm_query_cidr_all_azure.current[1].ip == '10.3.0.0/16'
    - cm_query_cidr_all_azure.current[1].primary == false

- name: Query CIDR in VRF1 at AWS site level (normal mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_query_all
  register: nm_query_cidr_all_aws

- name: Query CIDR in VRF1 at Azure site level (normal mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_query_all
    site: 'azure_{{ mso_site | default("ansible_test") }}'
    region: westus
  register: nm_query_cidr_all_azure

- name: Verify nm_query_cidr_all_aws and nm_query_cidr_all_azure
  assert:
    that:
    - nm_query_cidr_all_aws is not changed
    - nm_query_cidr_all_aws.current[0].ip == '10.0.0.0/16'
    - nm_query_cidr_all_aws.current[0].primary == true
    - nm_query_cidr_all_aws.current[1].ip == '10.2.0.0/16'
    - nm_query_cidr_all_aws.current[1].primary == false
    - nm_query_cidr_all_azure is not changed
    - nm_query_cidr_all_azure.current[0].ip == '10.1.0.0/16'
    - nm_query_cidr_all_azure.current[0].primary == true
    - nm_query_cidr_all_azure.current[1].ip == '10.3.0.0/16'
    - nm_query_cidr_all_azure.current[1].primary == false

- name: Query CIDR in VRF2 (not present a Site level) for AWS Site (normal mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_query_all
    vrf: VRF2
  ignore_errors: true
  register: nm_query_cidr_all_aws_2

- name: Query CIDR in VRF1 (with VRF present a Site level) for Physical Site (normal mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_query_all
    site: '{{ mso_site | default("ansible_test") }}'
    vrf: VRF1
  ignore_errors: true
  register: nm_query_cidr_all_aws_3

- name: Verify nm_query_cidr_all_aws_2 and nm_query_cidr_all_aws_3
  assert:
    that:
    - nm_query_cidr_all_aws_2.msg == "Provided vrf 'VRF2' does not exist at site level."
    - nm_query_cidr_all_aws_3.msg == "Provided region 'us-west-1' does not exist. Existing regions{{':'}} "
  when: version.current.version is version('3', '<')

# REMOVE CIDR
- name: Remove CIDR (check_mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_present_2
    state: absent
  check_mode: true
  register: cm_remove_cidr

- name: Verify cm_remove_cidr
  assert:
    that:
    - cm_remove_cidr is changed
    - cm_remove_cidr.current == {}

- name: Remove CIDR (normal mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_present_2
    state: absent
  register: nm_remove_cidr

- name: Verify nm_remove_cidr
  assert:
    that:
    - nm_remove_cidr is changed
    - nm_remove_cidr.current == {}

- name: Remove CIDR again (check_mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_present_2
    state: absent
  check_mode: true
  register: cm_remove_cidr_again

- name: Verify cm_remove_cidr_again
  assert:
    that:
    - cm_remove_cidr_again is not changed
    - cm_remove_cidr_again.current == {}

- name: Remove CIDR again (normal mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_present_2
    state: absent
  register: nm_remove_cidr_again

- name: Verify nm_remove_cidr_again
  assert:
    that:
    - nm_remove_cidr_again is not changed
    - nm_remove_cidr_again.current == {}

# QUERY NON-EXISTING CIDR
- name: Query non-existing CIDR (check_mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_query
    cidr: non_existing_cidr
  check_mode: true
  ignore_errors: true
  register: cm_query_non_cidr

- name: Query non-existing CIDR (normal mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_query
    cidr: non_existing_cidr
  ignore_errors: true
  register: nm_query_non_cidr

- name: Verify query_non_cidr
  assert:
    that:
    - cm_query_non_cidr is not changed
    - nm_query_non_cidr is not changed
    - cm_query_non_cidr == nm_query_non_cidr
    - cm_query_non_cidr.msg == nm_query_non_cidr.msg == "CIDR IP 'non_existing_cidr' not found"

# QUERY NON-EXISTING region
- name: Query non-existing region (check_mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_query
    region: non_existing_region
  check_mode: true
  ignore_errors: true
  register: cm_query_non_region

- name: Query non-existing region (normal mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_query
    region: non_existing_region
  ignore_errors: true
  register: nm_query_non_region

- name: Verify query_non_region
  assert:
    that:
    - cm_query_non_region is not changed
    - nm_query_non_region is not changed
    - cm_query_non_region == nm_query_non_region
    - cm_query_non_region.msg == nm_query_non_region.msg == "Provided region 'non_existing_region' does not exist. Existing regions{{':'}} us-west-1"

# QUERY NON-EXISTING VRF
- name: Query non-existing VRF (check_mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_query
    vrf: non_existing_vrf
  check_mode: true
  ignore_errors: true
  register: cm_query_non_vrf

- name: Query non-existing VRF (normal mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_query
    vrf: non_existing_vrf
  ignore_errors: true
  register: nm_query_non_vrf

- name: Verify query_non_vrf
  assert:
    that:
    - cm_query_non_vrf is not changed
    - nm_query_non_vrf is not changed
    - cm_query_non_vrf == nm_query_non_vrf

- name: Verify query_non_vrf (version < 3.0)
  assert:
    that:
    - cm_query_non_vrf.msg == nm_query_non_vrf.msg == "Provided vrf 'non_existing_vrf' does not exist. Existing vrfs{{':'}} VRF1, VRF2"
  when: version.current.version is version('3', '<')

# USE A NON-EXISTING STATE
- name: Non-existing state for site cidr (check_mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_query
    state: non-existing-state
  check_mode: true
  ignore_errors: true
  register: cm_non_existing_state

- name: Non-existing state for site cidr (normal_mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_query
    state: non-existing-state
  ignore_errors: true
  register: nm_non_existing_state

- name: Verify non_existing_state
  assert:
    that:
    - cm_non_existing_state is not changed
    - nm_non_existing_state is not changed
    - cm_non_existing_state == nm_non_existing_state
    - cm_non_existing_state.msg == nm_non_existing_state.msg == "value of state must be one of{{':'}} absent, present, query, got{{':'}} non-existing-state"

# USE A NON-EXISTING SCHEMA
- name: Non-existing schema for site cidr (check_mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_query
    schema: non-existing-schema
  check_mode: true
  ignore_errors: true
  register: cm_non_existing_schema

- name: Non-existing schema for site cidr (normal_mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_query
    schema: non-existing-schema
  ignore_errors: true
  register: nm_non_existing_schema

- name: Verify non_existing_schema
  assert:
    that:
    - cm_non_existing_schema is not changed
    - nm_non_existing_schema is not changed
    - cm_non_existing_schema == nm_non_existing_schema
    - cm_non_existing_schema.msg == nm_non_existing_schema.msg == "Provided schema 'non-existing-schema' does not exist."

# USE A NON-EXISTING TEMPLATE
- name: Non-existing template for site cidr (check_mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_query
    template: non-existing-template
  check_mode: true
  ignore_errors: true
  register: cm_non_existing_template

- name: Non-existing template for site cidr (normal_mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_query
    template: non-existing-template
  ignore_errors: true
  register: nm_non_existing_template

- name: Verify non_existing_template
  assert:
    that:
    - cm_non_existing_template is not changed
    - nm_non_existing_template is not changed
    - cm_non_existing_template == nm_non_existing_template
    - cm_non_existing_template.msg == nm_non_existing_template.msg == "Provided template 'non-existing-template' does not exist. Existing templates{{':'}} Template1, Template2"

# USE A NON-ASSOCIATED TEMPLATE
- name: Non-associated template for site cidr (check_mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_query
    template: Template 2
  check_mode: true
  ignore_errors: true
  register: cm_non_associated_template

- name: Non-associated template for site cidr (normal_mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_query
    template: Template 2
  ignore_errors: true
  register: nm_non_associated_template

- name: Verify non_associated_template
  assert:
    that:
    - cm_non_associated_template is not changed
    - nm_non_associated_template is not changed
    - cm_non_associated_template == nm_non_associated_template
    - cm_non_associated_template.msg == "Provided site-template association 'aws_{{ mso_site | default("ansible_test") }}-Template2' does not exist."
    - nm_non_associated_template.msg == "Provided site-template association 'aws_{{ mso_site | default("ansible_test") }}-Template2' does not exist."

# USE A TEMPLATE WITHOUT ANY SITE
- name: Add site VRF region cidr to Schema 2 Template 3 without any site associated (check mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_present
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template 3
  check_mode: true
  register: cm_no_site_associated

- name: Add site VRF region cidr to Template 3 without any site associated (normal mode)
  mso_schema_site_vrf_region_cidr:
    <<: *mso_present
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template 3
  register: nm_no_site_associated

- name: Verify cm_no_site_associated and nm_no_site_associated
  assert:
    that:
    - cm_no_site_associated is changed
    - nm_no_site_associated is changed