# Test code for the MSO modules
# Copyright: (c) 2021, Anvitha Jain (@anvitha-jain) <anvjain@cisco.com>

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI MultiSite host, username and password
  fail:
    msg: 'Please define the following variables: mso_hostname, mso_username and mso_password.'
  when: mso_hostname is not defined or mso_username is not defined or mso_password is not defined

# CLEAN ENVIRONMENT
- name: Set vars
  set_fact:
    mso_info: &mso_info
      host: '{{ mso_hostname }}'
      username: '{{ mso_username }}'
      password: '{{ mso_password }}'
      validate_certs: '{{ mso_validate_certs | default(false) }}'
      use_ssl: '{{ mso_use_ssl | default(true) }}'
      use_proxy: '{{ mso_use_proxy | default(true) }}'
      output_level: '{{ mso_output_level | default("info") }}'

- name: Remove schemas
  cisco.mso.mso_schema:
    <<: *mso_info
    schema: '{{ item }}'
    state: absent
  ignore_errors: true
  loop:
  - Destination_Schema
  - Source_Schema

- name: Ensure site exists
  mso_site:
    <<: *mso_info
    site: '{{ mso_site | default("ansible_test") }}'
    apic_username: '{{ apic_username }}'
    apic_password: '{{ apic_password }}'
    apic_site_id: '{{ apic_site_id | default(101) }}'
    urls:
    - https://{{ apic_hostname }}
    state: present

- name: Ensure tenant ansible_test exists
  mso_tenant: 
    <<: *mso_info
    tenant: ansible_test
    users:
      - '{{ mso_username }}'
    sites:
    - '{{ mso_site | default("ansible_test") }}'
    state: present

- name: Create Source schema with Template 1, and Template 2, Template 3 exist
  cisco.mso.mso_schema_template:
    <<: *mso_info
    schema: Source_Schema
    tenant: ansible_test
    template: '{{item.template}}'
    state: present
  loop:
  - { template: Template 1}
  - { template: Template 2}
  - { template: Template 3}

- name: Ensure VRF exist
  mso_schema_template_vrf: &vrf_present
    <<: *mso_info
    schema: Source_Schema
    template: Template1
    vrf: VRF1
    state: present

- name: Add bd in Source schema
  mso_schema_template_bd: &bd_present
    <<: *mso_info
    schema: Source_Schema
    template: Template1
    bd: BD_1
    vrf:
      name: VRF1
    state: present

- name: Clone schema
  cisco.mso.mso_schema_clone:
    <<: *mso_info
    source_schema: Source_Schema
    destination_schema: Destination_Schema
    state: clone
  register: add_schema

- name: Verify add_schema
  assert:
    that:
    - add_schema is changed
    - add_schema.previous == {}
    - add_schema.current.displayName == 'Destination_Schema'

- name: Clone schema with same name
  cisco.mso.mso_schema_clone:
    <<: *mso_info
    source_schema: Source_Schema
    destination_schema: Source_Schema
    state: clone
  ignore_errors: true
  register: add_same_schema

- name: Verify add_same_schema
  assert:
    that:
    - add_same_schema is not changed
    - add_same_schema.current == {}
    - add_same_schema.msg == "Source and Destination schema cannot have same names."

- name: Clone schema when destination schema exists
  cisco.mso.mso_schema_clone:
    <<: *mso_info
    source_schema: Source_Schema
    destination_schema: Destination_Schema
    state: clone
  ignore_errors: true
  register: add_existing_schema

- name: Verify add_existing_schema
  assert:
    that:
    - add_existing_schema is not changed
    - add_existing_schema.msg == "Schema with the name 'Destination_Schema' already exists. Please use another name."

- name: Clone schema when source schema does not exist
  cisco.mso.mso_schema_clone:
    <<: *mso_info
    source_schema: Source_Schema_1
    destination_schema: Destination_Schema_2
    state: clone
  ignore_errors: true
  register: add_existing_schema

- name: Verify add_existing_schema
  assert:
    that:
    - add_existing_schema is not changed
    - add_existing_schema.msg == "Provided schema 'Source_Schema_1' does not exist."

- name: Remove schemas
  cisco.mso.mso_schema:
    <<: *mso_info
    schema: '{{ item }}'
    state: absent
  register: rm_schema
  loop:
  - Destination_Schema
  - Source_Schema

- name: Verify rm_schema
  assert:
    that:
    - rm_schema is changed