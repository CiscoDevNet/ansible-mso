# Test code for the MSO modules
# Copyright: (c) 2025, Sabari Jaganathan (@sajagana) <sajagana@cisco.com>

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI MultiSite host, username and password
  ansible.builtin.fail:
    msg: "Please define the following variables: mso_hostname, mso_username and mso_password."
  when: mso_hostname is not defined or mso_username is not defined or mso_password is not defined

# CLEAN ENVIRONMENT
- name: Set vars
  ansible.builtin.set_fact:
    mso_info: &mso_info
      host: "{{ mso_hostname }}"
      username: "{{ mso_username }}"
      password: "{{ mso_password }}"
      validate_certs: "{{ mso_validate_certs | default(false) }}"
      use_ssl: "{{ mso_use_ssl | default(true) }}"
      use_proxy: "{{ mso_use_proxy | default(true) }}"
      output_level: '{{ mso_output_level | default("info") }}'

# QUERY VERSION
- name: Query MSO version
  cisco.mso.mso_version:
    <<: *mso_info
    state: query
  register: version

- name: Execute tasks only for NDO version >= 4.3
  when: version.current.version is version('4.3', '>=')
  block:
    # Setup Part
    - name: Ensure ansible_test site exist
      cisco.mso.mso_site:
        <<: *mso_info
        site: '{{ mso_site | default("ansible_test") }}'
        state: query
      register: ansible_test_site

    - name: Ensure ansible_test tenant exist
      cisco.mso.mso_tenant:
        <<: *mso_info
        tenant: '{{ mso_tenant | default("ansible_test") }}'
        users:
          - "{{ mso_username }}"
        sites:
          - '{{ mso_site | default("ansible_test") }}'
        state: present

    - name: Ensure l3out template not exist
      cisco.mso.ndo_template: &ndo_l3out_template_absent
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        template_type: l3out
        tenant: '{{ mso_tenant | default("ansible_test") }}'
        sites:
          - name: '{{ mso_site | default("ansible_test") }}'
        state: absent

    - name: Ensure ansible_test_policy tenant policy template not exists
      cisco.mso.ndo_template: &tenant_pol_template_absent
        <<: *mso_info
        name: ansible_test_policy
        template_type: tenant
        tenant: '{{ mso_tenant | default("ansible_test") }}'
        state: absent

    - name: Ensure ansible_test schema template not exist
      cisco.mso.mso_schema_template: &mso_schema_template_absent
        <<: *mso_info
        schema: '{{ mso_schema | default("ansible_test") }}'
        tenant: '{{ mso_tenant | default("ansible_test") }}'
        template: "Template1"
        state: absent

    # Schema Template Setup for the VRF
    - name: Add an ansible_test schema template
      cisco.mso.mso_schema_template:
        <<: *mso_schema_template_absent
        state: present

    - name: Add a new VRF1
      cisco.mso.mso_schema_template_vrf:
        <<: *mso_info
        schema: '{{ mso_schema | default("ansible_test") }}'
        template: "Template1"
        vrf: VRF1
        layer3_multicast: true
        state: present

    # Tenant Policy Template Setup for the L3Out Node Routing Policy
    - name: Ensure ansible_test_policy tenant policy template exists
      cisco.mso.ndo_template:
        <<: *tenant_pol_template_absent
        state: present
      register: ansible_test_policy

    - name: Create BGP Peer Prefix Policy
      cisco.mso.ndo_tenant_bgp_peer_prefix_policy:
        <<: *mso_info
        template: ansible_test_policy
        name: "{{ item }}"
        state: present
      register: bgp_peer_prefix_policy
      loop:
        - ansible_test_bgp_peer_prefix_policy
        - ansible_test_bgp_peer_prefix_policy_1

    # L3Out Template Setup
    - name: Create a new l3out template
      cisco.mso.ndo_template:
        <<: *ndo_l3out_template_absent
        state: present
      register: create_new_l3out_policy_template

    - name: Create l3out_1 object with bgp routing protocol
      cisco.mso.ndo_l3out_template:
        <<: *mso_info
        l3out_template: '{{ mso_l3out_template | default("ansible_test") }}'
        name: "l3out_1"
        vrf:
          name: "VRF1"
          schema: '{{ mso_schema | default("ansible_test") }}'
          template: "Template1"
        bgp:
          state: enabled
        state: "present"

    - name: Create L3Out node group policy
      cisco.mso.ndo_l3out_node_group_policy:
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        name: "node_group_policy_1"
        state: present

    - name: Add a new Route Map Policy for Route Control
      cisco.mso.mso_rest:
        <<: *mso_info
        path: "/mso/api/v1/templates/{{ ansible_test_policy.current.templateId }}"
        method: patch
        content:
          - op: add
            path: "/tenantPolicyTemplate/template/routeMapPolicies/-"
            value:
              name: "{{ item }}"
              description: ""
              rtMapEntryList:
                - rtMapContext:
                    order: 0
                    name: ctxName
                    action: permit
      loop:
        - ans_route_map
        - ans_route_map_2

    - name: Query all L3Out BGP Peer when the node group is empty
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        node_group: "node_group_policy_1"
        state: query
      register: all_l3out_bgp_peers

    - name: Assertion check for query all L3Out BGP Peer when the node group is empty
      ansible.builtin.assert:
        that:
          - all_l3out_bgp_peers is not changed
          - all_l3out_bgp_peers.current == {}

    - name: Remove all L3Out BGP Peers
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        node_group: "node_group_policy_1"
        ipv4_addr: "{{ item.peerAddressV4 | default('')}}"
        ipv6_addr: "{{ item.peerAddressV6 | default('') }}"
        state: absent
      loop: "{{ all_l3out_bgp_peers.current | list }}"

    - name: Create L3Out BGP Peer minimum config with check mode
      cisco.mso.ndo_l3out_bgp_peer: &cm_bgp_peer_ipv4_present
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        node_group: "node_group_policy_1"
        ipv4_addr: "1.1.1.1"
        auth_password: 123
        state: present
        output_level: debug
      check_mode: true
      register: cm_bgp_peer_ipv4_present

    - name: Assertion check for create L3Out BGP Peer minimum config with check mode
      ansible.builtin.assert:
        that:
          - cm_bgp_peer_ipv4_present is changed
          - cm_bgp_peer_ipv4_present.current.peerAddressV4 == "1.1.1.1"
          - cm_bgp_peer_ipv4_present.previous == {}
          - cm_bgp_peer_ipv4_present.proposed.peerAddressV4 == "1.1.1.1"

    - name: Create L3Out BGP Peer minimum config with normal mode
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *cm_bgp_peer_ipv4_present
      register: nm_bgp_peer_ipv4_present

    - name: Assertion check for create L3Out BGP Peer minimum config with normal mode
      ansible.builtin.assert:
        that:
          - nm_bgp_peer_ipv4_present is changed
          - nm_bgp_peer_ipv4_present.current.adminState == "enabled"
          - nm_bgp_peer_ipv4_present.current.allowedSelfASCount == 3
          - nm_bgp_peer_ipv4_present.current.authEnabled == true
          - nm_bgp_peer_ipv4_present.current.ebpgMultiHopTTL == 1
          - nm_bgp_peer_ipv4_present.current.peerAddressV4 == "1.1.1.1"
          - nm_bgp_peer_ipv4_present.previous == {}
          - nm_bgp_peer_ipv4_present.proposed.peerAddressV4 == "1.1.1.1"

    - name: Create L3Out BGP Peer minimum config with normal mode - again
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *cm_bgp_peer_ipv4_present
      register: nm_bgp_peer_ipv4_present_again

    - name: Assertion check for create L3Out BGP Peer minimum config with normal mode - again
      ansible.builtin.assert:
        that:
          - nm_bgp_peer_ipv4_present_again is not changed
          - nm_bgp_peer_ipv4_present_again.current.adminState == "enabled"
          - nm_bgp_peer_ipv4_present_again.current.allowedSelfASCount == 3
          - nm_bgp_peer_ipv4_present_again.current.authEnabled == true
          - nm_bgp_peer_ipv4_present_again.current.ebpgMultiHopTTL == 1
          - nm_bgp_peer_ipv4_present_again.current.peerAddressV4 == "1.1.1.1"
          - nm_bgp_peer_ipv4_present_again.previous.adminState == "enabled"
          - nm_bgp_peer_ipv4_present_again.previous.allowedSelfASCount == 3
          - nm_bgp_peer_ipv4_present_again.previous.authEnabled == true
          - nm_bgp_peer_ipv4_present_again.previous.ebpgMultiHopTTL == 1
          - nm_bgp_peer_ipv4_present_again.previous.peerAddressV4 == "1.1.1.1"
          - nm_bgp_peer_ipv4_present_again.proposed.adminState == "enabled"
          - nm_bgp_peer_ipv4_present_again.proposed.allowedSelfASCount == 3
          - nm_bgp_peer_ipv4_present_again.proposed.authEnabled == true
          - nm_bgp_peer_ipv4_present_again.proposed.ebpgMultiHopTTL == 1
          - nm_bgp_peer_ipv4_present_again.proposed.peerAddressV4 == "1.1.1.1"

    - name: Create L3Out BGP Peer full config using only ipv6
      cisco.mso.ndo_l3out_bgp_peer: &add_ipv6_bgp_peer
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        node_group: "node_group_policy_1"
        ipv6_addr: "1::8/16"
        remote_asn: 2
        admin_state: enabled
        import_route_map: ans_route_map
        export_route_map: ans_route_map_2
        peer_prefix: ansible_test_bgp_peer_prefix_policy
        ebgp_multi_hop_ttl: 1
        auth_password: 123
        weight: 2
        site_of_origin: "extended:as2-nn2:1000:65534"
        allowed_self_as_count: 3
        local_asn_config: replace_as
        local_asn: 1
        bgp_controls:
          allow_self_as: true
          override_as: true
          disabled_peer_as_check: true
          next_hop_self: true
          send_community: true
          send_extended_community: true
          send_domain_path: true
        peer_controls:
          bfd: true
          disable_peer_connected_check: true
        address_families:
          multicast: true
          unicast: true
        private_as_controls:
          remove_all: true
          replace_with_local_as: true
        state: present
      register: add_ipv6_bgp_peer

    - name: Assertion check for create L3Out BGP Peer full config using only ipv6
      ansible.builtin.assert:
        that:
          - add_ipv6_bgp_peer is changed
          - add_ipv6_bgp_peer.current.addressTypeControls.afMast == true
          - add_ipv6_bgp_peer.current.addressTypeControls.afUcast == true
          - add_ipv6_bgp_peer.current.adminState == "enabled"
          - add_ipv6_bgp_peer.current.allowedSelfASCount == 3
          - add_ipv6_bgp_peer.current.authEnabled == true
          - add_ipv6_bgp_peer.current.bgpControls.allowSelfAS == true
          - add_ipv6_bgp_peer.current.bgpControls.asOverride == true
          - add_ipv6_bgp_peer.current.bgpControls.disablePeerASCheck == true
          - add_ipv6_bgp_peer.current.bgpControls.nextHopSelf == true
          - add_ipv6_bgp_peer.current.bgpControls.sendCommunity == true
          - add_ipv6_bgp_peer.current.bgpControls.sendDomainPath == true
          - add_ipv6_bgp_peer.current.bgpControls.sendExtendedCommunity == true
          - add_ipv6_bgp_peer.current.ebpgMultiHopTTL == 1
          - add_ipv6_bgp_peer.current.exportRouteMapRef != ""
          - add_ipv6_bgp_peer.current.exportRouteMapName == "ans_route_map_2"
          - add_ipv6_bgp_peer.current.importRouteMapRef != ""
          - add_ipv6_bgp_peer.current.importRouteMapName == "ans_route_map"
          - add_ipv6_bgp_peer.current.localAsn == 1
          - add_ipv6_bgp_peer.current.localAsnConfig == "replace-as"
          - add_ipv6_bgp_peer.current.peerAddressV6 == "1::8/16"
          - add_ipv6_bgp_peer.current.peerAsn == 2
          - add_ipv6_bgp_peer.current.peerControls.bfd == true
          - add_ipv6_bgp_peer.current.peerControls.disableConnectedCheck == true
          - add_ipv6_bgp_peer.current.peerPrefixRef != ""
          - add_ipv6_bgp_peer.current.peerPrefixName == "ansible_test_bgp_peer_prefix_policy"
          - add_ipv6_bgp_peer.current.privateASControls.removeAll == true
          - add_ipv6_bgp_peer.current.privateASControls.removeExclusive == true
          - add_ipv6_bgp_peer.current.privateASControls.replaceWithLocalAS == true
          - add_ipv6_bgp_peer.current.siteOfOrigin == "extended:as2-nn2:1000:65534"
          - add_ipv6_bgp_peer.current.weight == 2
          - add_ipv6_bgp_peer.previous == {}

    - name: Change additional attribute values of an existing L3Out BGP Peer object
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *add_ipv6_bgp_peer
        remote_asn: 0
        import_route_map: ans_route_map_2
        export_route_map: ans_route_map
        peer_prefix: ansible_test_bgp_peer_prefix_policy_1
        ebgp_multi_hop_ttl: 3
        auth_password: ""
        weight: 0
        site_of_origin: ""
        local_asn_config: none
        local_asn: 0
        bgp_controls:
          allow_self_as: false
          override_as: true
          disabled_peer_as_check: true
          next_hop_self: false
          send_community: false
          send_extended_community: true
          send_domain_path: false
        peer_controls:
          bfd: false
          disable_peer_connected_check: true
        address_families:
          multicast: true
          unicast: false
        private_as_controls:
          remove_all: true
          replace_with_local_as: true
        state: present
      register: update_ipv6_bgp_peer

    - name: Assertion check for change additional attribute values of an existing L3Out BGP Peer object
      ansible.builtin.assert:
        that:
          - update_ipv6_bgp_peer is changed
          - update_ipv6_bgp_peer.current.addressTypeControls.afMast == true
          - update_ipv6_bgp_peer.current.addressTypeControls.afUcast == false
          - update_ipv6_bgp_peer.current.adminState == "enabled"
          - update_ipv6_bgp_peer.current.allowedSelfASCount == 3
          - update_ipv6_bgp_peer.current.authEnabled == false
          - update_ipv6_bgp_peer.current.bgpControls.allowSelfAS == false
          - update_ipv6_bgp_peer.current.bgpControls.asOverride == true
          - update_ipv6_bgp_peer.current.bgpControls.disablePeerASCheck == true
          - update_ipv6_bgp_peer.current.bgpControls.nextHopSelf == false
          - update_ipv6_bgp_peer.current.bgpControls.sendCommunity == false
          - update_ipv6_bgp_peer.current.bgpControls.sendDomainPath == false
          - update_ipv6_bgp_peer.current.bgpControls.sendExtendedCommunity == true
          - update_ipv6_bgp_peer.current.ebpgMultiHopTTL == 3
          - update_ipv6_bgp_peer.current.exportRouteMapRef != ""
          - update_ipv6_bgp_peer.current.exportRouteMapName == "ans_route_map"
          - update_ipv6_bgp_peer.current.importRouteMapRef != ""
          - update_ipv6_bgp_peer.current.importRouteMapName == "ans_route_map_2"
          - update_ipv6_bgp_peer.current.localAsnConfig == "none"
          - update_ipv6_bgp_peer.current.peerAddressV6 == "1::8/16"
          - update_ipv6_bgp_peer.current.peerControls.bfd == false
          - update_ipv6_bgp_peer.current.peerControls.disableConnectedCheck == true
          - update_ipv6_bgp_peer.current.peerPrefixRef != ""
          - update_ipv6_bgp_peer.current.peerPrefixName == "ansible_test_bgp_peer_prefix_policy_1"
          - update_ipv6_bgp_peer.current.privateASControls.removeAll == true
          - update_ipv6_bgp_peer.current.privateASControls.removeExclusive == true
          - update_ipv6_bgp_peer.current.privateASControls.replaceWithLocalAS == true
          - update_ipv6_bgp_peer.previous.addressTypeControls.afMast == true
          - update_ipv6_bgp_peer.previous.addressTypeControls.afUcast == true
          - update_ipv6_bgp_peer.previous.adminState == "enabled"
          - update_ipv6_bgp_peer.previous.allowedSelfASCount == 3
          - update_ipv6_bgp_peer.previous.authEnabled == true
          - update_ipv6_bgp_peer.previous.bgpControls.allowSelfAS == true
          - update_ipv6_bgp_peer.previous.bgpControls.asOverride == true
          - update_ipv6_bgp_peer.previous.bgpControls.disablePeerASCheck == true
          - update_ipv6_bgp_peer.previous.bgpControls.nextHopSelf == true
          - update_ipv6_bgp_peer.previous.bgpControls.sendCommunity == true
          - update_ipv6_bgp_peer.previous.bgpControls.sendDomainPath == true
          - update_ipv6_bgp_peer.previous.bgpControls.sendExtendedCommunity == true
          - update_ipv6_bgp_peer.previous.ebpgMultiHopTTL == 1
          - update_ipv6_bgp_peer.previous.exportRouteMapRef != ""
          - update_ipv6_bgp_peer.previous.exportRouteMapName == "ans_route_map_2"
          - update_ipv6_bgp_peer.previous.importRouteMapRef != ""
          - update_ipv6_bgp_peer.previous.importRouteMapName == "ans_route_map"
          - update_ipv6_bgp_peer.previous.localAsn == 1
          - update_ipv6_bgp_peer.previous.localAsnConfig == "replace-as"
          - update_ipv6_bgp_peer.previous.peerAddressV6 == "1::8/16"
          - update_ipv6_bgp_peer.previous.peerAsn == 2
          - update_ipv6_bgp_peer.previous.peerControls.bfd == true
          - update_ipv6_bgp_peer.previous.peerControls.disableConnectedCheck == true
          - update_ipv6_bgp_peer.previous.peerPrefixRef != ""
          - update_ipv6_bgp_peer.previous.peerPrefixName == "ansible_test_bgp_peer_prefix_policy"
          - update_ipv6_bgp_peer.previous.privateASControls.removeAll == true
          - update_ipv6_bgp_peer.previous.privateASControls.removeExclusive == true
          - update_ipv6_bgp_peer.previous.privateASControls.replaceWithLocalAS == true
          - update_ipv6_bgp_peer.previous.siteOfOrigin == "extended:as2-nn2:1000:65534"
          - update_ipv6_bgp_peer.previous.weight == 2

    - name: Clear control attribute values of an existing L3Out BGP Peer object
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        node_group: "node_group_policy_1"
        ipv6_addr: "1::8/16"
        import_route_map: ""
        export_route_map: ""
        peer_prefix: ""
        auth_password: ""
        bgp_controls:
          state: disabled
        peer_controls:
          state: disabled
        address_families:
          state: disabled
        private_as_controls:
          state: disabled
        state: present
      register: clear_ctrl_attr

    - name: Assertion check for clear control attribute values of an existing L3Out BGP Peer object
      ansible.builtin.assert:
        that:
          - clear_ctrl_attr is changed
          - clear_ctrl_attr.current.adminState == "enabled"
          - clear_ctrl_attr.current.allowedSelfASCount == 3
          - clear_ctrl_attr.current.authEnabled == false
          - clear_ctrl_attr.current.ebpgMultiHopTTL == 3
          - clear_ctrl_attr.current.localAsnConfig == "none"
          - clear_ctrl_attr.current.peerAddressV6 == "1::8/16"
          - clear_ctrl_attr.previous.addressTypeControls.afMast == true
          - clear_ctrl_attr.previous.addressTypeControls.afUcast == false
          - clear_ctrl_attr.previous.adminState == "enabled"
          - clear_ctrl_attr.previous.allowedSelfASCount == 3
          - clear_ctrl_attr.previous.authEnabled == false
          - clear_ctrl_attr.previous.bgpControls.allowSelfAS == false
          - clear_ctrl_attr.previous.bgpControls.asOverride == true
          - clear_ctrl_attr.previous.bgpControls.disablePeerASCheck == true
          - clear_ctrl_attr.previous.bgpControls.nextHopSelf == false
          - clear_ctrl_attr.previous.bgpControls.sendCommunity == false
          - clear_ctrl_attr.previous.bgpControls.sendDomainPath == false
          - clear_ctrl_attr.previous.bgpControls.sendExtendedCommunity == true
          - clear_ctrl_attr.previous.ebpgMultiHopTTL == 3
          - clear_ctrl_attr.previous.exportRouteMapRef != ""
          - clear_ctrl_attr.previous.exportRouteMapName == "ans_route_map"
          - clear_ctrl_attr.previous.importRouteMapRef != ""
          - clear_ctrl_attr.previous.importRouteMapName == "ans_route_map_2"
          - clear_ctrl_attr.previous.localAsnConfig == "none"
          - clear_ctrl_attr.previous.peerAddressV6 == "1::8/16"
          - clear_ctrl_attr.previous.peerControls.bfd == false
          - clear_ctrl_attr.previous.peerControls.disableConnectedCheck == true
          - clear_ctrl_attr.previous.peerPrefixRef != ""
          - clear_ctrl_attr.previous.peerPrefixName == "ansible_test_bgp_peer_prefix_policy_1"
          - clear_ctrl_attr.previous.privateASControls.removeAll == true
          - clear_ctrl_attr.previous.privateASControls.removeExclusive == true
          - clear_ctrl_attr.previous.privateASControls.replaceWithLocalAS == true

    - name: Add control attribute with default values of an existing L3Out BGP Peer object again
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        node_group: "node_group_policy_1"
        ipv6_addr: "1::8/16"
        import_route_map: ""
        export_route_map: ""
        peer_prefix: ""
        auth_password: ""
        bgp_controls:
          state: enabled
        peer_controls:
          state: enabled
        address_families:
          state: enabled
        private_as_controls:
          state: enabled
        state: present
      register: add_ctrl_attr_again

    - name: Assertion check for add control attribute with default values of an existing L3Out BGP Peer object again
      ansible.builtin.assert:
        that:
          - add_ctrl_attr_again is not changed
          - add_ctrl_attr_again.current.adminState == "enabled"
          - add_ctrl_attr_again.current.allowedSelfASCount == 3
          - add_ctrl_attr_again.current.authEnabled == false
          - add_ctrl_attr_again.current.ebpgMultiHopTTL == 3
          - add_ctrl_attr_again.current.localAsnConfig == "none"
          - add_ctrl_attr_again.current.peerAddressV6 == "1::8/16"
          - add_ctrl_attr_again.previous.adminState == "enabled"
          - add_ctrl_attr_again.previous.allowedSelfASCount == 3
          - add_ctrl_attr_again.previous.authEnabled == false
          - add_ctrl_attr_again.previous.ebpgMultiHopTTL == 3
          - add_ctrl_attr_again.previous.localAsnConfig == "none"
          - add_ctrl_attr_again.previous.peerAddressV6 == "1::8/16"

    - name: Invalid test - create L3Out BGP Peer config without IPv4, IPv6 address
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        node_group: "node_group_policy_1"
        state: present
      register: nt_add_bgp_peer_without_ip
      ignore_errors: true

    - name: Assertion check for invalid test - create L3Out BGP Peer config without IPv4, IPv6 address
      ansible.builtin.assert:
        that:
          - nt_add_bgp_peer_without_ip is not changed
          - nt_add_bgp_peer_without_ip.msg == "state is present but any of the following are missing{{':'}} ipv4_addr, ipv6_addr"

    - name: Create L3Out BGP Peer config with IPv4, IPv6 address and default control values
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        node_group: "node_group_policy_1"
        ipv4_addr: "3.3.3.3"
        ipv6_addr: "1::9/16"
        bgp_controls:
          state: enabled
        peer_controls:
          state: enabled
        address_families:
          state: enabled
        private_as_controls:
          state: enabled
        state: present
      register: add_bgp_peer_with_default_ctrl

    - name: Assertion check for create L3Out BGP Peer config with IPv4, IPv6 address and default control values
      ansible.builtin.assert:
        that:
          - add_bgp_peer_with_default_ctrl is changed
          - add_bgp_peer_with_default_ctrl.current.adminState == "enabled"
          - add_bgp_peer_with_default_ctrl.current.allowedSelfASCount == 3
          - add_bgp_peer_with_default_ctrl.current.authEnabled == false
          - add_bgp_peer_with_default_ctrl.current.ebpgMultiHopTTL == 1
          - add_bgp_peer_with_default_ctrl.current.peerAddressV4 == "3.3.3.3"
          - add_bgp_peer_with_default_ctrl.current.peerAddressV6 == "1::9/16"
          - add_bgp_peer_with_default_ctrl.previous == {}

    - name: Invalid test - change allowed_self_as_count when the bgp_controls allow_self_as is false
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        node_group: "node_group_policy_1"
        ipv4_addr: "3.3.3.3"
        ipv6_addr: "1::9/16"
        allowed_self_as_count: 4
        state: present
      register: nt_change_allowed_self_as_count
      ignore_errors: true

    - name: Assertion check for invalid test - change allowed_self_as_count when the bgp_controls allow_self_as is false
      ansible.builtin.assert:
        that:
          - nt_change_allowed_self_as_count is not changed
          - nt_change_allowed_self_as_count.current.adminState == "enabled"
          - nt_change_allowed_self_as_count.current.allowedSelfASCount == 3
          - nt_change_allowed_self_as_count.current.authEnabled == false
          - nt_change_allowed_self_as_count.current.ebpgMultiHopTTL == 1
          - nt_change_allowed_self_as_count.current.peerAddressV4 == "3.3.3.3"
          - nt_change_allowed_self_as_count.current.peerAddressV6 == "1::9/16"
          - nt_change_allowed_self_as_count.msg == "MSO Error 400{{':'}} Invalid configuration in L3Out 'l3out_1'{{':'}} node group 'node_group_policy_1'{{':'}} BgpPeer 3.3.3.3-1::9/16 allowedSelfASCount value is set to 4, but AllowSelfAS is false"
          - nt_change_allowed_self_as_count.previous.adminState == "enabled"
          - nt_change_allowed_self_as_count.previous.allowedSelfASCount == 3
          - nt_change_allowed_self_as_count.previous.authEnabled == false
          - nt_change_allowed_self_as_count.previous.ebpgMultiHopTTL == 1
          - nt_change_allowed_self_as_count.previous.peerAddressV4 == "3.3.3.3"
          - nt_change_allowed_self_as_count.previous.peerAddressV6 == "1::9/16"

    - name: Invalid test - enable remove_all when the private_as_controls replace_with_local_as is false
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        node_group: "node_group_policy_1"
        ipv4_addr: "3.3.3.3"
        ipv6_addr: "1::9/16"
        private_as_controls:
          remove_all: true
          replace_with_local_as: false
        state: present
      register: change_remove_all
      ignore_errors: true

    - name: Assertion check for invalid test - enable remove_all when the private_as_controls replace_with_local_as is false
      ansible.builtin.assert:
        that:
          - change_remove_all is not changed
          - change_remove_all.current.adminState == "enabled"
          - change_remove_all.current.allowedSelfASCount == 3
          - change_remove_all.current.authEnabled == false
          - change_remove_all.current.ebpgMultiHopTTL == 1
          - change_remove_all.current.peerAddressV4 == "3.3.3.3"
          - change_remove_all.current.peerAddressV6 == "1::9/16"
          - change_remove_all.previous.adminState == "enabled"
          - change_remove_all.previous.allowedSelfASCount == 3
          - change_remove_all.previous.authEnabled == false
          - change_remove_all.previous.ebpgMultiHopTTL == 1
          - change_remove_all.previous.peerAddressV4 == "3.3.3.3"
          - change_remove_all.previous.peerAddressV6 == "1::9/16"

    - name: Clear IPv4 address for the L3Out BGP Peer object
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        node_group: "node_group_policy_1"
        ipv4_addr: ""
        ipv6_addr: "1::9/16"
        state: present
      register: clear_ipv4_addr

    - name: Assertion check for clear IPv4 address for the L3Out BGP Peer object
      ansible.builtin.assert:
        that:
          - clear_ipv4_addr is changed
          - clear_ipv4_addr.current.adminState == "enabled"
          - clear_ipv4_addr.current.allowedSelfASCount == 3
          - clear_ipv4_addr.current.authEnabled == false
          - clear_ipv4_addr.current.ebpgMultiHopTTL == 1
          - clear_ipv4_addr.current.peerAddressV6 == "1::9/16"
          - clear_ipv4_addr.previous.adminState == "enabled"
          - clear_ipv4_addr.previous.allowedSelfASCount == 3
          - clear_ipv4_addr.previous.authEnabled == false
          - clear_ipv4_addr.previous.ebpgMultiHopTTL == 1
          - clear_ipv4_addr.previous.peerAddressV4 == "3.3.3.3"
          - clear_ipv4_addr.previous.peerAddressV6 == "1::9/16"

    - name: Invalid test - Add IPv4 address back to the L3Out BGP Peer object
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        node_group: "node_group_policy_1"
        ipv4_addr: "3.3.3.3"
        ipv6_addr: "1::9/16"
        state: present
      register: add_same_ipv4_addr
      ignore_errors: true

    - name: Assertion check for invalid test - Add IPv4 address back to the L3Out BGP Peer object
      ansible.builtin.assert:
        that:
          - add_same_ipv4_addr is not changed
          - add_same_ipv4_addr.msg == "MSO Error 400{{':'}} Invalid configuration in L3Out 'l3out_1'{{':'}} node group 'node_group_policy_1'{{':'}} BgpPeer 3.3.3.3-1::9/16 is duplicated. Please delete one"

    - name: Query a specific L3Out BGP Peer object with IPv6 address
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        node_group: "node_group_policy_1"
        ipv6_addr: "1::19/16"
        state: query
      register: query_ipv6_addr

    - name: Assertion check for query a specific L3Out BGP Peer object with IPv6 address
      ansible.builtin.assert:
        that:
          - query_ipv6_addr is not changed
          - query_ipv6_addr.current == {}

    - name: Create L3Out BGP Peer minimum config with IPv4 and IPv6 address
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        node_group: "node_group_policy_1"
        ipv4_addr: "5.5.5.5"
        ipv6_addr: "1::19/16"
        state: present
      register: add_ipv4_ipv6_addr

    - name: Assertion check for create L3Out BGP Peer minimum config with IPv4 and IPv6 address
      ansible.builtin.assert:
        that:
          - add_ipv4_ipv6_addr is changed
          - add_ipv4_ipv6_addr.current.adminState == "enabled"
          - add_ipv4_ipv6_addr.current.allowedSelfASCount == 3
          - add_ipv4_ipv6_addr.current.authEnabled == false
          - add_ipv4_ipv6_addr.current.ebpgMultiHopTTL == 1
          - add_ipv4_ipv6_addr.current.peerAddressV4 == "5.5.5.5"
          - add_ipv4_ipv6_addr.current.peerAddressV6 == "1::19/16"
          - add_ipv4_ipv6_addr.previous == {}

    - name: Query a specific L3Out BGP Peer object with IPv4 and IPv6 address
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        node_group: "node_group_policy_1"
        ipv4_addr: "5.5.5.5"
        ipv6_addr: "1::19/16"
        state: query
      register: query_ipv4_ipv6_addr

    - name: Assertion check for query a specific L3Out BGP Peer object with IPv4 and IPv6 address
      ansible.builtin.assert:
        that:
          - query_ipv4_ipv6_addr is not changed
          - query_ipv4_ipv6_addr.current.adminState == "enabled"
          - query_ipv4_ipv6_addr.current.allowedSelfASCount == 3
          - query_ipv4_ipv6_addr.current.authEnabled == false
          - query_ipv4_ipv6_addr.current.ebpgMultiHopTTL == 1
          - query_ipv4_ipv6_addr.current.peerAddressV4 == "5.5.5.5"
          - query_ipv4_ipv6_addr.current.peerAddressV6 == "1::19/16"

    - name: Invalid test - change configured IPv4 address when IPv6 is already configured
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        node_group: "node_group_policy_1"
        ipv4_addr: "5.5.5.6"
        ipv6_addr: "1::19/16"
        state: present
      register: nt_update_ipv4_addr
      ignore_errors: true

    - name: Assertion check for invalid test - change configured IPv4 address when IPv6 is already configured
      ansible.builtin.assert:
        that:
          - nt_update_ipv4_addr is not changed
          - nt_update_ipv4_addr.current == {}
          - nt_update_ipv4_addr.msg == "MSO Error 400{{':'}} Invalid configuration in L3Out 'l3out_1'{{':'}} node group 'node_group_policy_1'{{':'}} BgpPeer 5.5.5.6-1::19/16 is duplicated. Please delete one"
          - nt_update_ipv4_addr.previous == {}

    - name: Invalid test - change configured IPv6 address when IPv4 is already configured
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        node_group: "node_group_policy_1"
        ipv4_addr: "5.5.5.5"
        ipv6_addr: "1::20/16"
        state: present
      register: nt_update_ipv6_addr
      ignore_errors: true

    - name: Assertion check for invalid test - change configured IPv6 address when IPv4 is already configured
      ansible.builtin.assert:
        that:
          - nt_update_ipv6_addr is not changed
          - nt_update_ipv6_addr.msg == "MSO Error 400{{':'}} Invalid configuration in L3Out 'l3out_1'{{':'}} node group 'node_group_policy_1'{{':'}} BgpPeer 5.5.5.5-1::20/16 is duplicated. Please delete one"

    - name: Clear IPv6 address for the L3Out BGP Peer object
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        node_group: "node_group_policy_1"
        ipv4_addr: "5.5.5.5"
        ipv6_addr: ""
        state: present
      register: clear_ipv6_addr

    - name: Assertion check for clear IPv6 address for the L3Out BGP Peer object
      ansible.builtin.assert:
        that:
          - clear_ipv6_addr is changed
          - clear_ipv6_addr.current.adminState == "enabled"
          - clear_ipv6_addr.current.allowedSelfASCount == 3
          - clear_ipv6_addr.current.authEnabled == false
          - clear_ipv6_addr.current.ebpgMultiHopTTL == 1
          - clear_ipv6_addr.current.peerAddressV4 == "5.5.5.5"
          - clear_ipv6_addr.previous.adminState == "enabled"
          - clear_ipv6_addr.previous.allowedSelfASCount == 3
          - clear_ipv6_addr.previous.authEnabled == false
          - clear_ipv6_addr.previous.ebpgMultiHopTTL == 1
          - clear_ipv6_addr.previous.peerAddressV4 == "5.5.5.5"
          - clear_ipv6_addr.previous.peerAddressV6 == "1::19/16"

    - name: Query a specific L3Out BGP Peer object with IPv4 address
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        node_group: "node_group_policy_1"
        ipv4_addr: "5.5.5.5"
        state: query
      register: query_ipv4_addr

    - name: Assertion check for query a specific L3Out BGP Peer object with IPv4 address
      ansible.builtin.assert:
        that:
          - query_ipv4_addr is not changed
          - query_ipv4_addr.current.adminState == "enabled"
          - query_ipv4_addr.current.allowedSelfASCount == 3
          - query_ipv4_addr.current.authEnabled == false
          - query_ipv4_addr.current.ebpgMultiHopTTL == 1
          - query_ipv4_addr.current.peerAddressV4 == "5.5.5.5"

    - name: Query all L3Out BGP Peer
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        node_group: "node_group_policy_1"
        state: query
      register: all_l3out_bgp_peers_again

    - name: Assertion check for query all L3Out BGP Peer
      ansible.builtin.assert:
        that:
          - all_l3out_bgp_peers_again is not changed
          - all_l3out_bgp_peers_again | length == 4
          - all_l3out_bgp_peers_again.current.0.peerAddressV4 == "1.1.1.1"
          - all_l3out_bgp_peers_again.current.1.peerAddressV6 == "1::8/16"
          - all_l3out_bgp_peers_again.current.2.peerAddressV6 == "1::9/16"
          - all_l3out_bgp_peers_again.current.3.peerAddressV4 == "5.5.5.5"

    - name: Add L3Out BGP Peer with IPv4 and IPv6 address
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *cm_bgp_peer_ipv4_present
        ipv4_addr: "1.1.1.2"
        ipv6_addr: "1::10/16"
        state: absent
      register: add_bgp_peer

    - name: Assertion check for add L3Out BGP Peer with IPv4 and IPv6 address
      ansible.builtin.assert:
        that:
          - add_bgp_peer is not changed
          - add_bgp_peer.current == {}
          - add_bgp_peer.previous == {}
          - add_bgp_peer.proposed == {}

    - name: Remove an existing L3Out BGP Peer with IPv4 and IPv6 address - check mode
      cisco.mso.ndo_l3out_bgp_peer: &cm_rm_bgp_peer
        <<: *cm_bgp_peer_ipv4_present
        ipv4_addr: "1.1.1.2"
        ipv6_addr: "1::10/16"
        state: absent
        output_level: debug
      check_mode: true
      register: cm_rm_bgp_peer

    - name: Assertion check for remove an existing L3Out BGP Peer with IPv4 and IPv6 address - check mode
      ansible.builtin.assert:
        that:
          - cm_rm_bgp_peer is not changed
          - cm_rm_bgp_peer.current == {}
          - cm_rm_bgp_peer.previous == {}
          - cm_rm_bgp_peer.proposed == {}

    - name: Remove an existing L3Out BGP Peer with IPv4 and IPv6 address - normal mode
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *cm_rm_bgp_peer
      register: nm_rm_bgp_peer

    - name: Assertion check for remove an existing L3Out BGP Peer with IPv4 and IPv6 address - normal mode
      ansible.builtin.assert:
        that:
          - nm_rm_bgp_peer is not changed
          - nm_rm_bgp_peer.current == {}
          - nm_rm_bgp_peer.previous == {}
          - nm_rm_bgp_peer.proposed == {}

    - name: Remove an existing L3Out BGP Peer with IPv4 and IPv6 address - normal mode again
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *cm_rm_bgp_peer
      register: nm_rm_bgp_peer_again

    - name: Assertion check for remove an existing L3Out BGP Peer with IPv4 and IPv6 address - normal mode again
      ansible.builtin.assert:
        that:
          - nm_rm_bgp_peer_again is not changed
          - nm_rm_bgp_peer_again.current == {}
          - nm_rm_bgp_peer_again.previous == {}
          - nm_rm_bgp_peer_again.proposed == {}

    - name: Remove an existing L3Out BGP Peer with IPv6 address
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        node_group: "node_group_policy_1"
        ipv6_addr: "1::8/16"
        state: absent
      register: nm_rm_ipv6_bgp_peer

    - name: Assertion check for remove an existing L3Out BGP Peer with IPv6 address
      ansible.builtin.assert:
        that:
          - nm_rm_ipv6_bgp_peer is changed
          - nm_rm_ipv6_bgp_peer.current == {}
          - nm_rm_ipv6_bgp_peer.previous.adminState == "enabled"
          - nm_rm_ipv6_bgp_peer.previous.allowedSelfASCount == 3
          - nm_rm_ipv6_bgp_peer.previous.authEnabled == false
          - nm_rm_ipv6_bgp_peer.previous.ebpgMultiHopTTL == 3
          - nm_rm_ipv6_bgp_peer.previous.localAsnConfig == "none"
          - nm_rm_ipv6_bgp_peer.previous.peerAddressV6 == "1::8/16"

    - name: Remove an existing L3Out BGP Peer with IPv4 address
      cisco.mso.ndo_l3out_bgp_peer:
        <<: *mso_info
        template: '{{ mso_l3out_template | default("ansible_test") }}'
        l3out: "l3out_1"
        node_group: "node_group_policy_1"
        ipv4_addr: "5.5.5.5"
        state: absent
      register: nm_rm_ipv4_bgp_peer

    - name: Assertion check for remove an existing L3Out BGP Peer with IPv4 address
      ansible.builtin.assert:
        that:
          - nm_rm_ipv4_bgp_peer is changed
          - nm_rm_ipv4_bgp_peer.current == {}
          - nm_rm_ipv4_bgp_peer.previous.adminState == "enabled"
          - nm_rm_ipv4_bgp_peer.previous.allowedSelfASCount == 3
          - nm_rm_ipv4_bgp_peer.previous.authEnabled == false
          - nm_rm_ipv4_bgp_peer.previous.ebpgMultiHopTTL == 1
          - nm_rm_ipv4_bgp_peer.previous.peerAddressV4 == "5.5.5.5"

    # Cleanup part
    - name: Ensure l3out template not exist
      cisco.mso.ndo_template:
        <<: *ndo_l3out_template_absent

    - name: Ensure ansible_test_policy tenant policy template not exists
      cisco.mso.ndo_template:
        <<: *tenant_pol_template_absent

    - name: Ensure ansible_test schema template not exist
      cisco.mso.mso_schema_template:
        <<: *mso_schema_template_absent
