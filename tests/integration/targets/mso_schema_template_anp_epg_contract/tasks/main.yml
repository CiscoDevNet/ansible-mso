# Test code for the MSO modules
# Copyright: (c) 2024, Akini Ross (@akinross) <akinross@cisco.com>
# Copyright: (c) 2020, Lionel Hercot (@lhercot) <lhercot@cisco.com>
# Copyright: (c) 2018, Dag Wieers (@dagwieers) <dag@wieers.com> (based on mso_site test case)

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI MultiSite host, username and password
  ansible.builtin.fail:
    msg: 'Please define the following variables: mso_hostname, mso_username and mso_password.'
  when: mso_hostname is not defined or mso_username is not defined or mso_password is not defined

- name: Set vars
  ansible.builtin.set_fact:
    mso_info: &mso_info
      host: '{{ mso_hostname }}'
      username: '{{ mso_username }}'
      password: '{{ mso_password }}'
      validate_certs: '{{ mso_validate_certs | default(false) }}'
      use_ssl: '{{ mso_use_ssl | default(true) }}'
      use_proxy: '{{ mso_use_proxy | default(false) }}'
      output_level: '{{ mso_output_level | default("info") }}'

# CLEAN ENVIRONMENT
# - name: Ensure site exist
#   cisco.mso.mso_site: &site_present
#     host: '{{ mso_hostname }}'
#     username: '{{ mso_username }}'
#     password: '{{ mso_password }}'
#     validate_certs: '{{ mso_validate_certs | default(false) }}'
#     use_ssl: '{{ mso_use_ssl | default(true) }}'
#     use_proxy: '{{ mso_use_proxy | default(true) }}'
#     output_level: '{{ mso_output_level | default("info") }}'
#     site: '{{ mso_site | default("ansible_test") }}'
#     apic_username: '{{ apic_username }}'
#     apic_password: '{{ apic_password }}'
#     apic_site_id: '{{ apic_site_id | default(101) }}'
#     urls:
#     - https://{{ apic_hostname }}
#     state: present

- name: Remove schemas
  cisco.mso.mso_schema:
    <<: *mso_info
    schema: '{{ item }}'
    state: absent
  loop:
  - '{{ mso_schema | default("ansible_test") }}_2'
  - '{{ mso_schema | default("ansible_test") }}'

- name: Ensure tenant ansible_test exist
  cisco.mso.mso_tenant: &tenant_present
    <<: *mso_info
    tenant: ansible_test
    users:
    - '{{ mso_username }}'
    # sites:
    # - '{{ mso_site | default("ansible_test") }}'
    state: present

- name: Ensure schema 1 with Template 1 exist
  cisco.mso.mso_schema_template:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    tenant: ansible_test
    template: Template 1
    state: present

- name: Ensure schema 1 with Template 2 exist
  cisco.mso.mso_schema_template:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    tenant: ansible_test
    template: Template 2
    state: present

- name: Ensure schema 2 with Template 3 exist
  cisco.mso.mso_schema_template:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    tenant: ansible_test
    template: Template 3
    state: present

- name: Ensure ANP exist
  cisco.mso.mso_schema_template_anp:
    <<: *mso_info
    schema: '{{ item.schema }}'
    template: '{{ item.template }}'
    anp: ANP
    state: present
  loop:
  - { schema: '{{ mso_schema | default("ansible_test") }}', template: 'Template 1' }
  - { schema: '{{ mso_schema | default("ansible_test") }}_2', template: 'Template 3' }

- name: Ensure Filter 1 exist
  cisco.mso.mso_schema_template_filter_entry:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    filter: Filter1
    entry: Filter1-Entry
    state: present

- name: Ensure Contract1 exist
  cisco.mso.mso_schema_template_contract_filter: &contract_present
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    contract: Contract1
    filter: Filter1
    filter_schema: '{{ mso_schema | default("ansible_test") }}'
    filter_template: Template 1
    state: present

- name: Ensure Filter 2 exist
  cisco.mso.mso_schema_template_filter_entry:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 2
    filter: Filter2
    entry: Filter2-Entry
    state: present

- name: Ensure Contract2 exist
  cisco.mso.mso_schema_template_contract_filter: &contract2_present
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 2
    contract: Contract2
    filter: Filter2
    filter_schema: '{{ mso_schema | default("ansible_test") }}'
    filter_template: Template 2
    state: present

- name: Ensure EPGs exist
  cisco.mso.mso_schema_template_anp_epg:
    <<: *mso_info
    schema: '{{ item.schema }}'
    template: '{{ item.template }}'
    anp: ANP
    epg: '{{ item.epg }}'
    state: present
  loop:
  - { schema: '{{ mso_schema | default("ansible_test") }}', template: 'Template 1', epg: 'ansible_test_1' }
  - { schema: '{{ mso_schema | default("ansible_test") }}_2', template: 'Template 3', epg: 'ansible_test_3' }

# ADD Contract to EPG
- name: Add Contract1 to EPG (check_mode)
  cisco.mso.mso_schema_template_anp_epg_contract: &contract_epg_present
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    contract:
      name: Contract1
      type: consumer
    state: present
  check_mode: true
  register: cm_add_contract_rel

- name: Verify cm_add_contract_rel
  ansible.builtin.assert:
    that:
    - cm_add_contract_rel is changed
    - cm_add_contract_rel.previous == {}
    - cm_add_contract_rel.current.contractRef.templateName == "Template1"
    - cm_add_contract_rel.current.contractRef.contractName == "Contract1"
    - cm_add_contract_rel.current.relationshipType == "consumer"

- name: Add Contract to EPG (normal mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_present
  register: nm_add_contract_rel

- name: Verify nm_add_contract_rel
  ansible.builtin.assert:
    that:
    - nm_add_contract_rel is changed
    - nm_add_contract_rel.previous == {}
    - nm_add_contract_rel.current.contractRef.templateName == "Template1"
    - nm_add_contract_rel.current.contractRef.contractName == "Contract1"
    - nm_add_contract_rel.current.relationshipType == "consumer"
    - cm_add_contract_rel.current.contractRef.schemaId ==  nm_add_contract_rel.current.contractRef.schemaId

- name: Add Contract to EPG again (check_mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_present
  check_mode: true
  register: cm_add_contract_rel_again

- name: Verify cm_add_contract_rel_again
  ansible.builtin.assert:
    that:
    - cm_add_contract_rel_again is not changed
    - cm_add_contract_rel_again.previous.contractRef.templateName == "Template1"
    - cm_add_contract_rel_again.current.contractRef.templateName == "Template1"
    - cm_add_contract_rel_again.previous.contractRef.contractName == "Contract1"
    - cm_add_contract_rel_again.current.contractRef.contractName == "Contract1"
    - cm_add_contract_rel_again.previous.relationshipType == "consumer"
    - cm_add_contract_rel_again.current.relationshipType == "consumer"
    - cm_add_contract_rel_again.previous.contractRef.schemaId ==  cm_add_contract_rel_again.current.contractRef.schemaId


- name: Add Contract to EPG again (normal mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_present
  register: nm_add_contract_rel_again

- name: Verify nm_add_contract_rel_again
  ansible.builtin.assert:
    that:
    - nm_add_contract_rel_again is not changed
    - nm_add_contract_rel_again.previous.contractRef.templateName == "Template1"
    - nm_add_contract_rel_again.current.contractRef.templateName == "Template1"
    - nm_add_contract_rel_again.previous.contractRef.contractName == "Contract1"
    - nm_add_contract_rel_again.current.contractRef.contractName == "Contract1"
    - nm_add_contract_rel_again.previous.relationshipType == "consumer"
    - nm_add_contract_rel_again.current.relationshipType == "consumer"
    - nm_add_contract_rel_again.previous.contractRef.schemaId ==  nm_add_contract_rel_again.current.contractRef.schemaId

- name: Add Contract1 to EPG - provider (normal mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_present
    contract:
      name: Contract1
      type: provider
  register: nm_add_contract1_rel_provider

- name: Add Contract2 to EPG - consumer (normal mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_present
    contract:
      name: Contract2
      template: Template 2
      type: consumer
  register: nm_add_contract2_rel_consumer

- name: Add Contract1 to EPG 3 - provider (normal mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_present
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template 3
    anp: ANP
    epg: ansible_test_3
    contract:
      name: Contract1
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template 1
      type: provider
  register: nm_add_contract3_rel_provider

- name: Verify nm_add_contract1_rel_provider, nm_add_contract2_rel_consumer and nm_add_contract3_rel_provider
  ansible.builtin.assert:
    that:
      - nm_add_contract1_rel_provider is changed
      - nm_add_contract2_rel_consumer is changed
      - nm_add_contract3_rel_provider is changed
      - nm_add_contract1_rel_provider.current.contractRef.contractName == nm_add_contract3_rel_provider.current.contractRef.contractName == "Contract1"
      - nm_add_contract2_rel_consumer.current.contractRef.contractName == "Contract2"
      - nm_add_contract1_rel_provider.current.contractRef.templateName == nm_add_contract3_rel_provider.current.contractRef.templateName == "Template1"
      - nm_add_contract2_rel_consumer.current.contractRef.templateName == "Template2"
      - nm_add_contract1_rel_provider.current.contractRef.schemaId == nm_add_contract2_rel_consumer.current.contractRef.schemaId == nm_add_contract3_rel_provider.current.contractRef.schemaId
      - nm_add_contract2_rel_consumer.current.relationshipType == "consumer"
      - nm_add_contract1_rel_provider.current.relationshipType == nm_add_contract3_rel_provider.current.relationshipType == "provider"

# # QUERY ALL Contract to EPG
- name: Query all contract relationship for EPG (check_mode)
  cisco.mso.mso_schema_template_anp_epg_contract: &contract_epg_query
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    state: query
  check_mode: true
  register: cm_query_all_contract_rels

- name: Query all contract relationship for EPG (normal mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
  register: nm_query_all_contract_rels

- name: Verify query_all_contract_rels
  ansible.builtin.assert:
    that:
    - cm_query_all_contract_rels is not changed
    - nm_query_all_contract_rels is not changed
    - cm_query_all_contract_rels.current | length == nm_query_all_contract_rels.current | length == 3


# QUERY A Contract to EPG
- name: Query Contract1 relationship for EPG - consumer (check_mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    contract:
      name: Contract1
      type: consumer
  check_mode: true
  register: cm_query_contract1_consumer_rel

- name: Query Contract1 relationship for EPG - consumer (normal mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    contract:
      name: Contract1
      type: consumer
  register: nm_query_contract1_consumer_rel

- name: Query Contract1 relationship for EPG - provider (normal mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    contract:
      name: Contract1
      type: provider
  register: nm_query_contract1_provider_rel

- name: Query Contract1 relationship for EPG - consumer (normal mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    contract:
      name: Contract2
      template: Template 2
      type: consumer
  register: nm_query_contract2_consumer_rel

- name: Query Contract1 relationship for EPG - provider (normal mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template 3
    anp: ANP
    epg: ansible_test_3
    contract:
      name: Contract1
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template 1
      type: provider
  register: nm_query_contract3_provider_rel

- name: Verify query_contractX_YYYYY_rel
  ansible.builtin.assert:
    that:
    - cm_query_contract1_consumer_rel is not changed
    - nm_query_contract1_consumer_rel is not changed
    - nm_query_contract1_provider_rel is not changed
    - nm_query_contract2_consumer_rel is not changed
    - nm_query_contract3_provider_rel is not changed
    - cm_query_contract1_consumer_rel == nm_query_contract1_consumer_rel
    - cm_query_contract1_consumer_rel.current.contractRef.contractName == nm_query_contract1_consumer_rel.current.contractRef.contractName == nm_query_contract1_provider_rel.current.contractRef.contractName == nm_query_contract3_provider_rel.current.contractRef.contractName == "Contract1"
    - nm_query_contract2_consumer_rel.current.contractRef.contractName == "Contract2"
    - cm_query_contract1_consumer_rel.current.contractRef.templateName == nm_query_contract1_consumer_rel.current.contractRef.templateName == nm_query_contract1_provider_rel.current.contractRef.templateName == nm_query_contract3_provider_rel.current.contractRef.templateName == "Template1"
    - nm_query_contract2_consumer_rel.current.contractRef.templateName == "Template2"
    - cm_query_contract1_consumer_rel.current.contractRef.schemaId == nm_query_contract1_consumer_rel.current.contractRef.schemaId == nm_query_contract1_provider_rel.current.contractRef.schemaId == nm_query_contract2_consumer_rel.current.contractRef.schemaId == nm_query_contract3_provider_rel.current.contractRef.schemaId
    - cm_query_contract1_consumer_rel.current.relationshipType == nm_query_contract1_consumer_rel.current.relationshipType == nm_query_contract2_consumer_rel.current.relationshipType == "consumer"
    - nm_query_contract1_provider_rel.current.relationshipType == nm_query_contract3_provider_rel.current.relationshipType == "provider"
    

# REMOVE Contract to EPG
- name: Remove Contract to EPG (check_mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_present
    state: absent
  check_mode: true
  register: cm_remove_contract_rel

- name: Verify cm_remove_contract_rel
  ansible.builtin.assert:
    that:
    - cm_remove_contract_rel is changed
    - cm_remove_contract_rel.current == {}

- name: Remove Contract to EPG (normal mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_present
    state: absent
  register: nm_remove_contract_rel

- name: Verify nm_remove_contract_rel
  ansible.builtin.assert:
    that:
    - nm_remove_contract_rel is changed
    - nm_remove_contract_rel.current == {}

- name: Remove Contract to EPG again (check_mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_present
    state: absent
  check_mode: true
  register: cm_remove_contract_rel_again

- name: Verify cm_remove_contract_rel_again
  ansible.builtin.assert:
    that:
    - cm_remove_contract_rel_again is not changed
    - cm_remove_contract_rel_again.current == {}

- name: Remove Contract to EPG again (normal mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_present
    state: absent
  register: nm_remove_contract_rel_again

- name: Verify nm_remove_contract_rel_again
  ansible.builtin.assert:
    that:
    - nm_remove_contract_rel_again is not changed
    - nm_remove_contract_rel_again.current == {}


# QUERY NON-EXISTING Contract to EPG
- name: Query non-existing contract (check_mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    contract:
      name: non_existing_contract
      type: provider
  check_mode: true
  ignore_errors: true
  register: cm_query_non_contract

- name: Query non-existing contract (normal mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    contract:
      name: non_existing_contract
      type: provider
  ignore_errors: true
  register: nm_query_non_contract

- name: Verify query_non_contract
  ansible.builtin.assert:
    that:
    - cm_query_non_contract is not changed
    - nm_query_non_contract is not changed
    - cm_query_non_contract == nm_query_non_contract
    - cm_query_non_contract.msg is match("Contract with Reference '/schemas/[0-9a-zA-Z]*/templates/Template1/contracts/non_existing_contract' and type 'provider' not found")
    - nm_query_non_contract.msg is match("Contract with Reference '/schemas/[0-9a-zA-Z]*/templates/Template1/contracts/non_existing_contract' and type 'provider' not found")

# QUERY NON-EXISTING EPG
- name: Query non-existing EPG (check_mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    epg: non_existing_epg
  check_mode: true
  ignore_errors: true
  register: cm_query_non_epg

- name: Query non-existing EPG (normal mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    epg: non_existing_epg
  ignore_errors: true
  register: nm_query_non_epg

- name: Verify query_non_epg
  ansible.builtin.assert:
    that:
    - cm_query_non_epg is not changed
    - nm_query_non_epg is not changed
    - cm_query_non_epg == nm_query_non_epg
    - cm_query_non_epg.msg == nm_query_non_epg.msg == "Provided EPG 'non_existing_epg' not matching existing epg(s){{":"}} ansible_test_1"

# QUERY NON-EXISTING ANP
- name: Query non-existing ANP (check_mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    anp: non_existing_anp
  check_mode: true
  ignore_errors: true
  register: cm_query_non_anp

- name: Query non-existing ANP (normal mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    anp: non_existing_anp
  ignore_errors: true
  register: nm_query_non_anp

- name: Verify query_non_anp
  ansible.builtin.assert:
    that:
    - cm_query_non_anp is not changed
    - nm_query_non_anp is not changed
    - cm_query_non_anp == nm_query_non_anp
    - cm_query_non_anp.msg == nm_query_non_anp.msg == "Provided ANP 'non_existing_anp' not matching existing anp(s){{":"}} ANP"

# USE A NON-EXISTING STATE
- name: Non-existing state for contract relationship (check_mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    state: non-existing-state
  check_mode: true
  ignore_errors: true
  register: cm_non_existing_state

- name: Non-existing state for contract relationship (normal_mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    state: non-existing-state
  ignore_errors: true
  register: nm_non_existing_state

- name: Verify non_existing_state
  ansible.builtin.assert:
    that:
    - cm_non_existing_state is not changed
    - nm_non_existing_state is not changed
    - cm_non_existing_state == nm_non_existing_state
    - cm_non_existing_state.msg == nm_non_existing_state.msg == "value of state must be one of{{':'}} absent, present, query, got{{':'}} non-existing-state"

# USE A NON-EXISTING SCHEMA
- name: Non-existing schema for contract relationship (check_mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    schema: non-existing-schema
  check_mode: true
  ignore_errors: true
  register: cm_non_existing_schema

- name: Non-existing schema for contract relationship (normal_mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    schema: non-existing-schema
  ignore_errors: true
  register: nm_non_existing_schema

- name: Verify non_existing_schema
  ansible.builtin.assert:
    that:
    - cm_non_existing_schema is not changed
    - nm_non_existing_schema is not changed
    - cm_non_existing_schema == nm_non_existing_schema
    - cm_non_existing_schema.msg == nm_non_existing_schema.msg == "Provided schema 'non-existing-schema' does not exist."

- name: Non-existing contract schema for contract relationship (check_mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    contract:
      name: Contract1
      schema: non-existing-schema
      template: Template 1
      type: provider
  check_mode: true
  ignore_errors: true
  register: cm_non_existing_contract_schema

- name: Non-existing contract schema for contract relationship (normal_mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    contract:
      name: Contract1
      schema: non-existing-schema
      template: Template 1
      type: provider
  ignore_errors: true
  register: nm_non_existing_contract_schema

- name: Verify non_existing_contract_schema
  ansible.builtin.assert:
    that:
    - cm_non_existing_contract_schema is not changed
    - nm_non_existing_contract_schema is not changed
    - cm_non_existing_contract_schema == nm_non_existing_contract_schema
    - cm_non_existing_contract_schema.msg == nm_non_existing_contract_schema.msg == "Provided schema 'non-existing-schema' does not exist."

# USE A NON-EXISTING TEMPLATE
- name: Non-existing template for contract relationship (check_mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    template: non-existing-template
  check_mode: true
  ignore_errors: true
  register: cm_non_existing_template

- name: Non-existing template for contract relationship (normal_mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    template: non-existing-template
  ignore_errors: true
  register: nm_non_existing_template

- name: Verify non_existing_template
  ansible.builtin.assert:
    that:
    - cm_non_existing_template is not changed
    - nm_non_existing_template is not changed
    - cm_non_existing_template == nm_non_existing_template
    - cm_non_existing_template.msg == nm_non_existing_template.msg == "Provided template 'non-existing-template' not matching existing template(s){{":"}} Template1, Template2"

- name: Non-existing contract template for contract relationship (check_mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    contract:
      name: Contract1
      template: non-existing-template
      type: provider
  check_mode: true
  ignore_errors: true
  register: cm_non_existing_contract_template

- name: Non-existing contract template for contract relationship (normal_mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    contract:
      name: Contract1
      template: non-existing-template
      type: provider
  ignore_errors: true
  register: nm_non_existing_contract_template

- name: Verify non_existing_contract_template
  ansible.builtin.assert:
    that:
    - cm_non_existing_contract_template is not changed
    - nm_non_existing_contract_template is not changed
    - cm_non_existing_contract_template == nm_non_existing_contract_template
    - cm_non_existing_contract_template.msg is match("Contract with Reference '/schemas/[0-9a-zA-Z]*/templates/non-existing-template/contracts/Contract1' and type 'provider' not found")
    - nm_non_existing_contract_template.msg is match("Contract with Reference '/schemas/[0-9a-zA-Z]*/templates/non-existing-template/contracts/Contract1' and type 'provider' not found")

# TESTS IN BULK

# SETUP TEST ENVIRONMENT FOR BULK

- name: Create template_bulk in schema ansible_test
  cisco.mso.mso_schema_template: &bulk_template_present
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: template_bulk
    tenant: ansible_test

- name: Create filter_bulk in template_bulk
  cisco.mso.mso_schema_template_filter_entry:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: template_bulk
    filter: filter_bulk
    entry: filter_entry_bulk

- name: Create 20 contract_bulk_x in template_bulk
  cisco.mso.mso_schema_template_contract_filter:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: template_bulk
    contract: "contract_bulk_{{ item }}"
    filter: filter_bulk
  loop: "{{ range(1, 21, 1) | list }}"

- name: Create ANP in template_bulk
  cisco.mso.mso_schema_template_anp: &anp_bulk
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: template_bulk
    anp: anp_bulk

- name: Create EPG in template_bulk
  cisco.mso.mso_schema_template_anp_epg: &epg_bulk
    <<: *anp_bulk
    epg: epg_bulk

- name: Set facts for provider contracts
  ansible.builtin.set_fact:
    provider_contracts_present: []
    provider_contracts_absent: []
    consumer_contracts_present: []
    consumer_contracts_absent: []

- name: Create contracts list for appending
  ansible.builtin.set_fact:
    provider_contracts_present: "{{ provider_contracts_present + [{'name': 'contract_bulk_%s' | format(item), 'type': 'provider'}] }}"
    consumer_contracts_present: "{{ consumer_contracts_present + [{'name': 'contract_bulk_%s' | format(item), 'type': 'consumer'}] }}"
  loop: "{{ range(1, 21, 1) | list }}"

- name: Create contracts list for removing
  ansible.builtin.set_fact:
    provider_contracts_absent: "{{ provider_contracts_absent + [{'name': 'contract_bulk_%s' | format(item), 'type': 'provider'}] }}"
    consumer_contracts_absent: "{{ consumer_contracts_absent + [{'name': 'contract_bulk_%s' | format(item), 'type': 'consumer'}] }}"
  loop: "{{ range(1, 21, 2) | list }}"

# CREATE AND UPDATE TESTS FOR BULK

- name: Append provider contracts (check_mode)
  cisco.mso.mso_schema_template_anp_epg_contract: &provider_contracts_append
    <<: *epg_bulk
    contracts: "{{ provider_contracts_present }}"
  register: cm_append_provider_contracts
  check_mode: true

- name: Append provider contracts
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *provider_contracts_append
  register: nm_append_provider_contracts

- name: Append provider contracts again
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *provider_contracts_append
  register: nm_append_provider_contracts_again

- name: Append consumer contracts
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *provider_contracts_append
    contracts: "{{ consumer_contracts_present }}"
  register: nm_append_consumer_contracts

- name: Verify appending contracts
  ansible.builtin.assert:
    that:
    - cm_append_provider_contracts is changed
    - cm_append_provider_contracts.previous == []
    - cm_append_provider_contracts.current | length == 20
    - cm_append_provider_contracts.current.0.contractRef.contractName == "contract_bulk_1"
    - cm_append_provider_contracts.current.0.relationshipType == "provider"
    - cm_append_provider_contracts.current.9.contractRef.contractName == "contract_bulk_10"
    - cm_append_provider_contracts.current.9.relationshipType == "provider"
    - cm_append_provider_contracts.current.19.contractRef.contractName == "contract_bulk_20"
    - cm_append_provider_contracts.current.19.relationshipType == "provider"
    - nm_append_provider_contracts is changed
    - nm_append_provider_contracts.previous == []
    - nm_append_provider_contracts.current | length == 20
    - nm_append_provider_contracts.current.0.contractRef.contractName == "contract_bulk_1"
    - nm_append_provider_contracts.current.0.relationshipType == "provider"
    - nm_append_provider_contracts.current.9.contractRef.contractName == "contract_bulk_10"
    - nm_append_provider_contracts.current.9.relationshipType == "provider"
    - nm_append_provider_contracts.current.19.contractRef.contractName == "contract_bulk_20"
    - nm_append_provider_contracts.current.19.relationshipType == "provider"
    - nm_append_provider_contracts_again is not changed
    - nm_append_provider_contracts_again.previous.0.contractRef.contractName == "contract_bulk_1"
    - nm_append_provider_contracts_again.previous.0.relationshipType == "provider"
    - nm_append_provider_contracts_again.previous.9.contractRef.contractName == "contract_bulk_10"
    - nm_append_provider_contracts_again.previous.9.relationshipType == "provider"
    - nm_append_provider_contracts_again.previous.19.contractRef.contractName == "contract_bulk_20"
    - nm_append_provider_contracts_again.previous.19.relationshipType == "provider"
    - nm_append_provider_contracts_again.current | length == 20
    - nm_append_provider_contracts_again.current.0.contractRef.contractName == "contract_bulk_1"
    - nm_append_provider_contracts_again.current.0.relationshipType == "provider"
    - nm_append_provider_contracts_again.current.9.contractRef.contractName == "contract_bulk_10"
    - nm_append_provider_contracts_again.current.9.relationshipType == "provider"
    - nm_append_provider_contracts_again.current.19.contractRef.contractName == "contract_bulk_20"
    - nm_append_provider_contracts_again.current.19.relationshipType == "provider"
    - nm_append_consumer_contracts is changed
    - nm_append_consumer_contracts.previous.0.contractRef.contractName == "contract_bulk_1"
    - nm_append_consumer_contracts.previous.0.relationshipType == "provider"
    - nm_append_consumer_contracts.previous.9.contractRef.contractName == "contract_bulk_10"
    - nm_append_consumer_contracts.previous.9.relationshipType == "provider"
    - nm_append_consumer_contracts.previous.19.contractRef.contractName == "contract_bulk_20"
    - nm_append_consumer_contracts.previous.19.relationshipType == "provider"
    - nm_append_consumer_contracts.current | length == 40
    - nm_append_consumer_contracts.current.0.contractRef.contractName == "contract_bulk_1"
    - nm_append_consumer_contracts.current.0.relationshipType == "provider"
    - nm_append_consumer_contracts.current.9.contractRef.contractName == "contract_bulk_10"
    - nm_append_consumer_contracts.current.9.relationshipType == "provider"
    - nm_append_consumer_contracts.current.19.contractRef.contractName == "contract_bulk_20"
    - nm_append_consumer_contracts.current.19.relationshipType == "provider"
    - nm_append_consumer_contracts.current.20.contractRef.contractName == "contract_bulk_1"
    - nm_append_consumer_contracts.current.20.relationshipType == "consumer"
    - nm_append_consumer_contracts.current.29.contractRef.contractName == "contract_bulk_10"
    - nm_append_consumer_contracts.current.29.relationshipType == "consumer"
    - nm_append_consumer_contracts.current.39.contractRef.contractName == "contract_bulk_20"
    - nm_append_consumer_contracts.current.39.relationshipType == "consumer"

# REMOVE TESTS FOR BULK

- name: Remove provider contracts (check_mode)
  cisco.mso.mso_schema_template_anp_epg_contract: &provider_contracts_remove
    <<: *epg_bulk
    contracts: "{{ provider_contracts_absent }}"
    state: absent
  register: cm_remove_provider_contracts
  check_mode: true

- name: Remove provider contracts
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *provider_contracts_remove
  register: nm_remove_provider_contracts

- name: Remove provider contracts again
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *provider_contracts_remove
  register: nm_remove_provider_contracts_again

- name: Remove consumer contracts
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *provider_contracts_remove
    contracts: "{{ consumer_contracts_absent }}"
  register: nm_remove_consumer_contracts

- name: Verify removing contracts
  ansible.builtin.assert:
    that:
      - cm_remove_provider_contracts is changed
      - cm_remove_provider_contracts.previous | length == 40
      - cm_remove_provider_contracts.previous.0.contractRef.contractName == "contract_bulk_1"
      - cm_remove_provider_contracts.previous.0.relationshipType == "provider"
      - cm_remove_provider_contracts.previous.9.contractRef.contractName == "contract_bulk_10"
      - cm_remove_provider_contracts.previous.9.relationshipType == "provider"
      - cm_remove_provider_contracts.previous.19.contractRef.contractName == "contract_bulk_20"
      - cm_remove_provider_contracts.previous.19.relationshipType == "provider"
      - cm_remove_provider_contracts.previous.20.contractRef.contractName == "contract_bulk_1"
      - cm_remove_provider_contracts.previous.20.relationshipType == "consumer"
      - cm_remove_provider_contracts.previous.29.contractRef.contractName == "contract_bulk_10"
      - cm_remove_provider_contracts.previous.29.relationshipType == "consumer"
      - cm_remove_provider_contracts.previous.39.contractRef.contractName == "contract_bulk_20"
      - cm_remove_provider_contracts.previous.39.relationshipType == "consumer"
      - cm_remove_provider_contracts.current | length == 30
      - cm_remove_provider_contracts.current.0.contractRef.contractName == "contract_bulk_2"
      - cm_remove_provider_contracts.current.0.relationshipType == "provider"
      - cm_remove_provider_contracts.current.4.contractRef.contractName == "contract_bulk_10"
      - cm_remove_provider_contracts.current.4.relationshipType == "provider"
      - cm_remove_provider_contracts.current.9.contractRef.contractName == "contract_bulk_20"
      - cm_remove_provider_contracts.current.9.relationshipType == "provider"
      - cm_remove_provider_contracts.current.10.contractRef.contractName == "contract_bulk_1"
      - cm_remove_provider_contracts.current.10.relationshipType == "consumer"
      - cm_remove_provider_contracts.current.19.contractRef.contractName == "contract_bulk_10"
      - cm_remove_provider_contracts.current.19.relationshipType == "consumer"
      - cm_remove_provider_contracts.current.29.contractRef.contractName == "contract_bulk_20"
      - cm_remove_provider_contracts.current.29.relationshipType == "consumer"
      - nm_remove_provider_contracts is changed
      - nm_remove_provider_contracts.previous | length == 40
      - nm_remove_provider_contracts.previous.0.contractRef.contractName == "contract_bulk_1"
      - nm_remove_provider_contracts.previous.0.relationshipType == "provider"
      - nm_remove_provider_contracts.previous.9.contractRef.contractName == "contract_bulk_10"
      - nm_remove_provider_contracts.previous.9.relationshipType == "provider"
      - nm_remove_provider_contracts.previous.19.contractRef.contractName == "contract_bulk_20"
      - nm_remove_provider_contracts.previous.19.relationshipType == "provider"
      - nm_remove_provider_contracts.previous.20.contractRef.contractName == "contract_bulk_1"
      - nm_remove_provider_contracts.previous.20.relationshipType == "consumer"
      - nm_remove_provider_contracts.previous.29.contractRef.contractName == "contract_bulk_10"
      - nm_remove_provider_contracts.previous.29.relationshipType == "consumer"
      - nm_remove_provider_contracts.previous.39.contractRef.contractName == "contract_bulk_20"
      - nm_remove_provider_contracts.previous.39.relationshipType == "consumer"
      - nm_remove_provider_contracts.current | length == 30
      - nm_remove_provider_contracts.current.0.contractRef.contractName == "contract_bulk_2"
      - nm_remove_provider_contracts.current.0.relationshipType == "provider"
      - nm_remove_provider_contracts.current.4.contractRef.contractName == "contract_bulk_10"
      - nm_remove_provider_contracts.current.4.relationshipType == "provider"
      - nm_remove_provider_contracts.current.9.contractRef.contractName == "contract_bulk_20"
      - nm_remove_provider_contracts.current.9.relationshipType == "provider"
      - nm_remove_provider_contracts.current.10.contractRef.contractName == "contract_bulk_1"
      - nm_remove_provider_contracts.current.10.relationshipType == "consumer"
      - nm_remove_provider_contracts.current.19.contractRef.contractName == "contract_bulk_10"
      - nm_remove_provider_contracts.current.19.relationshipType == "consumer"
      - nm_remove_provider_contracts.current.29.contractRef.contractName == "contract_bulk_20"
      - nm_remove_provider_contracts.current.29.relationshipType == "consumer"
      - nm_remove_provider_contracts_again is not changed
      - nm_remove_provider_contracts_again.previous | length == 30
      - nm_remove_provider_contracts_again.previous.0.contractRef.contractName == "contract_bulk_2"
      - nm_remove_provider_contracts_again.previous.0.relationshipType == "provider"
      - nm_remove_provider_contracts_again.previous.4.contractRef.contractName == "contract_bulk_10"
      - nm_remove_provider_contracts_again.previous.4.relationshipType == "provider"
      - nm_remove_provider_contracts_again.previous.9.contractRef.contractName == "contract_bulk_20"
      - nm_remove_provider_contracts_again.previous.9.relationshipType == "provider"
      - nm_remove_provider_contracts_again.previous.10.contractRef.contractName == "contract_bulk_1"
      - nm_remove_provider_contracts_again.previous.10.relationshipType == "consumer"
      - nm_remove_provider_contracts_again.previous.19.contractRef.contractName == "contract_bulk_10"
      - nm_remove_provider_contracts_again.previous.19.relationshipType == "consumer"
      - nm_remove_provider_contracts_again.previous.29.contractRef.contractName == "contract_bulk_20"
      - nm_remove_provider_contracts_again.previous.29.relationshipType == "consumer"
      - nm_remove_provider_contracts_again.current | length == 30
      - nm_remove_provider_contracts_again.current.0.contractRef.contractName == "contract_bulk_2"
      - nm_remove_provider_contracts_again.current.0.relationshipType == "provider"
      - nm_remove_provider_contracts_again.current.4.contractRef.contractName == "contract_bulk_10"
      - nm_remove_provider_contracts_again.current.4.relationshipType == "provider"
      - nm_remove_provider_contracts_again.current.9.contractRef.contractName == "contract_bulk_20"
      - nm_remove_provider_contracts_again.current.9.relationshipType == "provider"
      - nm_remove_provider_contracts_again.current.10.contractRef.contractName == "contract_bulk_1"
      - nm_remove_provider_contracts_again.current.10.relationshipType == "consumer"
      - nm_remove_provider_contracts_again.current.19.contractRef.contractName == "contract_bulk_10"
      - nm_remove_provider_contracts_again.current.19.relationshipType == "consumer"
      - nm_remove_provider_contracts_again.current.29.contractRef.contractName == "contract_bulk_20"
      - nm_remove_provider_contracts_again.current.29.relationshipType == "consumer"
      - nm_remove_consumer_contracts is changed
      - nm_remove_consumer_contracts.previous | length == 30
      - nm_remove_consumer_contracts.previous.0.contractRef.contractName == "contract_bulk_2"
      - nm_remove_consumer_contracts.previous.0.relationshipType == "provider"
      - nm_remove_consumer_contracts.previous.4.contractRef.contractName == "contract_bulk_10"
      - nm_remove_consumer_contracts.previous.4.relationshipType == "provider"
      - nm_remove_consumer_contracts.previous.9.contractRef.contractName == "contract_bulk_20"
      - nm_remove_consumer_contracts.previous.9.relationshipType == "provider"
      - nm_remove_consumer_contracts.previous.10.contractRef.contractName == "contract_bulk_1"
      - nm_remove_consumer_contracts.previous.10.relationshipType == "consumer"
      - nm_remove_consumer_contracts.previous.19.contractRef.contractName == "contract_bulk_10"
      - nm_remove_consumer_contracts.previous.19.relationshipType == "consumer"
      - nm_remove_consumer_contracts.previous.29.contractRef.contractName == "contract_bulk_20"
      - nm_remove_consumer_contracts.previous.29.relationshipType == "consumer"
      - nm_remove_consumer_contracts.current | length == 20
      - nm_remove_consumer_contracts.current.0.contractRef.contractName == "contract_bulk_2"
      - nm_remove_consumer_contracts.current.0.relationshipType == "provider"
      - nm_remove_consumer_contracts.current.4.contractRef.contractName == "contract_bulk_10"
      - nm_remove_consumer_contracts.current.4.relationshipType == "provider"
      - nm_remove_consumer_contracts.current.9.contractRef.contractName == "contract_bulk_20"
      - nm_remove_consumer_contracts.current.9.relationshipType == "provider"
      - nm_remove_consumer_contracts.current.10.contractRef.contractName == "contract_bulk_2"
      - nm_remove_consumer_contracts.current.10.relationshipType == "consumer"
      - nm_remove_consumer_contracts.current.14.contractRef.contractName == "contract_bulk_10"
      - nm_remove_consumer_contracts.current.14.relationshipType == "consumer"
      - nm_remove_consumer_contracts.current.19.contractRef.contractName == "contract_bulk_20"
      - nm_remove_consumer_contracts.current.19.relationshipType == "consumer"

# FORCE REPLACE TESTS

- name: Force replace contracts with contracts (check_mode)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *provider_contracts_append
    force_replace: true
  register: cm_force_replace_provider_contracts
  check_mode: true

- name: Force replace contracts with contracts
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *provider_contracts_append
    force_replace: true
  register: nm_force_replace_provider_contracts

- name: Force replace contracts with contracts again
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *provider_contracts_append
    force_replace: true
  register: nm_force_replace_provider_contracts_again

- name: Force replace contracts with new contracts
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *provider_contracts_append
    contracts: "{{ consumer_contracts_present }}"
    force_replace: true
  register: nm_force_replace_consumer_contracts

- name: Verify force replacing contracts
  ansible.builtin.assert:
    that:
      - cm_force_replace_provider_contracts is changed
      - cm_force_replace_provider_contracts.previous | length == 20
      - cm_force_replace_provider_contracts.previous.0.contractRef.contractName == "contract_bulk_2"
      - cm_force_replace_provider_contracts.previous.0.relationshipType == "provider"
      - cm_force_replace_provider_contracts.previous.4.contractRef.contractName == "contract_bulk_10"
      - cm_force_replace_provider_contracts.previous.4.relationshipType == "provider"
      - cm_force_replace_provider_contracts.previous.9.contractRef.contractName == "contract_bulk_20"
      - cm_force_replace_provider_contracts.previous.9.relationshipType == "provider"
      - cm_force_replace_provider_contracts.previous.10.contractRef.contractName == "contract_bulk_2"
      - cm_force_replace_provider_contracts.previous.10.relationshipType == "consumer"
      - cm_force_replace_provider_contracts.previous.14.contractRef.contractName == "contract_bulk_10"
      - cm_force_replace_provider_contracts.previous.14.relationshipType == "consumer"
      - cm_force_replace_provider_contracts.previous.19.contractRef.contractName == "contract_bulk_20"
      - cm_force_replace_provider_contracts.previous.19.relationshipType == "consumer"
      - cm_force_replace_provider_contracts.current | length == 20
      - cm_force_replace_provider_contracts.current.0.contractRef.contractName == "contract_bulk_1"
      - cm_force_replace_provider_contracts.current.0.relationshipType == "provider"
      - cm_force_replace_provider_contracts.current.9.contractRef.contractName == "contract_bulk_10"
      - cm_force_replace_provider_contracts.current.9.relationshipType == "provider"
      - cm_force_replace_provider_contracts.current.19.contractRef.contractName == "contract_bulk_20"
      - cm_force_replace_provider_contracts.current.19.relationshipType == "provider"
      - nm_force_replace_provider_contracts is changed
      - nm_force_replace_provider_contracts.previous | length == 20
      - nm_force_replace_provider_contracts.previous.0.contractRef.contractName == "contract_bulk_2"
      - nm_force_replace_provider_contracts.previous.0.relationshipType == "provider"
      - nm_force_replace_provider_contracts.previous.4.contractRef.contractName == "contract_bulk_10"
      - nm_force_replace_provider_contracts.previous.4.relationshipType == "provider"
      - nm_force_replace_provider_contracts.previous.9.contractRef.contractName == "contract_bulk_20"
      - nm_force_replace_provider_contracts.previous.9.relationshipType == "provider"
      - nm_force_replace_provider_contracts.previous.10.contractRef.contractName == "contract_bulk_2"
      - nm_force_replace_provider_contracts.previous.10.relationshipType == "consumer"
      - nm_force_replace_provider_contracts.previous.14.contractRef.contractName == "contract_bulk_10"
      - nm_force_replace_provider_contracts.previous.14.relationshipType == "consumer"
      - nm_force_replace_provider_contracts.previous.19.contractRef.contractName == "contract_bulk_20"
      - nm_force_replace_provider_contracts.previous.19.relationshipType == "consumer"
      - nm_force_replace_provider_contracts.current | length == 20
      - nm_force_replace_provider_contracts.current.0.contractRef.contractName == "contract_bulk_1"
      - nm_force_replace_provider_contracts.current.0.relationshipType == "provider"
      - nm_force_replace_provider_contracts.current.9.contractRef.contractName == "contract_bulk_10"
      - nm_force_replace_provider_contracts.current.9.relationshipType == "provider"
      - nm_force_replace_provider_contracts.current.19.contractRef.contractName == "contract_bulk_20"
      - nm_force_replace_provider_contracts.current.19.relationshipType == "provider"
      - nm_force_replace_provider_contracts_again is not changed
      - nm_force_replace_provider_contracts_again.previous | length == 20
      - nm_force_replace_provider_contracts_again.previous.0.contractRef.contractName == "contract_bulk_1"
      - nm_force_replace_provider_contracts_again.previous.0.relationshipType == "provider"
      - nm_force_replace_provider_contracts_again.previous.9.contractRef.contractName == "contract_bulk_10"
      - nm_force_replace_provider_contracts_again.previous.9.relationshipType == "provider"
      - nm_force_replace_provider_contracts_again.previous.19.contractRef.contractName == "contract_bulk_20"
      - nm_force_replace_provider_contracts_again.previous.19.relationshipType == "provider"
      - nm_force_replace_provider_contracts.current | length == 20
      - nm_force_replace_provider_contracts.current.0.contractRef.contractName == "contract_bulk_1"
      - nm_force_replace_provider_contracts.current.0.relationshipType == "provider"
      - nm_force_replace_provider_contracts.current.9.contractRef.contractName == "contract_bulk_10"
      - nm_force_replace_provider_contracts.current.9.relationshipType == "provider"
      - nm_force_replace_provider_contracts.current.19.contractRef.contractName == "contract_bulk_20"
      - nm_force_replace_provider_contracts.current.19.relationshipType == "provider"
      - nm_force_replace_consumer_contracts.current | length == 20
      - nm_force_replace_consumer_contracts.current.0.contractRef.contractName == "contract_bulk_1"
      - nm_force_replace_consumer_contracts.current.0.relationshipType == "consumer"
      - nm_force_replace_consumer_contracts.current.9.contractRef.contractName == "contract_bulk_10"
      - nm_force_replace_consumer_contracts.current.9.relationshipType == "consumer"
      - nm_force_replace_consumer_contracts.current.19.contractRef.contractName == "contract_bulk_20"
      - nm_force_replace_consumer_contracts.current.19.relationshipType == "consumer"

# QUERY TESTS FOR BULK

- name: Query contracts
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *provider_contracts_append
    contracts: "{{ consumer_contracts_present }}"
    state: query
  register: nm_query_contracts

- name: Query contracts with non existing contracts (error)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *provider_contracts_append
    contracts:
    - name: non_contract_3
      type: provider
    - name: non_contract_3
      type: consumer
    state: query
  register: err_query_contracts
  ignore_errors: true

- name: Verify queries for bulk
  ansible.builtin.assert:
    that:
      - nm_query_contracts is not changed
      - nm_query_contracts.current | length == 20
      - nm_query_contracts.current.0.contractRef.contractName == "contract_bulk_1"
      - nm_query_contracts.current.0.relationshipType == "consumer"
      - nm_query_contracts.current.9.contractRef.contractName == "contract_bulk_10"
      - nm_query_contracts.current.9.relationshipType == "consumer"
      - nm_query_contracts.current.19.contractRef.contractName == "contract_bulk_20"
      - nm_query_contracts.current.19.relationshipType == "consumer"
      - err_query_contracts is failed
      - err_query_contracts.msg.0 is match("Contract with Reference '/schemas/[0-9a-zA-Z]*/templates/template_bulk/contracts/non_contract_3' and type 'provider' not found")
      - err_query_contracts.msg.1 is match("Contract with Reference '/schemas/[0-9a-zA-Z]*/templates/template_bulk/contracts/non_contract_3' and type 'consumer' not found")

# ERROR TESTS FOR BULK

- name: Mutually exclusive contract and contracts (error)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *provider_contracts_append
    contract:
    - name: contract_bulk_1
      type: provider
  register: err_mutually_exclusive_contract_and_contracts
  ignore_errors: true

- name: Mutually exclusive contract and force_replace (error)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *epg_bulk
    contract:
    - name: contract_bulk_1
      type: provider
    force_replace: true
  register: err_mutually_exclusive_contract_and_force_replace
  ignore_errors: true

- name: Missing required attributes for present (error)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *epg_bulk
  register: err_missing_required_attributes_present
  ignore_errors: true

- name: Missing required attributes for absent (error)
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *epg_bulk
    state: absent
  register: err_missing_required_attributes_absent
  ignore_errors: true

- name: Verify queries for bulk
  ansible.builtin.assert:
    that:
      - err_mutually_exclusive_contract_and_contracts is failed
      - err_mutually_exclusive_contract_and_contracts.msg == "parameters are mutually exclusive{{":"}} contract|contracts"
      - err_mutually_exclusive_contract_and_force_replace is failed
      - err_mutually_exclusive_contract_and_force_replace.msg == "parameters are mutually exclusive{{":"}} contract|force_replace"
      - err_missing_required_attributes_present is failed
      - err_missing_required_attributes_present.msg == "state is present but any of the following are missing{{":"}} contract, contracts"
      - err_missing_required_attributes_absent is failed
      - err_missing_required_attributes_absent.msg == "state is absent but any of the following are missing{{":"}} contract, contracts, force_replace"

# FORCE REMOVE ALL CONTRACTS

- name: Force remove all contracts
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *epg_bulk
    force_replace: true
    state: absent
  register: force_remove_all_contracts

- name: Force replace all contracts without existing contracts
  cisco.mso.mso_schema_template_anp_epg_contract:
    <<: *provider_contracts_append
    force_replace: true
  register: force_replace_all_contracts_without_existing_contracts

- name: Verify froce removing all contracts
  ansible.builtin.assert:
    that:
      - force_remove_all_contracts is changed
      - force_remove_all_contracts.previous | length == 20
      - force_remove_all_contracts.current == []
      - force_replace_all_contracts_without_existing_contracts is changed
      - force_replace_all_contracts_without_existing_contracts.previous  == []
      - force_replace_all_contracts_without_existing_contracts.current | length == 20

# CLEAN UP TEST ENVIRONMENT

- name: Remove schemas
  cisco.mso.mso_schema:
    <<: *mso_info
    schema: '{{ item }}'
    state: absent
  loop:
  - '{{ mso_schema | default("ansible_test") }}_2'
  - '{{ mso_schema | default("ansible_test") }}'
