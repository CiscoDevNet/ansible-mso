# Test code for the MSO modules
# Copyright: (c) 2020, Lionel Hercot (@lhercot) <lhercot@cisco.com>
# Copyright: (c) 2018, Dag Wieers (@dagwieers) <dag@wieers.com> (based on mso_site test case)
# 

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI MultiSite host, username and password
  fail:
    msg: 'Please define the following variables: mso_hostname, mso_username and mso_password.'
  when: mso_hostname is not defined or mso_username is not defined or mso_password is not defined


# CLEAN ENVIRONMENT
- name: Set vars
  set_fact: 
    mso_info: &mso_info
      host: '{{ mso_hostname }}'
      username: '{{ mso_username }}'
      password: '{{ mso_password }}'
      validate_certs: '{{ mso_validate_certs | default(false) }}'
      use_ssl: '{{ mso_use_ssl | default(true) }}'
      use_proxy: '{{ mso_use_proxy | default(true) }}'
      output_level: '{{ mso_output_level | default("info") }}'


# - name: Ensure site exist
#   mso_site: &site_present
#     host: '{{ mso_hostname }}'
#     username: '{{ mso_username }}'
#     password: '{{ mso_password }}'
#     validate_certs: '{{ mso_validate_certs | default(false) }}'
#     use_ssl: '{{ mso_use_ssl | default(true) }}'
#     use_proxy: '{{ mso_use_proxy | default(true) }}'
#     output_level: '{{ mso_output_level | default("info") }}'
#     site: '{{ mso_site | default("ansible_test") }}'
#     apic_username: '{{ apic_username }}'
#     apic_password: '{{ apic_password }}'
#     apic_site_id: '{{ apic_site_id | default(101) }}'
#     urls:
#     - https://{{ apic_hostname }}
#     state: present

- name: Remove schemas
  mso_schema:
    <<: *mso_info
    schema: '{{ item }}'
    state: absent
  loop:
  - '{{ mso_schema | default("ansible_test") }}_2'
  - '{{ mso_schema | default("ansible_test") }}'

- name: Ensure tenant ansible_test exist
  mso_tenant: 
    <<: *mso_info
    tenant: ansible_test
    users:
    - '{{ mso_username }}'
    # sites:
    # - '{{ mso_site | default("ansible_test") }}'
    state: present

- name: Ensure schema 1 with Template 1 exist
  mso_schema_template: 
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    tenant: ansible_test
    template: Template 1
    state: present

- name: Ensure schema 1 with Template 2 exist
  mso_schema_template:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    tenant: ansible_test
    template: Template 2
    state: present

- name: Ensure schema 2 with Template 3 exist
  mso_schema_template:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    tenant: ansible_test
    template: Template 3
    state: present

- name: Ensure ANP exist
  mso_schema_template_anp:
    <<: *mso_info
    schema: '{{ item.schema }}'
    template: '{{ item.template }}'
    anp: ANP
    state: present
  loop:
  - { schema: '{{ mso_schema | default("ansible_test") }}', template: 'Template 1' }
  - { schema: '{{ mso_schema | default("ansible_test") }}_2', template: 'Template 3' }

# ADD EPGs
- name: Ensure EPGs exist
  mso_schema_template_anp_epg:
    <<: *mso_info
    schema: '{{ item.schema }}'
    template: '{{ item.template }}'
    anp: ANP
    epg: '{{ item.epg }}'
    state: present
  loop:
  - { schema: '{{ mso_schema | default("ansible_test") }}', template: 'Template 1', epg: 'ansible_test_1' }
  - { schema: '{{ mso_schema | default("ansible_test") }}_2', template: 'Template 3', epg: 'ansible_test_3' }

# ADD Selector to EPG
- name: Add Selector to EPG (check_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_1
    state: present
  check_mode: yes
  register: cm_add_selector_1

- name: Verify cm_add_selector_1
  assert:
    that:
    - cm_add_selector_1 is changed
    - cm_add_selector_1.previous == {}
    - cm_add_selector_1.current.name == "selector_1"
    - cm_add_selector_1.current.expressions == []

- name: Add Selector 1 to EPG with space in selector name (normal_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector 1
    state: present
  ignore_errors: yes
  register: nm_add_selector1_with_space_in_name

- name: Verify nm_add_selector1_with_space_in_name
  assert:
    that:
    - nm_add_selector1_with_space_in_name is not changed
    - nm_add_selector1_with_space_in_name.msg == "There should not be any space in selector name."

- name: Add Selector to EPG (normal_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_1
    state: present
  register: nm_add_selector_1

- name: Verify nm_add_selector_1
  assert:
    that:
    - nm_add_selector_1 is changed
    - nm_add_selector_1.previous == {}
    - nm_add_selector_1.current.name == "selector_1"
    - nm_add_selector_1.current.expressions == []

- name: Add Selector to EPG again (check_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_1
    state: present
  check_mode: yes
  register: cm_add_selector_1_again

- name: Verify cm_add_selector_1_again
  assert:
    that:
    - cm_add_selector_1_again is not changed
    - cm_add_selector_1_again.previous.name == "selector_1"
    - cm_add_selector_1_again.previous.expressions == []
    - cm_add_selector_1_again.current.name == "selector_1"
    - cm_add_selector_1_again.current.expressions == []

- name: Add Selector to EPG again (normal_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_1
    state: present
  register: nm_add_selector_1_again

- name: Verify nm_add_selector_1_again
  assert:
    that:
    - nm_add_selector_1_again is not changed
    - nm_add_selector_1_again.previous.name == "selector_1"
    - nm_add_selector_1_again.previous.expressions == []
    - nm_add_selector_1_again.current.name == "selector_1"
    - nm_add_selector_1_again.current.expressions == []

- name: Add Selector 2 to EPG (check_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_2
    expressions:
      - type: expression_1
        operator: in
        value: test
    state: present
  check_mode: yes
  register: cm_add_selector_2

- name: Verify cm_add_selector_2
  assert:
    that:
    - cm_add_selector_2 is changed
    - cm_add_selector_2.previous == {}
    - cm_add_selector_2.current.name == "selector_2"
    - cm_add_selector_2.current.expressions[0].key == "Custom:expression_1"
    - cm_add_selector_2.current.expressions[0].operator == "in"
    - cm_add_selector_2.current.expressions[0].value == "test"

- name: Add Selector 2 to EPG (normal_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_2
    expressions:
      - type: expression_1
        operator: in
        value: test
    state: present
  register: nm_add_selector_2

- name: Verify nm_add_selector_2
  assert:
    that:
    - nm_add_selector_2 is changed
    - nm_add_selector_2.previous == {}
    - nm_add_selector_2.current.name == "selector_2"
    - nm_add_selector_2.current.expressions[0].key == "Custom:expression_1"
    - nm_add_selector_2.current.expressions[0].operator == "in"
    - nm_add_selector_2.current.expressions[0].value == "test"

- name: Add Selector 2 to EPG with space in expression type (normal_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_2
    expressions:
      - type: expression 1
        operator: in
        value: test
    state: present
  ignore_errors: yes
  register: nm_add_selector2_with_space_in_expression_type

- name: Verify nm_add_selector2_with_space_in_expression_type
  assert:
    that:
    - nm_add_selector2_with_space_in_expression_type is not changed
    - nm_add_selector2_with_space_in_expression_type.msg == "There should not be any space in 'type' attribute of expression 'expression 1'"

- name: Change Selector 2 - keyExist(normal_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_2
    expressions:
      - type: expression_5
        operator: has_key
        value: test
    state: present
  ignore_errors: yes
  register: nm_change_selector_2_key_exist

- name: Verify nm_change_selector_2_key_exist
  assert:
    that:
    - nm_change_selector_2_key_exist is not changed
    - nm_change_selector_2_key_exist.msg == "Attribute 'value' is not supported for operator 'has_key' in expression 'expression_5'"

- name: Change Selector 2 - keyNotExist (normal_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_2
    expressions:
      - type: expression_6
        operator: does_not_have_key
        value: test
    state: present
  ignore_errors: yes
  register: nm_change_selector_2_key_not_exist

- name: Verify nm_change_selector_2_key_not_exist
  assert:
    that:
    - nm_change_selector_2_key_not_exist is not changed
    - nm_change_selector_2_key_not_exist.msg == "Attribute 'value' is not supported for operator 'does_not_have_key' in expression 'expression_6'"

- name: Change Selector 2 - equals (normal_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_2
    expressions:
      - type: expression_6
        operator: equals
    state: present
  ignore_errors: yes
  register: nm_change_selector_2_equals

- name: Verify nm_change_selector_2_equals
  assert:
    that:
    - nm_change_selector_2_equals is not changed
    - nm_change_selector_2_equals.msg == "Attribute 'value' needed for operator 'equals' in expression 'expression_6'"

- name: Change Selector 2 expressions (normal_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_2
    expressions:
      - type: expression_1
        operator: in
        value: test
      - type: expression_2
        operator: not_in
        value: test
      - type: expression_3
        operator: equals
        value: test
      - type: expression_4
        operator: not_equals
        value: test
      - type: expression_5
        operator: has_key
        value: 
      - type: expression_6
        operator: does_not_have_key
    state: present
  register: nm_change_selector_2

- name: Verify nm_change_selector_2
  assert:
    that:
    - nm_change_selector_2 is changed
    - nm_change_selector_2.current.name == "selector_2"
    - nm_change_selector_2.current.expressions | length == 6

- name: Change Selector 2 expressions again (normal_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_2
    expressions:
      - type: expression_1
        operator: in
        value: test
      - type: expression_2
        operator: not_in
        value: test
      - type: expression_3
        operator: equals
        value: test
      - type: expression_4
        operator: not_equals
        value: test
      - type: expression_5
        operator: has_key
        value: 
      - type: expression_6
        operator: does_not_have_key
    state: present
  register: nm_change_selector_2_again

- name: Verify nm_change_selector_2_again
  assert:
    that:
    - nm_change_selector_2_again is not changed
    - nm_change_selector_2_again.current.name == "selector_2"
    - nm_change_selector_2_again.current.expressions | length == 6

- name: Query all selectors (check_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    state: query
  check_mode: yes
  register: cm_query_all_selectors

- name: Verify cm_query_all_selectors
  assert:
    that:
    - cm_query_all_selectors is not changed
    - cm_query_all_selectors.current | length == 2
    - cm_query_all_selectors.current[0].name == "selector_1"
    - cm_query_all_selectors.current[1].name == "selector_2"
    - cm_query_all_selectors.current[0].expressions == []
    - cm_query_all_selectors.current[1].expressions | length == 6

- name: Query all selectors (normal_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    state: query
  register: nm_query_all_selectors

- name: Verify nm_query_all_selectors
  assert:
    that:
    - nm_query_all_selectors is not changed
    - nm_query_all_selectors.current | length == 2
    - nm_query_all_selectors.current[0].name == "selector_1"
    - nm_query_all_selectors.current[1].name == "selector_2"
    - nm_query_all_selectors.current[0].expressions == []
    - nm_query_all_selectors.current[1].expressions | length == 6

- name: Query specific selector (check_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_1
    state: query
  check_mode: yes
  register: cm_query_selector1

- name: Verify cm_query_selector1
  assert:
    that:
    - cm_query_selector1 is not changed
    - cm_query_selector1.current.name == "selector_1"
    - cm_query_selector1.current.expressions == []

- name: Query specific selector (normal_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_1
    state: query
  register: nm_query_selector1

- name: Verify nm_query_selector1
  assert:
    that:
    - nm_query_selector1 is not changed
    - nm_query_selector1.current.name == "selector_1"
    - nm_query_selector1.current.expressions == []

- name: Query specific selector2 (normal_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_2
    state: query
  register: nm_query_selector2

- name: Verify nm_query_selector2
  assert:
    that:
    - nm_query_selector2 is not changed
    - nm_query_selector2.current.name == "selector_2"
    - nm_query_selector2.current.expressions | length == 6
    - nm_query_selector2.current.expressions[0].key == "Custom:expression_1"
    - nm_query_selector2.current.expressions[0].operator == "in"
    - nm_query_selector2.current.expressions[0].value == "test"
    - nm_query_selector2.current.expressions[1].key == "Custom:expression_2"
    - nm_query_selector2.current.expressions[1].operator == "notIn"
    - nm_query_selector2.current.expressions[1].value == "test"
    - nm_query_selector2.current.expressions[2].key == "Custom:expression_3"
    - nm_query_selector2.current.expressions[2].operator == "equals"
    - nm_query_selector2.current.expressions[2].value == "test"
    - nm_query_selector2.current.expressions[3].key == "Custom:expression_4"
    - nm_query_selector2.current.expressions[3].operator == "notEquals"
    - nm_query_selector2.current.expressions[3].value == "test"
    - nm_query_selector2.current.expressions[4].key == "Custom:expression_5"
    - nm_query_selector2.current.expressions[4].operator == "keyExist"
    - nm_query_selector2.current.expressions[4].value == ""
    - nm_query_selector2.current.expressions[5].key == "Custom:expression_6"
    - nm_query_selector2.current.expressions[5].operator == "keyNotExist"
    - nm_query_selector2.current.expressions[5].value == ""

# - name: Remove selector 1 (check_mode)
#   mso_schema_template_anp_epg_selector:
#     <<: *mso_info
#     schema: '{{ mso_schema | default("ansible_test") }}'
#     template: Template 1
#     anp: ANP
#     epg: ansible_test_1
#     selector: selector 1
#     state: absent
#   check_mode: yes
#   register: cm_remove_selector_1

# - name: Verify cm_remove_selector_1
#   assert:
#     that:
#     - cm_remove_selector_1 is changed
#     - cm_remove_selector_1.current == {}

# - name: Remove selector 1 (normal_mode)
#   mso_schema_template_anp_epg_selector:
#     <<: *mso_info
#     schema: '{{ mso_schema | default("ansible_test") }}'
#     template: Template 1
#     anp: ANP
#     epg: ansible_test_1
#     selector: selector 1
#     state: absent
#   register: nm_remove_selector_1

# - name: Verify nm_remove_selector_1
#   assert:
#     that:
#     - nm_remove_selector_1 is changed
#     - nm_remove_selector_1.current == {}

- name: Remove selector 2 (normal_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_2
    state: absent
  register: nm_remove_selector_2

- name: Verify nm_remove_selector_2
  assert:
    that:
    - nm_remove_selector_2 is changed
    - nm_remove_selector_2.current == {}

# QUERY NON-EXISTING Selector to EPG
- name: Query non-existing selector (check_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: non_existing_selector
    state: query
  check_mode: yes
  ignore_errors: yes
  register: cm_query_non_selector

- name: Query non-existing selector (normal mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: non_existing_selector
    state: query
  ignore_errors: yes
  register: nm_query_non_selector

- name: Verify cm_query_non_selector and nm_query_non_selector
  assert:
    that:
    - cm_query_non_selector is not changed
    - nm_query_non_selector is not changed
    - cm_query_non_selector == nm_query_non_selector
    - cm_query_non_selector.msg == "Selector 'non_existing_selector' not found"
    - nm_query_non_selector.msg == "Selector 'non_existing_selector' not found"

# QUERY NON-EXISTING EPG
- name: Query non-existing EPG (check_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: non_existing_epg
    selector: selector_1
    state: query
  check_mode: yes
  ignore_errors: yes
  register: cm_query_non_epg

- name: Query non-existing EPG (normal mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: non_existing_epg
    selector: selector_1
    state: query
  ignore_errors: yes
  register: nm_query_non_epg

- name: Verify query_non_epg
  assert:
    that:
    - cm_query_non_epg is not changed
    - nm_query_non_epg is not changed
    - cm_query_non_epg == nm_query_non_epg
    - cm_query_non_epg.msg == nm_query_non_epg.msg == "Provided epg 'non_existing_epg' does not exist. Existing epgs{{':'}} ansible_test_1"

# QUERY NON-EXISTING ANP
- name: Query non-existing ANP (check_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: non_existing_anp
    epg: ansible_test_1
    selector: selector_1
    state: query
  check_mode: yes
  ignore_errors: yes
  register: cm_query_non_anp

- name: Query non-existing ANP (normal mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: non_existing_anp
    epg: ansible_test_1
    selector: selector_1
    state: query
  ignore_errors: yes
  register: nm_query_non_anp

- name: Verify query_non_anp
  assert:
    that:
    - cm_query_non_anp is not changed
    - nm_query_non_anp is not changed
    - cm_query_non_anp == nm_query_non_anp
    - cm_query_non_anp.msg == nm_query_non_anp.msg == "Provided anp 'non_existing_anp' does not exist. Existing anps{{':'}} ANP"

# USE A NON-EXISTING STATE
- name: Non-existing state (check_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_1
    state: non-existing-state
  check_mode: yes
  ignore_errors: yes
  register: cm_non_existing_state

- name: Non-existing state (normal_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_1
    state: non-existing-state
  ignore_errors: yes
  register: nm_non_existing_state

- name: Verify non_existing_state
  assert:
    that:
    - cm_non_existing_state is not changed
    - nm_non_existing_state is not changed
    - cm_non_existing_state == nm_non_existing_state
    - cm_non_existing_state.msg == nm_non_existing_state.msg == "value of state must be one of{{':'}} absent, present, query, got{{':'}} non-existing-state"

# USE A NON-EXISTING TEMPLATE
- name: Non-existing template (check_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: non-existing-template
    anp: ANP
    epg: ansible_test_1
    selector: selector_1
    state: query
  check_mode: yes
  ignore_errors: yes
  register: cm_non_existing_template

- name: Non-existing template (normal_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: non-existing-template
    anp: ANP
    epg: ansible_test_1
    selector: selector_1
    state: query
  ignore_errors: yes
  register: nm_non_existing_template

- name: Verify non_existing_template
  assert:
    that:
    - cm_non_existing_template is not changed
    - nm_non_existing_template is not changed
    - cm_non_existing_template == nm_non_existing_template
    - cm_non_existing_template.msg == nm_non_existing_template.msg == "Provided template 'non-existing-template' does not exist. Existing templates{{':'}} Template1, Template2"

# USE A NON-EXISTING SCHEMA
- name: Non-existing schema (check_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: non-existing-schema
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_1
    state: query
  check_mode: yes
  ignore_errors: yes
  register: cm_non_existing_schema

- name: Non-existing schema (normal_mode)
  mso_schema_template_anp_epg_selector:
    <<: *mso_info
    schema: non-existing-schema
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    selector: selector_1
    state: query
  ignore_errors: yes
  register: nm_non_existing_schema

- name: Verify non_existing_schema
  assert:
    that:
    - cm_non_existing_schema is not changed
    - nm_non_existing_schema is not changed
    - cm_non_existing_schema == nm_non_existing_schema
    - cm_non_existing_schema.msg == nm_non_existing_schema.msg == "Provided schema 'non-existing-schema' does not exist."