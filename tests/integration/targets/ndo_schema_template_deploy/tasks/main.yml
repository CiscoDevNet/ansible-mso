# Test code for the MSO modules
# Copyright: (c) 2022, Akini Ross (@akinross) <akinross@cisco.com>

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI MultiSite host, username and password
  ansible.builtin.fail:
    msg: 'Please define the following variables: mso_hostname, mso_username and mso_password.'
  when: mso_hostname is not defined or mso_username is not defined or mso_password is not defined


# CLEAN ENVIRONMENT
- name: Set vars
  ansible.builtin.set_fact:
    mso_info: &mso_info
      host: '{{ mso_hostname }}'
      username: '{{ mso_username }}'
      password: '{{ mso_password }}'
      validate_certs: '{{ mso_validate_certs | default(false) }}'
      use_ssl: '{{ mso_use_ssl | default(true) }}'
      use_proxy: '{{ mso_use_proxy | default(true) }}'
      output_level: '{{ mso_output_level | default("info") }}'

- name: Query MSO version
  cisco.mso.mso_version:
    <<: *mso_info
    state: query
  register: version

- name: Ensure site exist
  cisco.mso.mso_site:
    <<: *mso_info
    site: '{{ mso_site | default("ansible_test") }}'
    apic_username: '{{ apic_username }}'
    apic_password: '{{ apic_password }}'
    apic_site_id: '{{ apic_site_id | default(101) }}'
    urls:
    - https://{{ apic_hostname }}
    state: present

- name: Ensure aws site exists
  cisco.mso.mso_site:
    <<: *mso_info
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    apic_username: '{{ aws_apic_username }}'
    apic_password: '{{ aws_apic_password }}'
    apic_site_id: '{{ aws_site_id | default(102) }}'
    urls:
    - https://{{ aws_apic_hostname }}
    state: present

- name: Ensure azure site exists
  cisco.mso.mso_site:
    <<: *mso_info
    site: 'azure_{{ mso_site | default("ansible_test") }}'
    apic_username: '{{ azure_apic_username }}'
    apic_password: '{{ azure_apic_password }}'
    apic_site_id: '{{ azure_site_id | default(103) }}'
    urls:
    - https://{{ azure_apic_hostname }}
    state: present

- name: Undeploy template
  cisco.mso.ndo_schema_template_deploy:
    <<: *mso_info
    schema: ansible_test
    template: "{{ item }}"
    sites:
      - '{{ mso_site | default("ansible_test") }}'
    state: undeploy
  ignore_errors: true
  loop:
    - Template 1
    - Template 2

- name: Remove schemas
  cisco.mso.mso_schema:
    <<: *mso_info
    schema: '{{ item }}'
    state: absent
  loop:
  - '{{ mso_schema | default("ansible_test") }}_2'
  - '{{ mso_schema | default("ansible_test") }}'

- name: Ensure tenant ansible_test exists
  cisco.mso.mso_tenant: 
    <<: *mso_info
    tenant: ansible_test
    users:
      - '{{ mso_username }}'
    sites:
    - '{{ mso_site | default("ansible_test") }}'
    state: present

- name: Ensure schema 1 with Template 1, and Template 2 exist
  cisco.mso.mso_schema_template:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    tenant: ansible_test
    template: '{{ item }}'
    state: present
  loop:
  - Template 1
  - Template 2

- name: Add physical site to a schema
  cisco.mso.mso_schema_site:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: '{{ mso_site | default("ansible_test") }}'
    template: '{{ item }}'
    state: present
  loop:
  - Template 1
  - Template 2

- name: Deploy templates (check_mode)
  cisco.mso.ndo_schema_template_deploy:
    <<: *mso_info
    schema: ansible_test
    template: "{{ item }}"
    sites:
      - '{{ mso_site | default("ansible_test") }}'
    state: deploy
  check_mode: true
  register: cm_deploy_template
  loop:
  - Template 1
  - Template 2

- name: Verify cm_deploy_template
  ansible.builtin.assert:
    that:
    - item is not changed
  loop: "{{ cm_deploy_template.results }}"

- name: Deploy templates (normal_mode)
  cisco.mso.ndo_schema_template_deploy:
    <<: *mso_info
    schema: ansible_test
    template: "{{ item }}"
    sites:
      - '{{ mso_site | default("ansible_test") }}'
    state: deploy
  register: nm_deploy_template
  loop:
  - Template 1
  - Template 2

- name: Verify nm_deploy_template 
  ansible.builtin.assert:
    that:
    - item is not changed
    - '"isRedeploy" not in item.current.reqDetails'
  loop: "{{ nm_deploy_template.results }}"

- name: Verify nm_deploy_template 4.0 specific
  ansible.builtin.assert:
    that:
    - '"deploy" in item.current.reqDetails'
  loop: "{{ nm_deploy_template.results }}"
  when: version.current.version is version('4.0', '>=')

- name: Query deployment
  cisco.mso.ndo_schema_template_deploy: 
    <<: *mso_info
    schema: ansible_test
    template: "{{ item }}"
    state: query
  register: query_deploy_status
  loop:
  - Template 1
  - Template 2

- name: Verify query_deploy_status
  ansible.builtin.assert:
    that:
    - item is not changed
    - item.current.status.0.status.siteStatus == "Succeeded"
  loop: "{{ query_deploy_status.results }}"

- name: Redeploy templates
  cisco.mso.ndo_schema_template_deploy:
    <<: *mso_info
    schema: ansible_test
    template: '{{ item }}'
    sites:
      - '{{ mso_site | default("ansible_test") }}'
    state: redeploy
  register: redeploy_template
  loop:
    - Template 1
    - Template 2

- name: Verify redeploy_template
  ansible.builtin.assert:
    that:
    - item is not changed
    - item.current.reqDetails.isRedeploy == true
  loop: "{{ redeploy_template.results }}"

- name: Verify redeploy_template 4.0 specific
  ansible.builtin.assert:
    that:
    - '"deploy" in item.current.reqDetails'
  loop: "{{ redeploy_template.results }}"
  when: version.current.version is version('4.0', '>=')

- name: Undeploy templates
  cisco.mso.ndo_schema_template_deploy:
    <<: *mso_info
    schema: ansible_test
    template: '{{ item }}'
    sites:
      - '{{ mso_site | default("ansible_test") }}'
    state: undeploy
  register: undeploy_template
  loop:
    - Template 1
    - Template 2

- name: Verify undeploy_template
  assert:
    that:
    - item is not changed
    - '"undeploy" in item.current.reqDetails'
  loop: "{{ undeploy_template.results }}"

- name: Add VRF1 with validation error
  cisco.mso.mso_schema_template_vrf: &fail_validation
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 2
    vrf: VRF1
    layer3_multicast: true
    vzany: true
    state: present

- name: Deploy template with validation error
  cisco.mso.ndo_schema_template_deploy:
    <<: *mso_info
    schema: ansible_test
    template: Template 2
    sites:
      - '{{ mso_site | default("ansible_test") }}'
    state: deploy
  register: failed_validaton_deploy
  ignore_errors: true

- name: Redeploy template with validation error
  cisco.mso.ndo_schema_template_deploy:
    <<: *mso_info
    schema: ansible_test
    template: Template 2
    sites:
      - '{{ mso_site | default("ansible_test") }}'
    state: redeploy
  register: failed_validaton_redeploy
  ignore_errors: true

- name: Verify validation errors before deploy
  ansible.builtin.assert:
    that:
    - failed_validaton_deploy.msg == "MSO Error 400{{':'}} Bad Request{{':'}} Patch Failed, Received{{':'}} vzAny contract must be configured if vzAny flag is set. VRF(s) {{':'}} VRF1 exception while trying to update schema"
    - failed_validaton_redeploy.msg == "MSO Error 400{{':'}} Bad Request{{':'}} Patch Failed, Received{{':'}} vzAny contract must be configured if vzAny flag is set. VRF(s) {{':'}} VRF1 exception while trying to update schema"
  when: version.current.version is version('4.0', '<')

- name: Verify validation errors before deploy and redploy
  ansible.builtin.assert:
    that:
    - failed_validaton_deploy.msg ==  "MSO Error 400{{':'}} VRF{{':'}} VRF1 in Schema{{':'}} ansible_test , Template{{':'}} Template2 has VzAnyEnabled flag enabled but is not consuming or providing contracts"
    - failed_validaton_redeploy.msg ==  "MSO Error 400{{':'}} VRF{{':'}} VRF1 in Schema{{':'}} ansible_test , Template{{':'}} Template2 has VzAnyEnabled flag enabled but is not consuming or providing contracts"
  when: version.current.version is version('4.0', '>=')

- name: Remove VRF1 with validation error
  cisco.mso.mso_schema_template_vrf:
    <<: *fail_validation
    state: absent

- name: Ensure AWS site is present under tenant ansible_test
  cisco.mso.mso_tenant_site:
    <<: *mso_info
    tenant: ansible_test
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    cloud_account: '000000000000'
    aws_access_key: 1
    secret_key: 0
    state: present

- name: Ensure Azure site is present under tenant ansible_test
  cisco.mso.mso_tenant_site:
    <<: *mso_info
    tenant: ansible_test
    site: 'azure_{{ mso_site | default("ansible_test") }}'
    cloud_account: uni/tn-ansible_test/act-[9]-vendor-azure
    state: present

- name: Add AWS site to a schema
  cisco.mso.mso_schema_site:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'aws_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    state: present

- name: Add Azure site to a schema
  cisco.mso.mso_schema_site:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    site: 'azure_{{ mso_site | default("ansible_test") }}'
    template: Template 1
    state: present

- name: Deploy templates
  cisco.mso.ndo_schema_template_deploy:
    <<: *mso_info
    schema: ansible_test
    template: Template 1
    sites: 
      - '{{ mso_site | default("ansible_test") }}'
      - 'aws_{{ mso_site | default("ansible_test") }}'
      - 'azure_{{ mso_site | default("ansible_test") }}'
    state: deploy
  register: deploy_template_all

- name: Query deployment
  cisco.mso.ndo_schema_template_deploy: 
    <<: *mso_info
    schema: ansible_test
    template: Template 1
    state: query
  register: query_deploy_status_all

- name: Check deployment status of Template 1
  cisco.mso.mso_schema_template_deploy_status:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    state: query
  register: deployment_status

- name: Redeploy templates
  cisco.mso.ndo_schema_template_deploy:
    <<: *mso_info
    schema: ansible_test
    template: Template 1
    sites: 
      - '{{ mso_site | default("ansible_test") }}'
      - 'aws_{{ mso_site | default("ansible_test") }}'
      - 'azure_{{ mso_site | default("ansible_test") }}'
    state: redeploy
  register: redeploy_template_all

- name: Query redeployment
  cisco.mso.ndo_schema_template_deploy: 
    <<: *mso_info
    schema: ansible_test
    template: Template 1
    state: query
  register: query_redeploy_status_all

- name: Undeploy templates
  cisco.mso.ndo_schema_template_deploy:
    <<: *mso_info
    schema: ansible_test
    template: Template 1
    sites: 
      - '{{ mso_site | default("ansible_test") }}'
      - 'aws_{{ mso_site | default("ansible_test") }}'
      - 'azure_{{ mso_site | default("ansible_test") }}'
    state: undeploy
  register: undeploy_template_all

- name: Query undeployment
  cisco.mso.ndo_schema_template_deploy: 
    <<: *mso_info
    schema: ansible_test
    template: Template 1
    state: query
  register: query_undeploy_status_all

- name: Verify multiple sites
  ansible.builtin.assert:
    that:
    - deploy_template_all is not changed
    - redeploy_template_all is not changed
    - '"isRedeploy" in redeploy_template_all.current.reqDetails'
    - undeploy_template_all is not changed
    - '"undeploy" in undeploy_template_all.current.reqDetails'
    - undeploy_template_all.current.reqDetails.undeploy | length == 3
    - deployment_status.current | length == 3
    - query_deploy_status_all.current.status | length == 3
    - query_deploy_status_all.current.status.0.status.siteStatus == "Succeeded"
    - query_deploy_status_all.current.status.1.status.siteStatus == "Succeeded"
    - query_deploy_status_all.current.status.2.status.siteStatus == "Succeeded"
    - query_redeploy_status_all.current.status | length == 3
    - query_redeploy_status_all.current.status.0.status.siteStatus == "Succeeded"
    - query_redeploy_status_all.current.status.1.status.siteStatus == "Succeeded"
    - query_redeploy_status_all.current.status.2.status.siteStatus == "Succeeded"
    - query_undeploy_status_all.current.status == []

- name: Verify multiple sites 4.0 specific
  ansible.builtin.assert:
    that:
    - '"deploy" in deploy_template_all.current.reqDetails'
    - '"deploy" in redeploy_template_all.current.reqDetails'
  when: version.current.version is version('4.0', '>=')