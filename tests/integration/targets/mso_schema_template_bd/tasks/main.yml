# Test code for the MSO modules
# Copyright: (c) 2020, Lionel Hercot (@lhercot) <lhercot@cisco.com>
# Copyright: (c) 2018, Dag Wieers (@dagwieers) <dag@wieers.com> (based on mso_site test case)
#

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI MultiSite host, username and password
  fail:
    msg: 'Please define the following variables: mso_hostname, mso_username and mso_password.'
  when: mso_hostname is not defined or mso_username is not defined or mso_password is not defined


# CLEAN ENVIRONMENT
- name: Set vars
  set_fact:
    mso_info: &mso_info
      host: '{{ mso_hostname }}'
      username: '{{ mso_username }}'
      password: '{{ mso_password }}'
      validate_certs: '{{ mso_validate_certs | default(false) }}'
      use_ssl: '{{ mso_use_ssl | default(true) }}'
      use_proxy: '{{ mso_use_proxy | default(true) }}'
      output_level: '{{ mso_output_level | default("info") }}'

- name: Query MSO version
  mso_version:
    <<: *mso_info
    state: query
  register: version

- name: Set version vars
  set_fact:
    mso_l3mcast: false
  when: version.current.version is version('2.2.4', '=')

- name: Ensure site exist
  mso_site: &site_present
    <<: *mso_info
    site: '{{ mso_site | default("ansible_test") }}'
    apic_username: '{{ apic_username }}'
    apic_password: '{{ apic_password }}'
    apic_site_id: '{{ apic_site_id | default(101) }}'
    urls:
    - https://{{ apic_hostname }}
    state: present

- name: Remove schemas
  mso_schema:
    <<: *mso_info
    schema: '{{ item }}'
    state: absent
  loop:
  - '{{ mso_schema | default("ansible_test") }}_2'
  - '{{ mso_schema | default("ansible_test") }}'

- name: Remove DHCP policies
  mso_dhcp_relay_policy:
    <<: *mso_info
    dhcp_relay_policy: '{{ item }}'
    tenant: ansible_test
    state: absent
  loop:
  - 'ansible_test_dhcp_policy1'
  - 'ansible_test_dhcp_policy2'
  - 'ansible_test_dhcp_policy3'
  when:
  # TODO dhcp policies api endpoint has changed after 4.0, fix when new module is created
  - version.current.version is version('4.0', '<')

- name: Remove DHCP option policies
  mso_dhcp_option_policy:
    <<: *mso_info
    dhcp_option_policy: '{{ item }}'
    tenant: ansible_test
    state: absent
  loop:
  - 'ansible_test_dhcp_policy_option1'
  - 'ansible_test_dhcp_policy_option2'
  - 'ansible_test_dhcp_policy_option3'
  when:
  # TODO dhcp policies api endpoint has changed after 4.0, fix when new module is created
  - version.current.version is version('4.0', '<')

- name: Ensure tenant ansible_test exist
  mso_tenant: &tenant_present
    <<: *mso_info
    tenant: ansible_test
    users:
    - '{{ mso_username }}'
    sites:
    - '{{ mso_site | default("ansible_test") }}'
    state: present

- name: Ensure schema 1 with Template1 exist
  mso_schema_template: &schema_present
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    tenant: ansible_test
    template: Template1
    state: present

- name: Ensure schema 1 with Template2 exists
  mso_schema_template:
    <<: *schema_present
    schema: '{{ mso_schema | default("ansible_test") }}'
    tenant: ansible_test
    template: Template2

- name: Ensure schema 2 with Template3 exists
  mso_schema_template:
    <<: *schema_present
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    tenant: ansible_test
    template: Template3

- name: Ensure schema 2 with Template5 exists
  mso_schema_template:
    <<: *schema_present
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    tenant: ansible_test
    template: Template5

- name: Ensure VRF exist
  mso_schema_template_vrf: &vrf_present
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    vrf: VRF
    layer3_multicast: true
    state: present

- name: Ensure VRF2 exist
  mso_schema_template_vrf:
    <<: *vrf_present
    vrf: VRF2

- name: Ensure VRF3 exist
  mso_schema_template_vrf:
    <<: *vrf_present
    template: Template2
    vrf: VRF3

- name: Ensure VRF4 exist
  mso_schema_template_vrf:
    <<: *vrf_present
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template3
    vrf: VRF4

- name: Ensure VRF5 exists
  mso_schema_template_vrf:
    <<: *vrf_present
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template5
    vrf: VRF5

- name: Ensure ansible_test_1 BD does not exist
  mso_schema_template_bd:
    <<: *vrf_present
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    bd: ansible_test_1
    vrf:
      name: VRF
    state: absent

- name: Ensure ansible_test_2 BD does not exist
  mso_schema_template_bd:
    <<: *vrf_present
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template2
    bd: ansible_test_2
    vrf:
      name: VRF
    state: absent

- name: Ensure ansible_test_3 BD does not exist
  mso_schema_template_bd:
    <<: *vrf_present
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template3
    bd: ansible_test_3
    vrf:
      name: VRF
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template1
    state: absent

- name: Ensure ansible_test_4 BD does not exist
  mso_schema_template_bd:
    <<: *vrf_present
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    bd: ansible_test_4
    vrf:
      name: VRF
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template1
    state: absent

- name: Ensure multiple DHCP policies exist
  mso_dhcp_relay_policy:
    <<: *mso_info
    dhcp_relay_policy: '{{ item }}'
    description: "My Test DHCP Policies"
    tenant: ansible_test
    state: present
  loop:
  - 'ansible_test_dhcp_policy1'
  - 'ansible_test_dhcp_policy2'
  - 'ansible_test_dhcp_policy3'
  when:
  # TODO dhcp policies api endpoint has changed after 4.0, fix when new module is created
  - version.current.version is version('4.0', '<')

- name: Ensure multiple DHCP option policies exist
  mso_dhcp_option_policy:
    <<: *mso_info
    dhcp_option_policy: '{{ item }}'
    description: "My Test DHCP Policy Options"
    tenant: ansible_test
    state: present
  loop:
  - 'ansible_test_dhcp_policy_option1'
  - 'ansible_test_dhcp_policy_option2'
  - 'ansible_test_dhcp_policy_option3'
  when:
  # TODO dhcp policies api endpoint has changed after 4.0, fix when new module is created
  - version.current.version is version('4.0', '<')

# ADD BD
- name: Add bd (check_mode)
  mso_schema_template_bd: &bd_present
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    bd: ansible_test_1
    vrf:
      name: VRF
    state: present
  check_mode: true
  register: cm_add_bd

- name: Verify cm_add_bd
  assert:
    that:
    - cm_add_bd is changed
    - cm_add_bd.previous == {}
    - cm_add_bd.current.name == "ansible_test_1"
    - cm_add_bd.current.vrfRef.templateName == "Template1"
    - cm_add_bd.current.vrfRef.vrfName == "VRF"

- name: Add bd (normal mode)
  mso_schema_template_bd:
    <<: *bd_present
  register: nm_add_bd

- name: Verify nm_add_bd
  assert:
    that:
    - nm_add_bd is changed
    - nm_add_bd.previous == {}
    - nm_add_bd.current.name == "ansible_test_1"
    - nm_add_bd.current.vrfRef.templateName == "Template1"
    - nm_add_bd.current.vrfRef.vrfName == "VRF"
    - cm_add_bd.current.vrfRef.schemaId ==  nm_add_bd.current.vrfRef.schemaId

- name: Add bd again (check_mode)
  mso_schema_template_bd:
    <<: *bd_present
  check_mode: true
  register: cm_add_bd_again

- name: Verify cm_add_bd_again
  assert:
    that:
    - cm_add_bd_again is not changed
    - cm_add_bd_again.previous.name == "ansible_test_1"
    - cm_add_bd_again.current.name == "ansible_test_1"
    - cm_add_bd_again.previous.vrfRef.templateName == "Template1"
    - cm_add_bd_again.current.vrfRef.templateName == "Template1"
    - cm_add_bd_again.previous.vrfRef.vrfName == "VRF"
    - cm_add_bd_again.current.vrfRef.vrfName == "VRF"
    - cm_add_bd_again.previous.vrfRef.schemaId ==  cm_add_bd_again.current.vrfRef.schemaId

- name: Add bd again (normal mode)
  mso_schema_template_bd:
    <<: *bd_present
  register: nm_add_bd_again

- name: Verify nm_add_bd_again
  assert:
    that:
    - nm_add_bd_again is not changed
    - nm_add_bd_again.previous.name == "ansible_test_1"
    - nm_add_bd_again.current.name == "ansible_test_1"
    - nm_add_bd_again.previous.vrfRef.templateName == "Template1"
    - nm_add_bd_again.current.vrfRef.templateName == "Template1"
    - nm_add_bd_again.previous.vrfRef.vrfName == "VRF"
    - nm_add_bd_again.current.vrfRef.vrfName == "VRF"
    - nm_add_bd_again.previous.vrfRef.schemaId ==  nm_add_bd_again.current.vrfRef.schemaId

- name: Add bd 2 (normal mode)
  mso_schema_template_bd:
    <<: *bd_present
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template2
    bd: ansible_test_2
    intersite_bum_traffic: true
    optimize_wan_bandwidth: true
    layer2_stretch: true
    layer2_unknown_unicast: flood
    layer3_multicast: true
    subnets:
    - subnet: 10.0.0.128/24
    - subnet: 10.0.1.254/24
      description: 1234567890
    - subnet: 172.16.0.1/24
      description: "My description for a subnet"
      scope: public
      shared: true
      no_default_gateway: false
      querier: true
    - ip: 192.168.0.254/24
      description: "My description for a subnet"
      scope: private
      shared: false
      no_default_gateway: true
    vrf:
      name: VRF3
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template2
    dhcp_policy:
      name: ansible_test
      version: 1
      dhcp_option_policy:
        name: ansible_test_option
        version: 1
  register: nm_add_bd_2

- name: Add bd 3 (normal mode)
  mso_schema_template_bd:
    <<: *bd_present
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template3
    bd: ansible_test_3
    vrf:
      name: VRF4
      schema: '{{ mso_schema | default("ansible_test") }}_2'
      template: Template3
  register: nm_add_bd_3

- name: Add bd 4 (normal mode)
  mso_schema_template_bd:
    <<: *bd_present
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    bd: ansible_test_4
    vrf:
      name: VRF
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template1
  register: nm_add_bd_4

- name: Verify nm_add_bd_2 and nm_add_bd_3
  assert:
    that:
    - nm_add_bd_2 is changed
    - nm_add_bd_3 is changed
    - nm_add_bd_2.current.name == "ansible_test_2"
    - nm_add_bd_3.current.name == "ansible_test_3"
    - nm_add_bd_2.current.vrfRef.templateName == "Template2"
    - nm_add_bd_3.current.vrfRef.templateName == "Template3"
    - nm_add_bd_2.current.vrfRef.vrfName == "VRF3"
    - nm_add_bd_3.current.vrfRef.vrfName == "VRF4"
    - nm_add_bd_2.current.vrfRef.schemaId == nm_add_bd.current.vrfRef.schemaId
    - nm_add_bd_2.current.intersiteBumTrafficAllow == true
    - nm_add_bd_2.current.optimizeWanBandwidth == true
    - nm_add_bd_2.current.l2Stretch == true
    - nm_add_bd_2.current.l2UnknownUnicast == "flood"
    - nm_add_bd_2.current.l3MCast == true
    - nm_add_bd_2.current.subnets[0].description == "10.0.0.128/24"
    - nm_add_bd_2.current.subnets[0].ip == "10.0.0.128/24"
    - nm_add_bd_2.current.subnets[0].noDefaultGateway == false
    - nm_add_bd_2.current.subnets[0].scope == "private"
    - nm_add_bd_2.current.subnets[0].shared == false
    - nm_add_bd_2.current.subnets[0].querier == false
    - nm_add_bd_2.current.subnets[1].description == "1234567890"
    - nm_add_bd_2.current.subnets[1].ip == "10.0.1.254/24"
    - nm_add_bd_2.current.subnets[1].noDefaultGateway == false
    - nm_add_bd_2.current.subnets[1].scope == "private"
    - nm_add_bd_2.current.subnets[1].shared == false
    - nm_add_bd_2.current.subnets[1].querier == false
    - nm_add_bd_2.current.subnets[2].description == "My description for a subnet"
    - nm_add_bd_2.current.subnets[2].ip == "172.16.0.1/24"
    - nm_add_bd_2.current.subnets[2].noDefaultGateway == false
    - nm_add_bd_2.current.subnets[2].scope == "public"
    - nm_add_bd_2.current.subnets[2].shared == true
    - nm_add_bd_2.current.subnets[2].querier == true
    - nm_add_bd_2.current.subnets[3].description == "My description for a subnet"
    - nm_add_bd_2.current.subnets[3].ip == "192.168.0.254/24"
    - nm_add_bd_2.current.subnets[3].noDefaultGateway == true
    - nm_add_bd_2.current.subnets[3].scope == "private"
    - nm_add_bd_2.current.subnets[3].shared == false
    - nm_add_bd_2.current.subnets[3].querier == false

- name: Add bd 5 (normal mode)
  mso_schema_template_bd:
    <<: *bd_present
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template5
    bd: ansible_test_5
    intersite_bum_traffic: true
    optimize_wan_bandwidth: true
    layer2_stretch: true
    layer2_unknown_unicast: flood
    layer3_multicast: false
    unknown_multicast_flooding: flood
    multi_destination_flooding: drop
    ipv6_unknown_multicast_flooding: flood
    arp_flooding: true
    virtual_mac_address: 00:00:5E:00:01:3C
    vrf:
      name: VRF5
      schema: '{{ mso_schema | default("ansible_test") }}_2'
      template: Template5
    dhcp_policy:
      name: ansible_test
      version: 1
      dhcp_option_policy:
        name: ansible_test_option
        version: 1
  register: nm_add_bd_5

- name: Verify nm_add_bd_5 for a version that's before 3.1
  assert:
    that:
    - nm_add_bd_5 is changed
    - nm_add_bd_5.current.name == "ansible_test_5"
    - nm_add_bd_5.current.vrfRef.templateName == "Template5"
    - nm_add_bd_5.current.vrfRef.vrfName == "VRF5"
    - nm_add_bd_5.current.intersiteBumTrafficAllow == true
    - nm_add_bd_5.current.optimizeWanBandwidth == true
    - nm_add_bd_5.current.l2Stretch == true
    - nm_add_bd_5.current.l2UnknownUnicast == "flood"
    - nm_add_bd_5.current.l3MCast == false
  when: version.current.version is version('3.1.1g', '<')

- name: Verify nm_add_bd_5 for a version that's 3.1
  assert:
    that:
    - nm_add_bd_5 is changed
    - nm_add_bd_5.current.name == "ansible_test_5"
    - nm_add_bd_5.current.vrfRef.templateName == "Template5"
    - nm_add_bd_5.current.vrfRef.vrfName == "VRF5"
    - nm_add_bd_5.current.intersiteBumTrafficAllow == true
    - nm_add_bd_5.current.optimizeWanBandwidth == true
    - nm_add_bd_5.current.l2Stretch == true
    - nm_add_bd_5.current.l2UnknownUnicast == "flood"
    - nm_add_bd_5.current.l3MCast == false
    - nm_add_bd_5.current.unkMcastAct == "flood"
    - nm_add_bd_5.current.v6unkMcastAct == "flood"
    - nm_add_bd_5.current.vmac == "00:00:5E:00:01:3C"
    - nm_add_bd_5.current.multiDstPktAct == "drop"
    - nm_add_bd_5.current.arpFlood == true
  when: version.current.version is version('3.1.1g', '>=')

- name: Add bd 5 again (normal mode)
  mso_schema_template_bd:
    <<: *bd_present
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template5
    bd: ansible_test_5
    intersite_bum_traffic: true
    optimize_wan_bandwidth: true
    layer2_stretch: true
    layer2_unknown_unicast: flood
    layer3_multicast: false
    unknown_multicast_flooding: flood
    multi_destination_flooding: drop
    ipv6_unknown_multicast_flooding: flood
    arp_flooding: true
    virtual_mac_address: 00:00:5E:00:01:3C
    vrf:
      name: VRF5
      schema: '{{ mso_schema | default("ansible_test") }}_2'
      template: Template5
    dhcp_policy:
      name: ansible_test
      version: 1
      dhcp_option_policy:
        name: ansible_test_option
        version: 1
  register: nm_add_again_bd_5

- name: Verify nm_add_again_bd_5 for a version that's before 3.1
  assert:
    that:
    - nm_add_again_bd_5 is not changed
  when: version.current.version is version('3.1.1g', '<')

- name: Verify nm_add_again_bd_5 for a version that's between 3.1 and 4.0
  assert:
    that:
    - nm_add_again_bd_5 is not changed
  when:
    - version.current.version is version('3.1.1g', '>=')

- name: Add bd 5 with different values for new options (normal mode)
  mso_schema_template_bd:
    <<: *bd_present
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template5
    bd: ansible_test_5
    intersite_bum_traffic: true
    optimize_wan_bandwidth: true
    layer2_stretch: true
    layer2_unknown_unicast: flood
    layer3_multicast: false
    unknown_multicast_flooding: optimized_flooding
    multi_destination_flooding: flood_in_bd
    ipv6_unknown_multicast_flooding: optimized_flooding
    arp_flooding: true
    virtual_mac_address: 00:00:5E:00:02:3C
    vrf:
      name: VRF5
      schema: '{{ mso_schema | default("ansible_test") }}_2'
      template: Template5
    dhcp_policy:
      name: ansible_test
      version: 1
      dhcp_option_policy:
        name: ansible_test_option
        version: 1
  register: nm_bd_5_options

- name: Verify nm_bd_5_options for a version that's before 3.1
  assert:
    that:
    - nm_bd_5_options is not changed
  when: version.current.version is version('3.1.1g', '<')

- name: Verify nm_bd_5_options for a version that's 3.1
  assert:
    that:
    - nm_bd_5_options is changed
    - nm_bd_5_options.current.unkMcastAct == "opt-flood"
    - nm_bd_5_options.current.v6unkMcastAct == "opt-flood"
    - nm_bd_5_options.current.multiDstPktAct == "bd-flood"
    - nm_bd_5_options.current.vmac == "00:00:5E:00:02:3C"
  when: version.current.version is version('3.1.1g', '>=')

- name: Change bd 5_1 (normal mode)
  mso_schema_template_bd:
    <<: *bd_present
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template5
    bd: ansible_test_5
    intersite_bum_traffic: true
    optimize_wan_bandwidth: true
    layer2_stretch: true
    layer2_unknown_unicast: proxy
    layer3_multicast: false
    unknown_multicast_flooding: flood
    multi_destination_flooding: drop
    ipv6_unknown_multicast_flooding: flood
    arp_flooding: true
    virtual_mac_address: 00:00:5E:00:01:3C
    vrf:
      name: VRF5
      schema: '{{ mso_schema | default("ansible_test") }}_2'
      template: Template5
    dhcp_policy:
      name: ansible_test
      version: 1
      dhcp_option_policy:
        name: ansible_test_option
        version: 1
  register: nm_change_bd_5_1

- name: Verify nm_change_bd_5_1 for a version that's before 3.1
  assert:
    that:
    - nm_change_bd_5_1 is changed
  when: version.current.version is version('3.1.1g', '<')

- name: Verify nm_change_bd_5_1 for a version that's 3.1
  assert:
    that:
    - nm_change_bd_5_1 is changed
    - nm_change_bd_5_1.current.arpFlood == true
  when: version.current.version is version('3.1.1g', '>=')

- name: Change bd 5_2 (normal mode)
  mso_schema_template_bd: &change_bd5_2
    <<: *bd_present
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template5
    bd: ansible_test_5
    intersite_bum_traffic: true
    optimize_wan_bandwidth: true
    layer2_stretch: true
    layer2_unknown_unicast: flood
    layer3_multicast: false
    unknown_multicast_flooding: flood
    multi_destination_flooding: drop
    ipv6_unknown_multicast_flooding: flood
    arp_flooding: false
    virtual_mac_address: 00:00:5E:00:01:3C
    vrf:
      name: VRF5
      schema: '{{ mso_schema | default("ansible_test") }}_2'
      template: Template5
    dhcp_policy:
      name: ansible_test
      version: 1
      dhcp_option_policy:
        name: ansible_test_option
        version: 1
  ignore_errors: true
  register: nm_change_bd_5_2

- name: Verify nm_change_bd_5_2 for a version that's before 3.1
  assert:
    that:
    - nm_change_bd_5_2 is changed
    - nm_change_bd_5_2.current.l2UnknownUnicast == "flood"
  when: version.current.version is version('3.1.1g', '<')

- name: Verify nm_change_bd_5_2 for a version that's after 3.1
  assert:
    that:
    - nm_change_bd_5_2 is changed
    - nm_change_bd_5_2.current.arpFlood == true
  when: version.current.version is version('3.1.1g', '>=')

- name: Change bd 5_3 (normal mode)
  mso_schema_template_bd:
    <<: *bd_present
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template5
    bd: ansible_test_5
    intersite_bum_traffic: false
    optimize_wan_bandwidth: true
    layer2_stretch: true
    layer2_unknown_unicast: flood
    layer3_multicast: false
    unknown_multicast_flooding: flood
    multi_destination_flooding: drop
    ipv6_unknown_multicast_flooding: flood
    arp_flooding: false
    virtual_mac_address: 00:00:5E:00:01:3C
    vrf:
      name: VRF5
      schema: '{{ mso_schema | default("ansible_test") }}_2'
      template: Template5
    dhcp_policy:
      name: ansible_test
      version: 1
      dhcp_option_policy:
        name: ansible_test_option
        version: 1
  ignore_errors: true
  register: nm_change_bd_5_3

- name: Verify nm_change_bd_5_3 for a version that's before 3.1
  assert:
    that:
    - nm_change_bd_5_3 is changed
    - nm_change_bd_5_3.msg is match ("MSO Error 143{{':'}} Invalid Field{{':'}} BD 'ansible_test_5' l2UnknownUnicast cannot be flood when intersiteBumTrafficAllow is off")
  when: version.current.version is version('3.1.1g', '<')

- name: Verify nm_change_bd_5_3 for a version that's after 3.1 and before 3.3
  assert:
    that:
    - nm_change_bd_5_3 is changed
    # Inconsistency shown in returned error messages for v3.1.1
    # Below variants of the message output have occurred randomly, thus commenting out the specific error messages below.
    # Would need further investigation in to the cause, but due to old version decided to skip this investigation and do skip the message skip.
    # - "'l2UnknownUnicast cannot be flood when intersiteBumTrafficAllow is off exception while trying to update schema' in nm_change_bd_5_3.msg"
    # - nm_change_bd_5_3.msg is match ("MSO Error 400{{':'}} Bad Request{{':'}} Patch Failed, Received{{':'}} BD 'ansible_test_5' {{':'}} ARP Flooding has to be disabled if L2 Stretch enabled and BUM traffic disabled exception while trying to update schema")
    # - nm_change_bd_5_3.msg is match ("MSO Error 400{{':'}} Bad Request{{':'}} Patch Failed, Received{{':'}} Template 'Template5', BD 'ansible_test_5' {{':'}} ARP Flooding has to be disabled if L2 Stretch enabled and BUM traffic disabled exception while trying to update schema")
  when:
  - version.current.version is version('3.3', '<')
  - version.current.version is version('3.1.1g', '>=')

- name: Verify nm_change_bd_5_3 for a version that's after 4.0
  assert:
    that:
    - nm_change_bd_5_3 is changed
    - nm_change_bd_5_3.msg is match ("MSO Error 400{{':'}} BD{{':'}} ansible_test_5 in Schema{{':'}} ansible_test_2 , Template{{':'}} Template5 BD ansible_test_5 l2UnknownUnicast cannot be flood when intersiteBumTrafficAllow is off")
  when:
  - version.current.version is version('4.0', '>=')

- name: Get Validation status
  mso_schema_validate:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    state: query
  ignore_errors: true
  register: query_validate
  when:
  - version.current.version is version('3.3', '>=')
  - version.current.version is version('4.0', '<') # mso_schema_validate not needed after 4.0 because validation is done upon request

- name: Verify query_validate for a version that's after 3.3
  assert:
    that:
    - query_validate is not changed
    - query_validate.msg is match ("MSO Error 400{{':'}} Bad Request{{':'}} Patch Failed, Received{{':'}} Template 'Template5', BD 'ansible_test_5' {{':'}} ARP Flooding has to be disabled if L2 Stretch enabled and BUM traffic disabled exception while trying to update schema")
  when:
  - version.current.version is version('3.3', '>=')
  - version.current.version is version('3.7', '<')

# Reverting back to bd 5_2
- name: Change bd 5_3 (normal mode)
  mso_schema_template_bd:
    <<: *change_bd5_2
  register: nm_change_bd_5_3_again
  when: query_validate is failed

- name: Get Validation status
  mso_schema_validate:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    state: query
  register: query_validate
  when:
    - version.current.version is version('3.3', '>=')
    - version.current.version is version('4.0', '<') # mso_schema_validate not needed after 4.0 because validation is done upon request

- name: Change bd 5 for query (normal mode)
  mso_schema_template_bd:
    <<: *bd_present
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template5
    bd: ansible_test_5
    intersite_bum_traffic: true
    optimize_wan_bandwidth: true
    layer2_stretch: true
    layer2_unknown_unicast: flood
    layer3_multicast: false
    unknown_multicast_flooding: flood
    multi_destination_flooding: drop
    ipv6_unknown_multicast_flooding: flood
    arp_flooding: true
    virtual_mac_address: 00:00:5E:00:01:3C
    vrf:
      name: VRF5
      schema: '{{ mso_schema | default("ansible_test") }}_2'
      template: Template5
    dhcp_policy:
      name: ansible_test
      version: 1
      dhcp_option_policy:
        name: ansible_test_option
        version: 1

# CHANGE BD
- name: Change bd (check_mode)
  mso_schema_template_bd:
    <<: *bd_present
    vrf:
      name: VRF2
  check_mode: true
  register: cm_change_bd

- name: Verify cm_change_bd
  assert:
    that:
    - cm_change_bd is changed
    - cm_change_bd.current.name == 'ansible_test_1'
    - cm_change_bd.current.vrfRef.vrfName == 'VRF2'
    - cm_change_bd.current.vrfRef.templateName == "Template1"
    - cm_change_bd.current.vrfRef.schemaId == cm_change_bd.previous.vrfRef.schemaId

- name: Change bd (normal mode)
  mso_schema_template_bd:
    <<: *bd_present
    vrf:
      name: VRF2
    output_level: debug
  register: nm_change_bd

- name: Verify nm_change_bd
  assert:
    that:
    - nm_change_bd is changed
    - nm_change_bd.current.name == 'ansible_test_1'
    - nm_change_bd.current.vrfRef.vrfName == 'VRF2'
    - nm_change_bd.current.vrfRef.templateName == "Template1"
    - nm_change_bd.current.vrfRef.schemaId == nm_change_bd.previous.vrfRef.schemaId

- name: Change bd again (check_mode)
  mso_schema_template_bd:
    <<: *bd_present
    vrf:
      name: VRF2
  check_mode: true
  register: cm_change_bd_again

- name: Verify cm_change_bd_again
  assert:
    that:
    - cm_change_bd_again is not changed
    - cm_change_bd_again.current.name == 'ansible_test_1'
    - cm_change_bd_again.current.vrfRef.vrfName == 'VRF2'
    - cm_change_bd_again.current.vrfRef.templateName == "Template1"
    - cm_change_bd_again.current.vrfRef.schemaId == cm_change_bd_again.previous.vrfRef.schemaId

- name: Change bd again (normal mode)
  mso_schema_template_bd:
    <<: *bd_present
    vrf:
      name: VRF2
  register: nm_change_bd_again

- name: Verify nm_change_bd_again
  assert:
    that:
    - nm_change_bd_again is not changed
    - nm_change_bd_again.current.name == 'ansible_test_1'
    - nm_change_bd_again.current.vrfRef.vrfName == 'VRF2'
    - nm_change_bd_again.current.vrfRef.templateName == "Template1"
    - nm_change_bd_again.current.vrfRef.schemaId == nm_change_bd_again.previous.vrfRef.schemaId

- name: Change bd to VRF3 in other template (normal mode)
  mso_schema_template_bd:
    <<: *bd_present
    vrf:
      name: VRF3
      template: Template2
  register: nm_change_bd_vrf3

- name: Change bd to VRF4 in other schema (normal mode)
  mso_schema_template_bd:
    <<: *bd_present
    vrf:
      name: VRF4
      schema: '{{ mso_schema | default("ansible_test") }}_2'
      template: Template3
  register: nm_change_bd_vrf4

- name: Verify nm_change_bd_vrf3 and nm_change_bd_vrf4
  assert:
    that:
    - nm_change_bd_vrf3 is changed
    - nm_change_bd_vrf3.current.name == nm_change_bd_vrf4.current.name == 'ansible_test_1'
    - nm_change_bd_vrf3.current.vrfRef.vrfName == 'VRF3'
    - nm_change_bd_vrf3.current.vrfRef.templateName == "Template2"
    - nm_change_bd_vrf4.current.vrfRef.vrfName == 'VRF4'
    - nm_change_bd_vrf4.current.vrfRef.templateName == "Template3"

- name: Change bd 1 settings(normal mode)
  mso_schema_template_bd:
    <<: *bd_present
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    bd: ansible_test_1
    intersite_bum_traffic: true
    optimize_wan_bandwidth: true
    layer2_stretch: true
    layer2_unknown_unicast: flood
    layer3_multicast: '{{ mso_l3mcast | default(true) }}'
    subnets:
    - subnet: 10.1.0.128/24
    - subnet: 10.1.1.254/24
      description: 1234567890
    - subnet: 172.17.0.1/24
      description: "My description for a subnet"
      scope: public
      shared: true
      no_default_gateway: false
      querier: true
    - ip: 192.168.1.254/24
      description: "My description for a subnet"
      scope: private
      shared: false
      no_default_gateway: true
    vrf:
      name: VRF3
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template2
  register: nm_change_bd_1_settings

- name: Change bd 1 subnets (normal mode)
  mso_schema_template_bd:
    <<: *bd_present
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    bd: ansible_test_1
    intersite_bum_traffic: true
    optimize_wan_bandwidth: true
    layer2_stretch: true
    layer2_unknown_unicast: flood
    layer3_multicast: '{{ mso_l3mcast | default(true) }}'
    subnets:
    - subnet: 10.1.0.127/24
    - subnet: 172.17.0.1/24
      description: "New description for a subnet"
      scope: private
      shared: false
      no_default_gateway: false
      querier: false
    - ip: 192.168.1.254/24
      description: "My description for a subnet"
      scope: private
      shared: false
      no_default_gateway: false
      querier: true
    vrf:
      name: VRF3
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template2
  register: nm_change_bd_1_subnets

- name: Verify nm_change_bd_1_subnets
  assert:
    that:
    - nm_change_bd_1_settings is changed
    - nm_change_bd_1_settings.current.name == "ansible_test_1"
    - nm_change_bd_1_settings.current.vrfRef.templateName == "Template2"
    - nm_change_bd_1_settings.current.vrfRef.vrfName == "VRF3"
    - nm_change_bd_1_settings.current.intersiteBumTrafficAllow == true
    - nm_change_bd_1_settings.current.optimizeWanBandwidth == true
    - nm_change_bd_1_settings.current.l2Stretch == true
    - nm_change_bd_1_settings.current.l2UnknownUnicast == "flood"
    - nm_change_bd_1_settings.current.subnets[0].description == "10.1.0.128/24"
    - nm_change_bd_1_settings.current.subnets[0].ip == "10.1.0.128/24"
    - nm_change_bd_1_settings.current.subnets[0].noDefaultGateway == false
    - nm_change_bd_1_settings.current.subnets[0].scope == "private"
    - nm_change_bd_1_settings.current.subnets[0].shared == false
    - nm_change_bd_1_settings.current.subnets[0].querier == false
    - nm_change_bd_1_settings.current.subnets[1].description == "1234567890"
    - nm_change_bd_1_settings.current.subnets[1].ip == "10.1.1.254/24"
    - nm_change_bd_1_settings.current.subnets[1].noDefaultGateway == false
    - nm_change_bd_1_settings.current.subnets[1].scope == "private"
    - nm_change_bd_1_settings.current.subnets[1].shared == false
    - nm_change_bd_1_settings.current.subnets[1].querier == false
    - nm_change_bd_1_settings.current.subnets[2].description == "My description for a subnet"
    - nm_change_bd_1_settings.current.subnets[2].ip == "172.17.0.1/24"
    - nm_change_bd_1_settings.current.subnets[2].noDefaultGateway == false
    - nm_change_bd_1_settings.current.subnets[2].scope == "public"
    - nm_change_bd_1_settings.current.subnets[2].shared == true
    - nm_change_bd_1_settings.current.subnets[2].querier == true
    - nm_change_bd_1_settings.current.subnets[3].description == "My description for a subnet"
    - nm_change_bd_1_settings.current.subnets[3].ip == "192.168.1.254/24"
    - nm_change_bd_1_settings.current.subnets[3].noDefaultGateway == true
    - nm_change_bd_1_settings.current.subnets[3].scope == "private"
    - nm_change_bd_1_settings.current.subnets[3].shared == false
    - nm_change_bd_1_settings.current.subnets[3].querier == false
    - nm_change_bd_1_settings is changed
    - nm_change_bd_1_subnets.current.subnets | length == 3
    - nm_change_bd_1_subnets.current.name == "ansible_test_1"
    - nm_change_bd_1_subnets.current.vrfRef.templateName == "Template2"
    - nm_change_bd_1_subnets.current.vrfRef.vrfName == "VRF3"
    - nm_change_bd_1_subnets.current.intersiteBumTrafficAllow == true
    - nm_change_bd_1_subnets.current.optimizeWanBandwidth == true
    - nm_change_bd_1_subnets.current.l2Stretch == true
    - nm_change_bd_1_subnets.current.l2UnknownUnicast == "flood"
    - nm_change_bd_1_subnets.current.subnets[0].description == "10.1.0.127/24"
    - nm_change_bd_1_subnets.current.subnets[0].ip == "10.1.0.127/24"
    - nm_change_bd_1_subnets.current.subnets[0].noDefaultGateway == false
    - nm_change_bd_1_subnets.current.subnets[0].scope == "private"
    - nm_change_bd_1_subnets.current.subnets[0].shared == false
    - nm_change_bd_1_subnets.current.subnets[0].querier == false
    - nm_change_bd_1_subnets.current.subnets[1].description == "New description for a subnet"
    - nm_change_bd_1_subnets.current.subnets[1].ip == "172.17.0.1/24"
    - nm_change_bd_1_subnets.current.subnets[1].noDefaultGateway == false
    - nm_change_bd_1_subnets.current.subnets[1].scope == "private"
    - nm_change_bd_1_subnets.current.subnets[1].shared == false
    - nm_change_bd_1_subnets.current.subnets[1].querier == false
    - nm_change_bd_1_subnets.current.subnets[2].description == "My description for a subnet"
    - nm_change_bd_1_subnets.current.subnets[2].ip == "192.168.1.254/24"
    - nm_change_bd_1_subnets.current.subnets[2].noDefaultGateway == false
    - nm_change_bd_1_subnets.current.subnets[2].scope == "private"
    - nm_change_bd_1_subnets.current.subnets[2].shared == false
    - nm_change_bd_1_subnets.current.subnets[2].querier == true

- name: Verify l3MCast nm_change_bd_1_subnets (version == 2.2.4)
  assert:
    that:
    - nm_change_bd_1_settings.current.l3MCast == false
    - nm_change_bd_1_subnets.current.l3MCast == false
  when: version.current.version is version('2.2.4', '=')

- name: Verify l3MCast nm_change_bd_1_subnets (version != 2.2.4)
  assert:
    that:
    - nm_change_bd_1_settings.current.l3MCast == true
    - nm_change_bd_1_subnets.current.l3MCast == true
  when: version.current.version is version('2.2.4', '!=')

- name: Add bd with multiple dhcp policies for mso version > 3.1.1g
  mso_schema_template_bd:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    bd: ansible_test_multiple_dhcp
    intersite_bum_traffic: true
    optimize_wan_bandwidth: false
    layer2_stretch: true
    layer2_unknown_unicast: flood
    layer3_multicast: false
    unknown_multicast_flooding: flood
    multi_destination_flooding: drop
    ipv6_unknown_multicast_flooding: flood
    arp_flooding: false
    virtual_mac_address: 00:00:5E:00:01:3C
    subnets:
    - subnet: 10.0.0.128/24
    - subnet: 10.0.1.254/24
      description: 1234567890
    - ip: 192.168.0.254/24
      description: "My description for a subnet"
      scope: private
      shared: false
      no_default_gateway: true
    vrf:
      name: VRF
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template1
    dhcp_policies:
      - name: ansible_test_dhcp_policy1
        version: 1
        dhcp_option_policy:
          name: ansible_test_dhcp_policy_option1
          version: 1
      - name: ansible_test_dhcp_policy2
        version: 1
        dhcp_option_policy:
          name: ansible_test_dhcp_policy_option1
          version: 1
      - name: ansible_test_dhcp_policy3
        version: 1
        dhcp_option_policy:
          name: ansible_test_dhcp_policy_option2
          version: 1
    state: present
  register: nm_bd_dhcp_policies
  when:
  - version.current.version is version('3.1.1g', '>')
  # TODO dhcp policies api endpoint has changed after 4.0, fix when new module is created
  - version.current.version is version('4.0', '<')

- name: Verify addition of DHCP policies for mso version > 3.1.1g
  assert:
    that:
    - nm_bd_dhcp_policies is changed
    - nm_bd_dhcp_policies.current.dhcpLabels | length == 3
    - nm_bd_dhcp_policies.current.dhcpLabels[0].name == 'ansible_test_dhcp_policy1'
    - nm_bd_dhcp_policies.current.dhcpLabels[1].name == 'ansible_test_dhcp_policy2'
    - nm_bd_dhcp_policies.current.dhcpLabels[2].name == 'ansible_test_dhcp_policy3'
    - nm_bd_dhcp_policies.current.dhcpLabels[0].version == 1
    - nm_bd_dhcp_policies.current.dhcpLabels[1].version == 1
    - nm_bd_dhcp_policies.current.dhcpLabels[2].version == 1
    - nm_bd_dhcp_policies.current.dhcpLabels[0].dhcpOptionLabel.name == 'ansible_test_dhcp_policy_option1'
    - nm_bd_dhcp_policies.current.dhcpLabels[1].dhcpOptionLabel.name == 'ansible_test_dhcp_policy_option1'
    - nm_bd_dhcp_policies.current.dhcpLabels[2].dhcpOptionLabel.name == 'ansible_test_dhcp_policy_option2'
    - nm_bd_dhcp_policies.current.dhcpLabels[0].dhcpOptionLabel.version == 1
    - nm_bd_dhcp_policies.current.dhcpLabels[1].dhcpOptionLabel.version == 1
    - nm_bd_dhcp_policies.current.dhcpLabels[2].dhcpOptionLabel.version == 1
  when:
    - version.current.version is version('3.1.1g', '>')
    # TODO dhcp policies api endpoint has changed after 4.0, fix when new module is created
    - version.current.version is version('4.0', '<')

- name: Change bd with multiple dhcp policies for mso version > 3.1.1g
  mso_schema_template_bd:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    bd: ansible_test_multiple_dhcp
    intersite_bum_traffic: true
    optimize_wan_bandwidth: false
    layer2_stretch: true
    layer2_unknown_unicast: flood
    layer3_multicast: false
    unknown_multicast_flooding: flood
    multi_destination_flooding: drop
    ipv6_unknown_multicast_flooding: flood
    arp_flooding: false
    virtual_mac_address: 00:00:5E:00:01:3C
    subnets:
    - subnet: 10.0.0.128/24
    - subnet: 10.0.1.254/24
      description: 1234567890
    - ip: 192.168.0.254/24
      description: "My description for a subnet"
      scope: private
      shared: false
      no_default_gateway: true
    vrf:
      name: VRF
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template1
    dhcp_policies:
      - name: ansible_test_dhcp_policy1
        version: 1
        dhcp_option_policy:
          name: ansible_test_dhcp_policy_option1
          version: 1
      - name: ansible_test_dhcp_policy2
        version: 1
        dhcp_option_policy:
          name: ansible_test_dhcp_policy_option1
          version: 1
    state: present
  register: change_nm_bd_dhcp_policies
  when:
    - version.current.version is version('3.1.1g', '>')
    # TODO dhcp policies api endpoint has changed after 4.0, fix when new module is created
    - version.current.version is version('4.0', '<')

- name: Verify change in DHCP policies for mso version > 3.1.1g
  assert:
    that:
    - change_nm_bd_dhcp_policies is changed
    - change_nm_bd_dhcp_policies.current.dhcpLabels | length == 2
    - change_nm_bd_dhcp_policies.current.dhcpLabels[0].name == 'ansible_test_dhcp_policy1'
    - change_nm_bd_dhcp_policies.current.dhcpLabels[1].name == 'ansible_test_dhcp_policy2'
    - change_nm_bd_dhcp_policies.current.dhcpLabels[0].version == 1
    - change_nm_bd_dhcp_policies.current.dhcpLabels[1].version == 1
    - change_nm_bd_dhcp_policies.current.dhcpLabels[0].dhcpOptionLabel.name == 'ansible_test_dhcp_policy_option1'
    - change_nm_bd_dhcp_policies.current.dhcpLabels[1].dhcpOptionLabel.name == 'ansible_test_dhcp_policy_option1'
    - change_nm_bd_dhcp_policies.current.dhcpLabels[0].dhcpOptionLabel.version == 1
    - change_nm_bd_dhcp_policies.current.dhcpLabels[1].dhcpOptionLabel.version == 1
  when:
    - version.current.version is version('3.1.1g', '>')
    # TODO dhcp policies api endpoint has changed after 4.0, fix when new module is created
    - version.current.version is version('4.0', '<')

# Add BD with new options for mso version > 3.1.1g
- name: Add bd with new options available in mso versions > 3.1.1g
  mso_schema_template_bd:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    bd: ansible_test_new_options
    intersite_bum_traffic: true
    optimize_wan_bandwidth: false
    layer2_stretch: true
    layer2_unknown_unicast: flood
    layer3_multicast: false
    unknown_multicast_flooding: flood
    multi_destination_flooding: drop
    ipv6_unknown_multicast_flooding: flood
    arp_flooding: false
    virtual_mac_address: 00:00:5E:00:01:3C
    unicast_routing: true
    subnets:
    - subnet: 10.0.0.128/24
    - subnet: 10.0.1.254/24
      description: 1234567890
    - ip: 192.168.0.254/24
      description: "My description for a subnet"
      scope: private
      shared: false
      no_default_gateway: true
      virtual: true
      primary: true
    vrf:
      name: VRF
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template1
    state: present
  register: nm_bd_new_subnet_options
  when: version.current.version is version('3.1.1g', '>')

- name: Verify subnets in nm_bd_new_subnet_options
  assert:
    that:
    - nm_bd_new_subnet_options is changed
    - nm_bd_new_subnet_options.current.name == 'ansible_test_new_options'
    - nm_bd_new_subnet_options.current.vrfRef.templateName == "Template1"
    - nm_bd_new_subnet_options.current.vrfRef.vrfName == "VRF"
    - nm_bd_new_subnet_options.current.intersiteBumTrafficAllow == true
    - nm_bd_new_subnet_options.current.optimizeWanBandwidth == false
    - nm_bd_new_subnet_options.current.l2Stretch == true
    - nm_bd_new_subnet_options.current.l2UnknownUnicast == "flood"
    - nm_bd_new_subnet_options.current.unkMcastAct == "flood"
    - nm_bd_new_subnet_options.current.multiDstPktAct == "drop"
    - nm_bd_new_subnet_options.current.l3MCast == false
    - nm_bd_new_subnet_options.current.arpFlood == true
    - nm_bd_new_subnet_options.current.v6unkMcastAct == "flood"
    - nm_bd_new_subnet_options.current.vmac == "00:00:5E:00:01:3C"
    - nm_bd_new_subnet_options.current.unicastRouting == true
    - nm_bd_new_subnet_options.current.subnets[1].primary == false
    - nm_bd_new_subnet_options.current.subnets[0].virtual == false
    - nm_bd_new_subnet_options.current.subnets[2].primary == true
    - nm_bd_new_subnet_options.current.subnets[2].virtual == true
  when: version.current.version is version('3.1.1g', '>')

# Change BD with new options for mso version > 3.1.1g
- name: Try Changing bd with another subnet to primary IP
  mso_schema_template_bd:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    bd: ansible_test_new_options
    intersite_bum_traffic: true
    optimize_wan_bandwidth: false
    layer2_stretch: true
    layer2_unknown_unicast: flood
    layer3_multicast: false
    unknown_multicast_flooding: flood
    multi_destination_flooding: drop
    ipv6_unknown_multicast_flooding: flood
    arp_flooding: false
    virtual_mac_address: 00:00:5E:00:01:3C
    unicast_routing: true
    subnets:
    - subnet: 10.0.0.128/24
    - subnet: 10.0.1.254/24
      description: 1234567890
      primary: true
    - ip: 192.168.0.254/24
      description: "My description for a subnet"
      scope: private
      shared: false
      no_default_gateway: true
      virtual: true
      primary: true
    vrf:
      name: VRF
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template1
    state: present
  register: nm_bd_subnet_second_primary
  ignore_errors: true
  when: version.current.version is version('3.1.1g', '>')

- name: Verify subnets in nm_bd_subnet_second_primary
  assert:
    that:
    - nm_bd_subnet_second_primary.msg is match ("MSO Error 400{{':'}} Bad Request{{':'}} Patch Failed, Received{{':'}} Only one preferred subnet per address family is allowed under BD ansible_test_new_options of Template Template1 exception while trying to update schema")
  when:
  - version.current.version is version('3.1.1g', '>')
  - version.current.version is version('3.3', '<')

- name: Add bd with new option flood in encap available in mso versions > 3.1.1g with l2 set to true
  mso_schema_template_bd:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    bd: ansible_test_flood_encap
    intersite_bum_traffic: true
    optimize_wan_bandwidth: false
    layer2_stretch: true
    layer2_unknown_unicast: flood
    layer3_multicast: false
    unknown_multicast_flooding: flood
    multi_destination_flooding: encap-flood
    ipv6_unknown_multicast_flooding: flood
    unicast_routing: true
    vrf:
      name: VRF
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template1
    state: present
  ignore_errors: true
  register: nm_bd_new_encap_flood_non
  when: version.current.version is version('3.1.1g', '>')

- name: Verify nm_bd_new_encap_flood_non
  assert:
    that:
    - nm_bd_new_encap_flood_non.msg is match ("MSO Error 400{{':'}} Bad Request{{':'}} Patch Failed, Received{{':'}} Template 'Template1', BD 'ansible_test_flood_encap' {{':'}} Multi destination flood in encapsulation is only supported when l2Stretch is disabled exception while trying to update schema")
  when:
  - version.current.version is version('3.1.1g', '>')
  - version.current.version is version('3.3', '<')

- name: Add bd with new option flood in encap available in mso versions > 3.1.1g l2 set to false
  mso_schema_template_bd:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    bd: ansible_test_flood_encap
    layer2_stretch: false
    layer2_unknown_unicast: flood
    unknown_multicast_flooding: flood
    multi_destination_flooding: encap-flood
    ipv6_unknown_multicast_flooding: flood
    unicast_routing: true
    intersite_bum_traffic: false
    vrf:
      name: VRF
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template1
    state: present
  register: nm_bd_new_encap_flood
  when: version.current.version is version('3.1.1g', '>')

- name: Verify nm_bd_new_encap_flood
  assert:
    that:
    - nm_bd_new_encap_flood.current.multiDstPktAct == "encap-flood"
  when: version.current.version is version('3.1.1g', '>')

- name: Add bd with new option description in mso versions >= 3.3
  mso_schema_template_bd:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    bd: ansible_test_description
    description: ansible_test_bd
    layer2_stretch: true
    layer2_unknown_unicast: proxy
    unknown_multicast_flooding: flood
    ipv6_unknown_multicast_flooding: flood
    unicast_routing: true
    vrf:
      name: VRF
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template1
    state: present
  register: nm_bd_desc
  when: version.current.version is version('3.3', '>=')

- name: Verify nm_bd_desc
  assert:
    that:
    - nm_bd_desc.current.description == "ansible_test_bd"
  when: version.current.version is version('3.3', '>=')

- name: Add bd with change in description in mso versions >= 3.3
  mso_schema_template_bd:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    bd: ansible_test_description
    description: ansible_test_bd_again
    layer2_stretch: true
    layer2_unknown_unicast: proxy
    unknown_multicast_flooding: flood
    ipv6_unknown_multicast_flooding: flood
    unicast_routing: true
    vrf:
      name: VRF
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template1
    state: present
  register: nm_bd_desc_2
  when: version.current.version is version('3.3', '>=')

- name: Verify nm_bd_desc_2
  assert:
    that:
    - nm_bd_desc_2.current.description == "ansible_test_bd_again"
  when: version.current.version is version('3.3', '>=')

- name: Ensure bd ansible_test_unicast_false is removed >= 3.1.1g
  mso_schema_template_bd:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    bd: ansible_test_unicast_false
    state: absent
  when: version.current.version is version('3.1.1g', '>')

- name: Ensure bd ansible_test_unicast_true is removed >= 3.1.1g
  mso_schema_template_bd:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    bd: ansible_test_unicast_true
    state: absent
  when: version.current.version is version('3.1.1g', '>')

- name: Add bd with change in unicast routing false in mso versions >= 3.1.1g (check mode)
  mso_schema_template_bd: &unicast_routing_false_present
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    bd: ansible_test_unicast_false
    unicast_routing: false
    vrf:
      name: VRF
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template1
    state: present
  check_mode: true
  register: cm_ansible_test_unicast_false
  when: version.current.version is version('3.1.1g', '>')

- name: Add bd with change in unicast routing false in mso versions >= 3.1.1g
  mso_schema_template_bd:
    <<: *unicast_routing_false_present
  register: nm_ansible_test_unicast_false
  when: version.current.version is version('3.1.1g', '>')

- name: Add bd again with unicast routing false in mso versions >= 3.1.1g
  mso_schema_template_bd:
    <<: *unicast_routing_false_present
  register: nm_ansible_test_unicast_false_again
  when: version.current.version is version('3.1.1g', '>')

- name: Change bd with unicast routing to true in mso versions >= 3.1.1g
  mso_schema_template_bd:
    <<: *unicast_routing_false_present
    unicast_routing: true
  register: nm_ansible_test_unicast_false_to_true
  when: version.current.version is version('3.1.1g', '>')

- name: Add bd with change in unicast routing true in mso versions >= 3.1.1g (check mode)
  mso_schema_template_bd: &unicast_routing_true_present
    <<: *unicast_routing_false_present
    bd: ansible_test_unicast_true
    unicast_routing: true
  check_mode: true
  register: cm_ansible_test_unicast_true
  when: version.current.version is version('3.1.1g', '>')

- name: Add bd with change in unicast routing true in mso versions >= 3.1.1g
  mso_schema_template_bd:
    <<: *unicast_routing_true_present
  register: nm_ansible_test_unicast_true
  when: version.current.version is version('3.1.1g', '>')

- name: Add bd again with unicast routing true in mso versions >= 3.1.1g
  mso_schema_template_bd:
    <<: *unicast_routing_true_present
  register: nm_ansible_test_unicast_true_again
  when: version.current.version is version('3.1.1g', '>')

- name: Change bd with unicast routing to false in mso versions >= 3.1.1g
  mso_schema_template_bd:
    <<: *unicast_routing_true_present
    unicast_routing: false
  register: nm_ansible_test_unicast_true_to_false
  when: version.current.version is version('3.1.1g', '>')

- name: Verify unicast routing
  assert:
    that:
      - cm_ansible_test_unicast_false is changed
      - cm_ansible_test_unicast_false.current.unicastRouting == false
      - nm_ansible_test_unicast_false is changed
      - nm_ansible_test_unicast_false.current.unicastRouting == false
      - nm_ansible_test_unicast_false_again is not changed
      - nm_ansible_test_unicast_false_again.previous.unicastRouting == false
      - nm_ansible_test_unicast_false_again.current.unicastRouting == false
      - nm_ansible_test_unicast_false_to_true is changed
      - nm_ansible_test_unicast_false_to_true.current.unicastRouting == true
      - cm_ansible_test_unicast_true is changed
      - cm_ansible_test_unicast_true.current.unicastRouting == true
      - nm_ansible_test_unicast_true is changed
      - nm_ansible_test_unicast_true.current.unicastRouting == true
      - nm_ansible_test_unicast_true_again is not changed
      - nm_ansible_test_unicast_true_again.previous.unicastRouting == true
      - nm_ansible_test_unicast_true_again.current.unicastRouting == true
      - nm_ansible_test_unicast_true_to_false is changed
      - nm_ansible_test_unicast_true_to_false.current.unicastRouting == false
  when: version.current.version is version('3.1.1g', '>')

- name: Remove bd with change in unicast routing false in mso versions >= 3.1.1g
  mso_schema_template_bd:
    <<: *unicast_routing_false_present
    state: absent
  register: ansible_test_unicast_false
  when: version.current.version is version('3.1.1g', '>')

- name: Remove bd with change in unicast routing true in mso versions >= 3.1.1g
  mso_schema_template_bd:
    <<: *unicast_routing_true_present
    state: absent
  register: ansible_test_unicast_true
  when: version.current.version is version('3.1.1g', '>')

# FIXME: Add missing DHCP Policy changes and checks (missing DHCP Policy module to make sure it is there.)

# QUERY ALL BD
- name: Query all bd (check_mode)
  mso_schema_template_bd: &bd_query
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    state: query
  check_mode: true
  register: cm_query_all_bds

- name: Query all bd (normal mode)
  mso_schema_template_bd:
    <<: *bd_query
  register: nm_query_all_bds

- name: Verify query_all_bds for version < 3.1.1g
  assert:
    that:
    - cm_query_all_bds is not changed
    - nm_query_all_bds is not changed
    - cm_query_all_bds.current | length == nm_query_all_bds.current | length == 2
  when: version.current.version is version('3.1.1g', '<')

- name: Verify query_all_bds for version > 3.1.1g and version < 3.3
  assert:
    that:
    - cm_query_all_bds is not changed
    - nm_query_all_bds is not changed
    - cm_query_all_bds.current | length == nm_query_all_bds.current | length == 5
  when:
  - version.current.version is version('3.1.1g', '>')
  - version.current.version is version('3.3', '<')

- name: Verify query_all_bds for version >= 3.3 and < 4.0
  assert:
    that:
    - cm_query_all_bds is not changed
    - nm_query_all_bds is not changed
    - cm_query_all_bds.current | length == nm_query_all_bds.current | length == 6
  when: 
    - version.current.version is version('3.3', '>=')
    - version.current.version is version('3.7', '<')

- name: Verify query_all_bds for version >= 4.0
  assert:
    that:
    - cm_query_all_bds is not changed
    - nm_query_all_bds is not changed
    - cm_query_all_bds.current | length == nm_query_all_bds.current | length == 5
  when: version.current.version is version('4.0', '>=')

# QUERY A BD
- name: Query bd 1
  mso_schema_template_bd:
    <<: *bd_query
    bd: ansible_test_1
  check_mode: true
  register: cm_query_bd

- name: Query bd 1
  mso_schema_template_bd:
    <<: *bd_query
    bd: ansible_test_1
  register: nm_query_bd

- name: Query bd 2
  mso_schema_template_bd:
    <<: *bd_query
    template: Template2
    bd: ansible_test_2
  register: nm_query_bd_2

- name: Query bd 3
  mso_schema_template_bd:
    <<: *bd_query
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template3
    bd: ansible_test_3
  register: nm_query_bd_3

- name: Query bd 5
  mso_schema_template_bd:
    <<: *bd_query
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template5
    bd: ansible_test_5
  register: nm_query_bd_5

- name: Verify query_bd
  assert:
    that:
    - cm_query_bd is not changed
    - nm_query_bd is not changed
    - cm_query_bd.current.name == nm_query_bd.current.name == "ansible_test_1"
    - cm_query_bd == nm_query_bd
    - nm_query_bd_2.current.name == "ansible_test_2"
    - nm_query_bd_3.current.name == "ansible_test_3"
    - nm_query_bd_2.current.intersiteBumTrafficAllow == true
    - nm_query_bd_2.current.optimizeWanBandwidth == true
    - nm_query_bd_2.current.l2Stretch == true
    - nm_query_bd_2.current.l2UnknownUnicast == "flood"
    - nm_query_bd_2.current.l3MCast == true
    - nm_query_bd_2.current.subnets[0].description == "10.0.0.128/24"
    - nm_query_bd_2.current.subnets[0].ip == "10.0.0.128/24"
    - nm_query_bd_2.current.subnets[0].noDefaultGateway == false
    - nm_query_bd_2.current.subnets[0].scope == "private"
    - nm_query_bd_2.current.subnets[0].shared == false
    - nm_query_bd_2.current.subnets[1].description == "1234567890"
    - nm_query_bd_2.current.subnets[1].ip == "10.0.1.254/24"
    - nm_query_bd_2.current.subnets[1].noDefaultGateway == false
    - nm_query_bd_2.current.subnets[1].scope == "private"
    - nm_query_bd_2.current.subnets[1].shared == false
    - nm_query_bd_2.current.subnets[2].description == "My description for a subnet"
    - nm_query_bd_2.current.subnets[2].ip == "172.16.0.1/24"
    - nm_query_bd_2.current.subnets[2].noDefaultGateway == false
    - nm_query_bd_2.current.subnets[2].scope == "public"
    - nm_query_bd_2.current.subnets[2].shared == true
    - nm_query_bd_2.current.subnets[3].description == "My description for a subnet"
    - nm_query_bd_2.current.subnets[3].ip == "192.168.0.254/24"
    - nm_query_bd_2.current.subnets[3].noDefaultGateway == true
    - nm_query_bd_2.current.subnets[3].scope == "private"
    - nm_query_bd_2.current.subnets[3].shared == false

- name: Verify nm_query_bd_5 for a version that's before 3.1
  assert:
    that:
    - nm_query_bd_5 is not changed
    - nm_query_bd_5.current.name == "ansible_test_5"
    - nm_query_bd_5.current.intersiteBumTrafficAllow == true
    - nm_query_bd_5.current.optimizeWanBandwidth == true
    - nm_query_bd_5.current.l2Stretch == true
    - nm_query_bd_5.current.l2UnknownUnicast == "flood"
    - nm_query_bd_5.current.l3MCast == false
  when: version.current.version is version('3.1.1g', '<')

- name: Verify nm_query_bd_5 for a version that's 3.1
  assert:
    that:
    - nm_query_bd_5 is not changed
    - nm_query_bd_5.current.name == "ansible_test_5"
    - nm_query_bd_5.current.intersiteBumTrafficAllow == true
    - nm_query_bd_5.current.optimizeWanBandwidth == true
    - nm_query_bd_5.current.l2Stretch == true
    - nm_query_bd_5.current.l2UnknownUnicast == "flood"
    - nm_query_bd_5.current.l3MCast == false
    - nm_query_bd_5.current.unkMcastAct == "flood"
    - nm_query_bd_5.current.v6unkMcastAct == "flood"
    - nm_query_bd_5.current.vmac == "00:00:5E:00:01:3C"
    - nm_query_bd_5.current.multiDstPktAct == "drop"
    - nm_query_bd_5.current.arpFlood == true
  when: version.current.version is version('3.1.1g', '>=')

- name: Query bd with multiple dhcp policies for mso version > 3.1.1g
  mso_schema_template_bd:
    <<: *bd_query
    bd: ansible_test_multiple_dhcp
    state: query
  register: query_nm_bd_dhcp_policies
  when:
  - version.current.version is version('3.1.1g', '>')
  # TODO dhcp policies api endpoint has changed after 4.0, fix when new module is created
  - version.current.version is version('4.0', '<')

- name: Verify query of DHCP policies for mso version > 3.1.1g
  assert:
    that:
    - query_nm_bd_dhcp_policies is not changed
    - query_nm_bd_dhcp_policies.current.name == 'ansible_test_multiple_dhcp'
    - query_nm_bd_dhcp_policies.current.dhcpLabels | length == 2
    - query_nm_bd_dhcp_policies.current.dhcpLabels[0].name == 'ansible_test_dhcp_policy1'
    - query_nm_bd_dhcp_policies.current.dhcpLabels[1].name == 'ansible_test_dhcp_policy2'
    - query_nm_bd_dhcp_policies.current.dhcpLabels[0].version == 1
    - query_nm_bd_dhcp_policies.current.dhcpLabels[1].version == 1
    - query_nm_bd_dhcp_policies.current.dhcpLabels[0].dhcpOptionLabel.name == 'ansible_test_dhcp_policy_option1'
    - query_nm_bd_dhcp_policies.current.dhcpLabels[1].dhcpOptionLabel.name == 'ansible_test_dhcp_policy_option1'
    - query_nm_bd_dhcp_policies.current.dhcpLabels[0].dhcpOptionLabel.version == 1
    - query_nm_bd_dhcp_policies.current.dhcpLabels[1].dhcpOptionLabel.version == 1
  when:
  - version.current.version is version('3.1.1g', '>')
  # TODO dhcp policies api endpoint has changed after 4.0, fix when new module is created
  - version.current.version is version('4.0', '<')

# Query BD with new options for mso version > 3.1.1g
- name: Query bd with new option flood in encap available in mso versions > 3.1.1g with l2 set to false
  mso_schema_template_bd:
    <<: *bd_query
    bd: ansible_test_flood_encap
    state: query
  register: query_bd_new_encap_flood
  when: version.current.version is version('3.1.1g', '>')

- name: Verify query_bd_new_encap_flood
  assert:
    that:
    - query_bd_new_encap_flood is not changed
    - query_bd_new_encap_flood.current.name == 'ansible_test_flood_encap'
    - query_bd_new_encap_flood.current.intersiteBumTrafficAllow == false
    - query_bd_new_encap_flood.current.optimizeWanBandwidth == false
    - query_bd_new_encap_flood.current.l2Stretch == false
    - query_bd_new_encap_flood.current.l2UnknownUnicast == "flood"
    - query_bd_new_encap_flood.current.unkMcastAct == "flood"
    - query_bd_new_encap_flood.current.multiDstPktAct == "encap-flood"
    - query_bd_new_encap_flood.current.arpFlood == true
    - query_bd_new_encap_flood.current.v6unkMcastAct == "flood"
    - query_bd_new_encap_flood.current.unicastRouting == true
  when: version.current.version is version('3.1.1g', '>')

- name: Verify query_bd_new_encap_flood
  assert:
    that:
    - query_bd_new_encap_flood.current.l3MCast == false
  when: version.current.version is version('3.2', '>=')

# REMOVE BD
- name: Remove bd (check_mode)
  mso_schema_template_bd: &bd_absent
    <<: *bd_query
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    bd: ansible_test_1
    state: absent
  check_mode: true
  register: cm_remove_bd

- name: Verify cm_remove_bd
  assert:
    that:
    - cm_remove_bd is changed
    - cm_remove_bd.current == {}

- name: Remove bd (normal mode)
  mso_schema_template_bd:
    <<: *bd_absent
  register: nm_remove_bd

- name: Verify nm_remove_bd
  assert:
    that:
    - nm_remove_bd is changed
    - nm_remove_bd.current == {}

- name: Remove bd again (check_mode)
  mso_schema_template_bd:
    <<: *bd_absent
  check_mode: true
  register: cm_remove_bd_again

- name: Verify cm_remove_bd_again
  assert:
    that:
    - cm_remove_bd_again is not changed
    - cm_remove_bd_again.current == {}

- name: Remove bd again (normal mode)
  mso_schema_template_bd:
    <<: *bd_absent
  register: nm_remove_bd_again

- name: Verify nm_remove_bd_again
  assert:
    that:
    - nm_remove_bd_again is not changed
    - nm_remove_bd_again.current == {}

- name: Remove bd 5 (normal mode)
  mso_schema_template_bd:
    <<: *bd_absent
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template5
    bd: ansible_test_5
  register: nm_remove_bd_5

- name: Verify nm_remove_bd_5
  assert:
    that:
    - nm_remove_bd_5 is changed
    - nm_remove_bd_5.current == {}

- name: Remove bd ansible_test_multiple_dhcp (normal mode)
  mso_schema_template_bd:
    <<: *bd_absent
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template1
    bd: ansible_test_multiple_dhcp
  register: nm_remove_ansible_test_multiple_dhcp
  when:
  - version.current.version is version('3.1.1g', '>')
  # TODO dhcp policies api endpoint has changed after 4.0, fix when new module is created
  - version.current.version is version('4.0', '<')

- name: Verify nm_remove_ansible_test_multiple_dhcp
  assert:
    that:
    - nm_remove_ansible_test_multiple_dhcp is changed
    - nm_remove_ansible_test_multiple_dhcp.current == {}
  when:
  - version.current.version is version('3.1.1g', '>')
  # TODO dhcp policies api endpoint has changed after 4.0, fix when new module is created
  - version.current.version is version('4.0', '<')

# QUERY NON-EXISTING BD
- name: Query non-existing bd (check_mode)
  mso_schema_template_bd:
    <<: *bd_query
    bd: ansible_test_1
  check_mode: true
  ignore_errors: true
  register: cm_query_non_bd

- name: Query non-existing bd (normal mode)
  mso_schema_template_bd:
    <<: *bd_query
    bd: ansible_test_1
  ignore_errors: true
  register: nm_query_non_bd

- name: Verify query_non_bd
  assert:
    that:
    - cm_query_non_bd is not changed
    - nm_query_non_bd is not changed
    - cm_query_non_bd == nm_query_non_bd
    - cm_query_non_bd.msg == nm_query_non_bd.msg == "BD 'ansible_test_1' not found"


# USE A NON-EXISTING STATE
- name: Non-existing state for bd (check_mode)
  mso_schema_template_bd:
    <<: *bd_query
    state: non-existing-state
  check_mode: true
  ignore_errors: true
  register: cm_non_existing_state

- name: Non-existing state for bd (normal_mode)
  mso_schema_template_bd:
    <<: *bd_query
    state: non-existing-state
  ignore_errors: true
  register: nm_non_existing_state

- name: Verify non_existing_state
  assert:
    that:
    - cm_non_existing_state is not changed
    - nm_non_existing_state is not changed
    - cm_non_existing_state == nm_non_existing_state
    - cm_non_existing_state.msg == nm_non_existing_state.msg == "value of state must be one of{{':'}} absent, present, query, got{{':'}} non-existing-state"

# USE A NON-EXISTING SCHEMA
- name: Non-existing schema for bd (check_mode)
  mso_schema_template_bd:
    <<: *bd_query
    schema: non-existing-schema
  check_mode: true
  ignore_errors: true
  register: cm_non_existing_schema

- name: Non-existing schema for bd (normal_mode)
  mso_schema_template_bd:
    <<: *bd_query
    schema: non-existing-schema
  ignore_errors: true
  register: nm_non_existing_schema

- name: Verify non_existing_schema
  assert:
    that:
    - cm_non_existing_schema is not changed
    - nm_non_existing_schema is not changed
    - cm_non_existing_schema == nm_non_existing_schema
    - cm_non_existing_schema.msg == nm_non_existing_schema.msg == "Provided schema 'non-existing-schema' does not exist."

# USE A NON-EXISTING TEMPLATE
- name: Non-existing template for bd (check_mode)
  mso_schema_template_bd:
    <<: *bd_query
    template: non-existing-template
  check_mode: true
  ignore_errors: true
  register: cm_non_existing_template

- name: Non-existing template for bd (normal_mode)
  mso_schema_template_bd:
    <<: *bd_query
    template: non-existing-template
  ignore_errors: true
  register: nm_non_existing_template

- name: Verify non_existing_template
  assert:
    that:
    - cm_non_existing_template is not changed
    - nm_non_existing_template is not changed
    - cm_non_existing_template == nm_non_existing_template
    - cm_non_existing_template.msg == nm_non_existing_template.msg == "Provided template 'non-existing-template' does not exist. Existing templates{{':'}} Template1, Template2"

# CLEAN UP DHCP Policies
- name: Ensure DHCP policies are removed
  mso_dhcp_relay_policy:
    <<: *mso_info
    dhcp_relay_policy: '{{ item }}'
    tenant: ansible_test
    state: absent
  loop:
  - 'ansible_test_dhcp_policy1'
  - 'ansible_test_dhcp_policy2'
  - 'ansible_test_dhcp_policy3'
  when:
  # TODO dhcp policies api endpoint has changed after 4.0, fix when new module is created
  - version.current.version is version('4.0', '<')

- name: Ensure DHCP option policies are removed
  mso_dhcp_option_policy:
    <<: *mso_info
    dhcp_option_policy: '{{ item }}'
    tenant: ansible_test
    state: absent
  loop:
  - 'ansible_test_dhcp_policy_option1'
  - 'ansible_test_dhcp_policy_option2'
  - 'ansible_test_dhcp_policy_option3'
  when:
  # TODO dhcp policies api endpoint has changed after 4.0, fix when new module is created
  - version.current.version is version('4.0', '<')

# REMOVE Schemas for next CI Run
- name: Remove schemas for next ci test
  mso_schema:
    <<: *mso_info
    schema: '{{ item }}'
    state: absent
  loop:
  - '{{ mso_schema | default("ansible_test") }}_2'
  - '{{ mso_schema | default("ansible_test") }}'