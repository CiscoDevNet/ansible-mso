# Test code for the MSO modules
# Copyright: (c) 2021, Anvitha Jain (@anvitha-jain) <anvjain@cisco.com>
# Copyright: (c) 2022, Akini Ross (@akinross) <akinross@cisco.com>

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI MultiSite host, username and password
  ansible.builtin.fail:
    msg: 'Please define the following variables: mso_hostname, mso_username and mso_password.'
  when: mso_hostname is not defined or mso_username is not defined or mso_password is not defined

# CLEAN ENVIRONMENT
- name: Set vars
  ansible.builtin.set_fact:
    mso_info: &mso_info
      host: '{{ mso_hostname }}'
      username: '{{ mso_username }}'
      password: '{{ mso_password }}'
      validate_certs: '{{ mso_validate_certs | default(false) }}'
      use_ssl: '{{ mso_use_ssl | default(true) }}'
      use_proxy: '{{ mso_use_proxy | default(true) }}'
      output_level: '{{ mso_output_level | default("info") }}'
    aci_info: &aci_info
      host: '{{ apic_hostname }}'
      username: '{{ apic_username }}'
      password: '{{ apic_password }}'
      validate_certs: '{{ apic_validate_certs | default(false) }}'
      use_ssl: '{{ apic_use_ssl | default(true) }}'
      use_proxy: '{{ apic_use_proxy | default(true) }}'
      output_level: '{{ mso_output_level | default("info") }}'

- name: Query MSO version
  cisco.mso.mso_version:
    <<: *mso_info
    state: query
  register: version

- name: Execute tasks
  block:
  - name: Remove schemas
    cisco.mso.mso_schema:
      <<: *mso_info
      schema: '{{ item }}'
      state: absent
    ignore_errors: true
    loop:
      - '{{ mso_schema | default("ansible_test") }}_2'
      - '{{ mso_schema | default("ansible_test") }}'

  - name: Ensure site exists
    cisco.mso.mso_site:
      <<: *mso_info
      site: '{{ mso_site | default("ansible_test") }}'
      apic_username: '{{ apic_username }}'
      apic_password: '{{ apic_password }}'
      apic_site_id: '{{ apic_site_id | default(101) }}'
      urls:
      - https://{{ apic_hostname }}
      state: present

  - name: Ensure sites removed from tenant ansible_test
    cisco.mso.mso_tenant_site:
      <<: *mso_info
      tenant: ansible_test
      site: '{{ item }}'
      state: absent
    loop:
      - '{{ mso_site | default("ansible_test") }}'
      - 'aws_{{ mso_site | default("ansible_test") }}'
      - 'azure_{{ mso_site | default("ansible_test") }}'

  - name: Ensure tenant ansible_test exists
    cisco.mso.mso_tenant:
      <<: *mso_info
      tenant: ansible_test
      users:
        - '{{ mso_username }}'
      sites:
      - '{{ mso_site | default("ansible_test") }}'
      state: present

  - name: Ensure schema with Template1, Template2, and TemplateL3out exist
    cisco.mso.mso_schema_template:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      tenant: ansible_test
      template: '{{item.template}}'
      state: present
    loop:
    - { template: Template1}
    - { template: Template2}
    - { template: TemplateL3out}

  - name: Ensure schema 2 with Template3 exist
    cisco.mso.mso_schema_template:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}_2'
      tenant: ansible_test
      template: Template3
      state: present

  - name: Add physical site to a schema
    cisco.mso.mso_schema_site:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      state: present

  - name: Add physical site to a schema2
    cisco.mso.mso_schema_site:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}_2'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template3
      state: present

  - name: Ensure VRF1 exists
    cisco.mso.mso_schema_template_vrf:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template1
      vrf: VRF1
      state: present

  - name: Ensure VRF2 exists
    cisco.mso.mso_schema_template_vrf:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template2
      vrf: VRF2
      state: present

  - name: Ensure VRF3 exists
    cisco.mso.mso_schema_template_vrf:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}_2'
      template: Template3
      vrf: VRF3
      state: present

  - name: Add template BD
    cisco.mso.mso_schema_template_bd:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template1
      bd: ansible_test_1
      vrf:
        name: VRF1
      state: present
    register: nm_add_bd

  - name: Verify nm_add_bd
    ansible.builtin.assert:
      that:
      - nm_add_bd is changed
      - nm_add_bd.previous == {}
      - nm_add_bd.current.name == "ansible_test_1"
      - nm_add_bd.current.vrfRef.templateName == "Template1"
      - nm_add_bd.current.vrfRef.vrfName == "VRF1"

  - name: Add a new L3out
    cisco.mso.mso_schema_template_l3out:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template1
      l3out: L3out1
      vrf:
          name: VRF1
      state: present
    register: nm_add_l3out

  - name: Add a new L3out2 in different template
    cisco.mso.mso_schema_template_l3out:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template2
      l3out: L3out2
      vrf:
          name: VRF2
      state: present
    register: nm_add_l3out

  - name: Add a new L3out3 in different schema
    cisco.mso.mso_schema_template_l3out:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}_2'
      template: Template3
      l3out: L3out3
      vrf:
          name: VRF3
      state: present
    register: nm_add_l3out

  - name: Verify nm_add_l3out
    ansible.builtin.assert:
      that:
      - nm_add_l3out is changed
      - nm_add_l3out.previous == {}

  - name: Add BD to site
    cisco.mso.mso_schema_site_bd:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      bd: ansible_test_1
      state: present
    register: nm_add_site_bd

  - name: Verify nm_add_site_bd
    ansible.builtin.assert:
      that:
      - nm_add_site_bd.current.bdRef.bdName == "ansible_test_1"
      - nm_add_site_bd.current.bdRef.templateName == "Template1"
      - nm_add_site_bd.current.hostBasedRouting == false

  - name: Verify nm_add_site_bd
    ansible.builtin.assert:
      that:
      - nm_add_site_bd is changed
      - nm_add_site_bd.previous == {}
    when: version.current.version is version('4.0', '<') # no change in NDO4.0 because site will already be present when template is defined

  - name: Add l3out to BD Site
    cisco.mso.mso_schema_site_bd_l3out:  &site_bd_l3out_again
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      bd: ansible_test_1
      l3out:
        name: L3out1
      state: present
    register: nm_bd_site_l3out

  - name: Add l3out to BD Site again
    cisco.mso.mso_schema_site_bd_l3out:
      <<: *site_bd_l3out_again
    register: nm_bd_site_l3out_again

  - name: Verify nm_bd_site_l3out
    ansible.builtin.assert:
      that:
      - nm_bd_site_l3out is changed
      - nm_bd_site_l3out.previous == {}
      - nm_bd_site_l3out.current.l3outName == "L3out1"
      - nm_bd_site_l3out_again is not changed

  - name: Query a specific BD site l3out
    cisco.mso.mso_schema_site_bd_l3out:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      bd: ansible_test_1
      l3out:
        name: L3out1
      state: query
    register: query_result

  - name: Verify query_result
    ansible.builtin.assert:
      that:
      - query_result is not changed
      - nm_bd_site_l3out.current.l3outName == "L3out1"

  - name: Add l3out2 from different template to BD Site
    cisco.mso.mso_schema_site_bd_l3out:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      bd: ansible_test_1
      l3out:
        name: L3out2
        template: Template2
      state: present
    register: nm_bd_site_l3out2

  - name: Add l3out3 from different schema to BD Site
    cisco.mso.mso_schema_site_bd_l3out:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      bd: ansible_test_1
      l3out:
        name: L3out3
        schema: '{{ mso_schema | default("ansible_test") }}_2'
        template: Template3
      state: present
    register: nm_bd_site_l3out3

  - name: Verify nm_bd_site_l3out2 and nm_bd_site_l3out3
    ansible.builtin.assert:
      that:
      - nm_bd_site_l3out2 is changed
      - nm_bd_site_l3out2.previous == {}
      - nm_bd_site_l3out2.current.l3outName == "L3out2"
      - nm_bd_site_l3out3 is changed
      - nm_bd_site_l3out3.previous == {}
      - nm_bd_site_l3out3.current.l3outName == "L3out3"

  - name: Query all BD site l3outs
    cisco.mso.mso_schema_site_bd_l3out:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      bd: ansible_test_1
      state: query
    register: query_all

  - name: Verify query_all
    ansible.builtin.assert:
      that:
      - query_all is not changed
      - query_all.current.0.l3outName == "L3out1"
      - query_all.current.1.l3outName == "L3out2"
      - query_all.current.2.l3outName == "L3out3"

  # Checking error conditions
  - name: Use non_existing template
    cisco.mso.mso_schema_site_bd_l3out:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: non_existing_template
      bd: ansible_test_1
      l3out:
        name: L3out1
      state: query
    ignore_errors: true
    register: non_existing_template

  - name: Use non_existing BD
    cisco.mso.mso_schema_site_bd_l3out:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      bd: BD1
      state: query
    ignore_errors: true
    register: non_existing_bd

  - name: Query non_existing BD site L3out
    cisco.mso.mso_schema_site_bd_l3out:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      bd: ansible_test_1
      l3out:
        name: non_existing_L3out
      state: query
    ignore_errors: true
    register: non_existing_l3out

  - name: Verify error query
    ansible.builtin.assert:
      that:
      - non_existing_template is not changed
      - non_existing_template.msg == "Provided template 'non_existing_template' not matching existing template(s){{':'}} Template1, Template2, TemplateL3out"
      - non_existing_bd is not changed
      - non_existing_bd.msg == "Provided BD 'BD1' not matching existing bd(s){{':'}} ansible_test_1"
      - non_existing_l3out is not changed
      - non_existing_l3out.msg == "L3out 'non_existing_L3out' not found"

  # Check addition of l3out to Site BD without adding BD to site
  - name: Remove l3out from BD Site
    cisco.mso.mso_schema_site_bd_l3out:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      bd: ansible_test_1
      l3out:
        name: L3out1
      state: absent
    register: remove_bd_site_l3out

  - name: Verify remove_bd_site_l3out
    ansible.builtin.assert:
      that:
      - remove_bd_site_l3out is changed
      - remove_bd_site_l3out.previous.l3outName == "L3out1"
      - remove_bd_site_l3out.current == {}

  - name: Remove BD from site
    cisco.mso.mso_schema_site_bd:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      bd: ansible_test_1
      state: absent
    register: nm_remove_site_bd

  - name: Verify nm_remove_site_bd
    ansible.builtin.assert:
      that:
      - nm_remove_site_bd is changed
      - nm_remove_site_bd.previous.bdRef.bdName == "ansible_test_1"
      - nm_remove_site_bd.previous.bdRef.templateName == "Template1"
      - nm_remove_site_bd.current == {}

  - name: Remove template BD
    cisco.mso.mso_schema_template_bd:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template1
      bd: ansible_test_1
      state: absent
    register: nm_remove_bd

  - name: Verify nm_remove_bd
    ansible.builtin.assert:
      that:
      - nm_remove_bd is changed
      - nm_remove_bd.current == {}

  - name: Add new template BD
    cisco.mso.mso_schema_template_bd:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template1
      bd: ansible_bd
      vrf:
        name: VRF1
      state: present
    register: nm_add_bd_template

  - name: Verify nm_add_bd_template
    ansible.builtin.assert:
      that:
      - nm_add_bd_template is changed
      - nm_add_bd_template.previous == {}

  - name: Add a new l3 out to BD (BD not associated to Site)
    cisco.mso.mso_schema_site_bd_l3out:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: Template1
      bd: ansible_bd
      l3out:
        name: L3out1
      state: present
    register: add_bd_site_l3out

  - name: Verify add_bd_site_l3out
    ansible.builtin.assert:
      that:
      - add_bd_site_l3out is changed
      - add_bd_site_l3out.previous == {}
      - add_bd_site_l3out.current.l3outName == "L3out1"

  - name: Create VRF for L3out on APIC Testing Exists
    cisco.mso.mso_schema_template_vrf:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: TemplateL3out
      vrf: l3out_vrf
      state: present

  - name: Create BD for L3out on APIC Testing Exists
    cisco.mso.mso_schema_template_bd:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: TemplateL3out
      bd: l3out_bd
      vrf:
        name: l3out_vrf
      state: present

  - name: Attach site to schema
    cisco.mso.mso_schema_site:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: TemplateL3out
      state: present

  - name: Deploy template for L3out on APIC Testing
    cisco.mso.ndo_schema_template_deploy:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: TemplateL3out
      sites:
        - '{{ mso_site | default("ansible_test") }}'
      state: deploy

  - name: Set ansible_network_os to cisco.aci.aci and ansible_connection to local
    ansible.builtin.set_fact:
      ansible_connection: local
      ansible_network_os: cisco.aci.aci

  - name: Reset the ansible_connection to access the APIC
    ansible.builtin.meta: reset_connection

  - name: Ensure l3out exists in ACI
    cisco.aci.aci_l3out:
      <<: *aci_info
      tenant: ansible_test
      l3out: ansible_test_l3out
      vrf: l3out_vrf
      domain: L3out_Dom
      state: present

  - name: Set ansible_network_os to cisco.nd.nd and ansible_connection to ansible.netcommon.httpapi
    ansible.builtin.set_fact:
      ansible_connection: ansible.netcommon.httpapi
      ansible_network_os: cisco.nd.nd

  - name: Reset the ansible_connection to access the MSO/NDO
    ansible.builtin.meta: reset_connection

  - name: Create apic L3out to site bd
    cisco.mso.mso_schema_site_bd_l3out: &l3out_on_apic
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: TemplateL3out
      site: '{{ mso_site | default("ansible_test") }}'
      bd: l3out_bd
      l3out:
        name: l3out_vrf
        tenant: ansible_test
      state: present
    register: nm_create_l3out_on_apic

  - name: Create apic L3out to site bd again
    cisco.mso.mso_schema_site_bd_l3out:
      <<: *l3out_on_apic
      state: present
    register: nm_create_l3out_on_apic_again

  - name: Query apic L3out site bd
    cisco.mso.mso_schema_site_bd_l3out:
      <<: *l3out_on_apic
      state: query
    register: query_l3out_on_apic

  - name: Remove apic L3out from site bd
    cisco.mso.mso_schema_site_bd_l3out:
      <<: *l3out_on_apic
      state: absent
    register: nm_remove_l3out_on_apic

  - name: Create apic L3out to site bd again with schema (error)
    cisco.mso.mso_schema_site_bd_l3out:
      <<: *l3out_on_apic
      l3out:
        name: l3out_vrf
        tenant: ansible_test
        schema: '{{ mso_schema | default("ansible_test") }}'
    register: nm_create_l3out_schema_error
    ignore_errors: true

  - name: Create apic L3out to site bd again with template (error)
    cisco.mso.mso_schema_site_bd_l3out:
      <<: *l3out_on_apic
      l3out:
        name: l3out_vrf
        tenant: ansible_test
        template: TemplateL3out
    register: nm_create_l3out_template_error
    ignore_errors: true

  - name: Create apic L3out to site bd again with schema and template (error)
    cisco.mso.mso_schema_site_bd_l3out:
      <<: *l3out_on_apic
      l3out:
        name: l3out_vrf
        tenant: ansible_test
        schema: '{{ mso_schema | default("ansible_test") }}'
        template: TemplateL3out
    register: nm_create_l3out_both_error
    ignore_errors: true

  - name: Assert apic L3out on site bd
    ansible.builtin.assert:
      that:
      - nm_create_l3out_on_apic is changed
      - nm_create_l3out_on_apic.previous == {}
      - nm_create_l3out_on_apic.current.l3outName == "l3out_vrf"
      - nm_create_l3out_on_apic.current.tenant == "ansible_test"
      - nm_create_l3out_on_apic_again is not changed
      - nm_create_l3out_on_apic_again.previous.l3outName == "l3out_vrf"
      - nm_create_l3out_on_apic_again.previous.tenant == "ansible_test"
      - nm_create_l3out_on_apic_again.current.l3outName == "l3out_vrf"
      - nm_create_l3out_on_apic_again.current.tenant == "ansible_test"
      - query_l3out_on_apic is not changed
      - nm_remove_l3out_on_apic is changed
      - nm_remove_l3out_on_apic.previous.l3outName == "l3out_vrf"
      - nm_remove_l3out_on_apic.previous.tenant == "ansible_test"
      - nm_remove_l3out_on_apic.current == {}
      - nm_create_l3out_schema_error is failed
      - nm_create_l3out_schema_error.msg == "parameters are mutually exclusive{{":"}} tenant|schema found in l3out"
      - nm_create_l3out_template_error is failed
      - nm_create_l3out_template_error.msg == "parameters are mutually exclusive{{":"}} tenant|template found in l3out"
      - nm_create_l3out_both_error is failed
      - nm_create_l3out_both_error.msg == "parameters are mutually exclusive{{":"}} tenant|schema, tenant|template found in l3out"
  
  always:

  - name: Undeploy template for L3out on APIC Testing
    cisco.mso.ndo_schema_template_deploy:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: TemplateL3out
      sites:
        - '{{ mso_site | default("ansible_test") }}'
      state: undeploy

  - name: Ensure templates detached from site
    cisco.mso.mso_schema_site:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: '{{item.template}}'
      state: absent
    loop:
    - { template: Template1}
    - { template: Template2}
    - { template: TemplateL3out}
  
  - name: Remove schemas
    cisco.mso.mso_schema:
      <<: *mso_info
      schema: '{{ item }}'
      state: absent
    ignore_errors: true
    loop:
      - '{{ mso_schema | default("ansible_test") }}_2'
      - '{{ mso_schema | default("ansible_test") }}'
