# Test code for the MSO modules
# Copyright: (c) 2021, Anvitha Jain (@anvitha-jain) <anvjain@cisco.com>
# Copyright: (c) 2020, Lionel Hercot (@lhercot) <lhercot@cisco.com>
# Copyright: (c) 2018, Dag Wieers (@dagwieers) <dag@wieers.com> (based on mso_site test case)
# 

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI MultiSite host, username and password
  fail:
    msg: 'Please define the following variables: mso_hostname, mso_username and mso_password.'
  when: mso_hostname is not defined or mso_username is not defined or mso_password is not defined


# CLEAN ENVIRONMENT
- name: Set vars
  set_fact:
    mso_info: &mso_info
      host: '{{ mso_hostname }}'
      username: '{{ mso_username }}'
      password: '{{ mso_password }}'
      validate_certs: '{{ mso_validate_certs | default(false) }}'
      use_ssl: '{{ mso_use_ssl | default(true) }}'
      use_proxy: '{{ mso_use_proxy | default(false) }}'
      output_level: '{{ mso_output_level | default("info") }}'

- name: Query MSO version
  mso_version:
    <<: *mso_info
    state: query
  register: version

- name: Remove schemas
  mso_schema:
    <<: *mso_info
    schema: '{{ item }}'
    state: absent
  loop:
  - '{{ mso_schema | default("ansible_test") }}_2'
  - '{{ mso_schema | default("ansible_test") }}'

- name: Ensure tenant ansible_test exist
  mso_tenant: &tenant_present
    <<: *mso_info
    tenant: ansible_test
    users:
    - '{{ mso_username }}'
    state: present

- name: Ensure schema 1 with Template 1 exist
  mso_schema_template: &schema_present
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    tenant: ansible_test
    template: Template 1
    state: present

- name: Ensure schema 1 with Template 2 exist
  mso_schema_template:
    <<: *schema_present
    schema: '{{ mso_schema | default("ansible_test") }}'
    tenant: ansible_test
    template: Template 2
    state: present

- name: Ensure schema 2 with Template 3 exist
  mso_schema_template:
    <<: *schema_present
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    tenant: ansible_test
    template: Template 3
    state: present

- name: Ensure VRF exist
  mso_schema_template_vrf: &vrf_present
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    vrf: VRF
    layer3_multicast: true
    state: present

- name: Ensure VRF2 exist
  mso_schema_template_vrf:
    <<: *vrf_present
    vrf: VRF2
    state: present

- name: Ensure VRF3 exist
  mso_schema_template_vrf:
    <<: *vrf_present
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 2
    vrf: VRF3
    state: present

- name: Ensure VRF4 exist
  mso_schema_template_vrf:
    <<: *vrf_present
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template 3
    vrf: VRF4
    state: present

- name: Ensure ANP exist
  mso_schema_template_anp:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    state: present

- name: Ensure ANP2 exist
  mso_schema_template_anp:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 2
    anp: ANP2
    state: present

- name: Ensure ANP3 exist
  mso_schema_template_anp:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template 3
    anp: ANP3
    state: present

- name: Ensure Filter 1 exist
  mso_schema_template_filter_entry:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    filter: Filter1
    entry: Filter1-Entry
    state: present

- name: Ensure Contract1 exist
  mso_schema_template_contract_filter: &contract_present
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    contract: Contract1
    filter: Filter1
    filter_schema: '{{ mso_schema | default("ansible_test") }}'
    filter_template: Template 1
    state: present

- name: Ensure Contract2 exist
  mso_schema_template_contract_filter:
    <<: *contract_present
    template: Template 2
    contract: Contract2
    state: present

- name: Ensure ansible_test_1 BD exist
  mso_schema_template_bd:
    <<: *vrf_present
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    bd: ansible_test_1
    vrf:
      name: VRF
    layer3_multicast: true
    state: present

- name: Ensure ansible_test_2 BD exist
  mso_schema_template_bd:
    <<: *vrf_present
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    bd: ansible_test_2
    vrf:
      name: VRF2
      template: Template 1
    layer3_multicast: true
    state: present

- name: Ensure ansible_test_3 BD exist
  mso_schema_template_bd:
    <<: *vrf_present
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 2
    bd: ansible_test_3
    vrf:
      name: VRF3
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template 2
    layer3_multicast: true
    state: present

- name: Ensure ansible_test_4 BD exist
  mso_schema_template_bd:
    <<: *vrf_present
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template 3
    bd: ansible_test_4
    vrf:
      name: VRF4
      schema: '{{ mso_schema | default("ansible_test") }}_2'
      template: Template 3
    layer3_multicast: true
    state: present

# ADD EPG
- name: Add EPG (check_mode)
  mso_schema_template_anp_epg: &epg_present
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    bd:
      name: ansible_test_1
    vrf:
      name: VRF
    state: present
  check_mode: yes
  register: cm_add_epg

- name: Verify cm_add_epg
  assert:
    that:
    - cm_add_epg is changed
    - cm_add_epg.previous == {}
    - cm_add_epg.current.name == "ansible_test_1"
    - cm_add_epg.current.vrfRef.templateName == "Template1"
    - cm_add_epg.current.vrfRef.vrfName == "VRF"
    - cm_add_epg.current.bdRef.templateName == "Template1"
    - cm_add_epg.current.bdRef.bdName == "ansible_test_1"

- name: Add EPG (normal mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
  register: nm_add_epg

- name: Verify nm_add_epg
  assert:
    that:
    - nm_add_epg is changed
    - nm_add_epg.previous == {}
    - nm_add_epg.current.name == "ansible_test_1"
    - nm_add_epg.current.vrfRef.templateName == "Template1"
    - nm_add_epg.current.vrfRef.vrfName == "VRF"
    - nm_add_epg.current.bdRef.templateName == "Template1"
    - nm_add_epg.current.bdRef.bdName == "ansible_test_1"
    - cm_add_epg.current.vrfRef.schemaId ==  nm_add_epg.current.vrfRef.schemaId
    - cm_add_epg.current.bdRef.schemaId ==  nm_add_epg.current.bdRef.schemaId

- name: Add EPG again (check_mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
  check_mode: yes
  register: cm_add_epg_again

- name: Verify cm_add_epg_again
  assert:
    that:
    - cm_add_epg_again is not changed
    - cm_add_epg_again.current.name == cm_add_epg_again.previous.name == "ansible_test_1"
    - cm_add_epg_again.current.vrfRef.templateName == cm_add_epg_again.previous.vrfRef.templateName == "Template1"
    - cm_add_epg_again.current.vrfRef.vrfName == cm_add_epg_again.previous.vrfRef.vrfName == "VRF"
    - cm_add_epg_again.current.bdRef.templateName == cm_add_epg_again.previous.bdRef.templateName == "Template1"
    - cm_add_epg_again.current.bdRef.bdName == cm_add_epg_again.previous.bdRef.bdName == "ansible_test_1"
    - cm_add_epg_again.previous.vrfRef.schemaId ==  cm_add_epg_again.current.vrfRef.schemaId
    - cm_add_epg_again.previous.bdRef.schemaId ==  cm_add_epg_again.current.bdRef.schemaId


- name: Add EPG again (normal mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
  register: nm_add_epg_again

- name: Verify nm_add_epg_again
  assert:
    that:
    - nm_add_epg_again is not changed
    - nm_add_epg_again.current.name == nm_add_epg_again.previous.name == "ansible_test_1"
    - nm_add_epg_again.current.vrfRef.templateName == nm_add_epg_again.previous.vrfRef.templateName == "Template1"
    - nm_add_epg_again.current.vrfRef.vrfName == nm_add_epg_again.previous.vrfRef.vrfName == "VRF"
    - nm_add_epg_again.current.bdRef.templateName == nm_add_epg_again.previous.bdRef.templateName == "Template1"
    - nm_add_epg_again.current.bdRef.bdName == nm_add_epg_again.previous.bdRef.bdName == "ansible_test_1"
    - nm_add_epg_again.previous.vrfRef.schemaId ==  nm_add_epg_again.current.vrfRef.schemaId
    - nm_add_epg_again.previous.bdRef.schemaId ==  nm_add_epg_again.current.bdRef.schemaId

- name: Add EPG 2 (normal mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    schema: '{{ mso_schema | default("ansible_test") }}'
    epg: ansible_test_2

- name: Add EPG 3 (normal mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 2
    anp: ANP2
    epg: ansible_test_3
    bd:
      name: ansible_test_1
      template: Template 1
    vrf:
      name: VRF
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template 1
    useg_epg: true
    intra_epg_isolation: enforced
    intersite_multicast_source: true
    proxy_arp: true
    preferred_group: true
    subnets:
    - subnet: 10.0.0.128/24
    - subnet: 10.0.1.254/24
      description: 1234567890
    - subnet: 172.16.0.1/24
      description: "My description for a subnet"
      scope: public
      shared: true
      no_default_gateway: false
    - ip: 192.168.0.254/24
      description: "My description for a subnet"
      scope: private
      shared: false
      no_default_gateway: true
  register: nm_add_epg_3

- name: Add EPG 4 (normal mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template 3
    anp: ANP3
    epg: ansible_test_4
    bd:
      name: ansible_test_1
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template 1
    vrf:
      name: VRF
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template 1
  register: nm_add_epg_4

- name: Verify nm_add_epg_3 and nm_add_epg_4
  assert:
    that:
    - nm_add_epg_3 is changed
    - nm_add_epg_4 is changed
    - nm_add_epg_3.current.name == "ansible_test_3"
    - nm_add_epg_4.current.name == "ansible_test_4"
    - nm_add_epg_3.current.vrfRef.templateName == nm_add_epg_4.current.vrfRef.templateName == "Template1"
    - nm_add_epg_3.current.vrfRef.vrfName == nm_add_epg_4.current.vrfRef.vrfName == "VRF"
    - nm_add_epg_3.current.vrfRef.schemaId == nm_add_epg.current.bdRef.schemaId
    - nm_add_epg_3.current.bdRef.templateName == nm_add_epg_4.current.bdRef.templateName == "Template1"
    - nm_add_epg_3.current.bdRef.bdName == nm_add_epg_4.current.bdRef.bdName == "ansible_test_1"
    - nm_add_epg_3.current.bdRef.schemaId ==  nm_add_epg.current.bdRef.schemaId
    - nm_add_epg_3.current.uSegEpg == true
    - nm_add_epg_3.current.intraEpg == 'enforced'
    - nm_add_epg_3.current.mCastSource == true
    - nm_add_epg_3.current.proxyArp == true
    - nm_add_epg_3.current.preferredGroup == true
    - nm_add_epg_3.current.subnets[0].description == "10.0.0.128/24"
    - nm_add_epg_3.current.subnets[0].ip == "10.0.0.128/24"
    - nm_add_epg_3.current.subnets[0].noDefaultGateway == false
    - nm_add_epg_3.current.subnets[0].scope == "private"
    - nm_add_epg_3.current.subnets[0].shared == false
    - nm_add_epg_3.current.subnets[1].description == "1234567890"
    - nm_add_epg_3.current.subnets[1].ip == "10.0.1.254/24"
    - nm_add_epg_3.current.subnets[1].noDefaultGateway == false
    - nm_add_epg_3.current.subnets[1].scope == "private"
    - nm_add_epg_3.current.subnets[1].shared == false
    - nm_add_epg_3.current.subnets[2].description == "My description for a subnet"
    - nm_add_epg_3.current.subnets[2].ip == "172.16.0.1/24"
    - nm_add_epg_3.current.subnets[2].noDefaultGateway == false
    - nm_add_epg_3.current.subnets[2].scope == "public"
    - nm_add_epg_3.current.subnets[2].shared == true
    - nm_add_epg_3.current.subnets[3].description == "My description for a subnet"
    - nm_add_epg_3.current.subnets[3].ip == "192.168.0.254/24"
    - nm_add_epg_3.current.subnets[3].noDefaultGateway == true
    - nm_add_epg_3.current.subnets[3].scope == "private"
    - nm_add_epg_3.current.subnets[3].shared == false

# CHANGE EPG
- name: Change EPG (check_mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    vrf:
      name: VRF2
    bd:
      name: ansible_test_2
  check_mode: yes
  register: cm_change_epg

- name: Verify cm_change_epg
  assert:
    that:
    - cm_change_epg is changed
    - cm_change_epg.current.name == 'ansible_test_1'
    - cm_change_epg.current.vrfRef.vrfName == 'VRF2'
    - cm_change_epg.current.bdRef.templateName == cm_change_epg.current.vrfRef.templateName == "Template1"
    - cm_change_epg.current.vrfRef.schemaId == cm_change_epg.previous.vrfRef.schemaId
    - cm_change_epg.current.bdRef.bdName == 'ansible_test_2'
    - cm_change_epg.current.bdRef.schemaId == cm_change_epg.previous.bdRef.schemaId

- name: Change EPG (normal mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    vrf:
      name: VRF2
    bd:
      name: ansible_test_2
    output_level: debug
  register: nm_change_epg

- name: Verify nm_change_epg
  assert:
    that:
    - nm_change_epg is changed
    - nm_change_epg.current.name == 'ansible_test_1'
    - nm_change_epg.current.vrfRef.vrfName == 'VRF2'
    - nm_change_epg.current.bdRef.templateName == nm_change_epg.current.vrfRef.templateName == "Template1"
    - nm_change_epg.current.vrfRef.schemaId == nm_change_epg.previous.vrfRef.schemaId
    - nm_change_epg.current.bdRef.bdName == 'ansible_test_2'
    - nm_change_epg.current.bdRef.schemaId == nm_change_epg.previous.bdRef.schemaId

- name: Change EPG again (check_mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    vrf:
      name: VRF2
    bd:
      name: ansible_test_2
  check_mode: yes
  register: cm_change_epg_again

- name: Verify cm_change_epg_again
  assert:
    that:
    - cm_change_epg_again is not changed
    - cm_change_epg_again.current.name == 'ansible_test_1'
    - cm_change_epg_again.current.vrfRef.vrfName == 'VRF2'
    - cm_change_epg_again.current.vrfRef.templateName == cm_change_epg_again.current.bdRef.templateName == "Template1"
    - cm_change_epg_again.current.vrfRef.schemaId == cm_change_epg_again.previous.vrfRef.schemaId
    - cm_change_epg_again.current.bdRef.bdName == 'ansible_test_2'
    - cm_change_epg_again.current.bdRef.schemaId == cm_change_epg_again.previous.bdRef.schemaId

- name: Change EPG again (normal mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    vrf:
      name: VRF2
    bd:
      name: ansible_test_2
  register: nm_change_epg_again

- name: Verify nm_change_epg_again
  assert:
    that:
    - nm_change_epg_again is not changed
    - nm_change_epg_again.current.name == 'ansible_test_1'
    - nm_change_epg_again.current.vrfRef.vrfName == 'VRF2'
    - nm_change_epg_again.current.vrfRef.templateName == nm_change_epg_again.current.bdRef.templateName == "Template1"
    - nm_change_epg_again.current.vrfRef.schemaId == nm_change_epg_again.previous.vrfRef.schemaId
    - nm_change_epg_again.current.bdRef.bdName == 'ansible_test_2'
    - nm_change_epg_again.current.bdRef.schemaId == nm_change_epg_again.previous.bdRef.schemaId

- name: Change EPG to VRF3 (normal mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    vrf:
      name: VRF3
      template: Template 2
    bd:
      name: ansible_test_3
      template: Template 2
  register: nm_change_epg_vrf3

- name: Change EPG 4 to VRF (normal mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template 3
    anp: ANP3
    epg: ansible_test_4
    vrf:
      name: VRF
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template 1
    bd:
      name: ansible_test_1
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template 1
  register: nm_change_epg_vrf4

- name: Verify nm_change_epg_vrf3 and nm_change_epg_vrf4
  assert:
    that:
    - nm_change_epg_vrf3 is changed
    - nm_change_epg_vrf3.current.name == 'ansible_test_1'
    - nm_change_epg_vrf4.current.name == 'ansible_test_4'
    - nm_change_epg_vrf3.current.vrfRef.vrfName == 'VRF3'
    - nm_change_epg_vrf3.current.bdRef.bdName == 'ansible_test_3'
    - nm_change_epg_vrf3.current.vrfRef.templateName == nm_change_epg_vrf3.current.bdRef.templateName == "Template2"
    - nm_change_epg_vrf4.current.vrfRef.vrfName == 'VRF'
    - nm_change_epg_vrf4.current.bdRef.bdName == 'ansible_test_1'
    - nm_change_epg_vrf4.current.vrfRef.templateName == nm_change_epg_vrf4.current.bdRef.templateName == "Template1"

- name: Change EPG 1 settings(normal mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    useg_epg: true
    intra_epg_isolation: enforced
    intersite_multicast_source: true
    proxy_arp: true
    preferred_group: true
    subnets:
    - subnet: 10.1.0.128/24
    - subnet: 10.1.1.254/24
      description: 1234567890
    - subnet: 172.17.0.1/24
      description: "My description for a subnet"
      scope: public
      shared: true
      no_default_gateway: false
    - ip: 192.168.1.254/24
      description: "My description for a subnet"
      scope: private
      shared: false
      no_default_gateway: true
  register: nm_change_epg_1_settings

- name: Change EPG 1 subnets (normal mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    useg_epg: true
    intra_epg_isolation: enforced
    intersite_multicast_source: true
    proxy_arp: true
    preferred_group: true
    subnets:
    - subnet: 10.1.0.127/24
    - subnet: 172.17.0.1/24
      description: "New description for a subnet"
      scope: private
      shared: false
      no_default_gateway: false
    - ip: 192.168.1.254/24
      description: "My description for a subnet"
      scope: private
      shared: false
      no_default_gateway: false
  register: nm_change_epg_1_subnets

- name: Verify nm_change_epg_1_subnets
  assert:
    that:
    - nm_change_epg_1_settings is changed
    - nm_change_epg_1_settings.current.name == "ansible_test_1"
    - nm_change_epg_1_settings.current.vrfRef.templateName ==  nm_change_epg_1_settings.current.bdRef.templateName ==  "Template1"
    - nm_change_epg_1_settings.current.vrfRef.vrfName == "VRF"
    - nm_change_epg_1_settings.current.bdRef.bdName == "ansible_test_1"
    - nm_change_epg_1_settings.current.uSegEpg == true
    - nm_change_epg_1_settings.current.intraEpg == 'enforced'
    - nm_change_epg_1_settings.current.mCastSource == true
    - nm_change_epg_1_settings.current.proxyArp == true
    - nm_change_epg_1_settings.current.preferredGroup == true
    - nm_change_epg_1_settings.current.subnets[0].description == "10.1.0.128/24"
    - nm_change_epg_1_settings.current.subnets[0].ip == "10.1.0.128/24"
    - nm_change_epg_1_settings.current.subnets[0].noDefaultGateway == false
    - nm_change_epg_1_settings.current.subnets[0].scope == "private"
    - nm_change_epg_1_settings.current.subnets[0].shared == false
    - nm_change_epg_1_settings.current.subnets[1].description == "1234567890"
    - nm_change_epg_1_settings.current.subnets[1].ip == "10.1.1.254/24"
    - nm_change_epg_1_settings.current.subnets[1].noDefaultGateway == false
    - nm_change_epg_1_settings.current.subnets[1].scope == "private"
    - nm_change_epg_1_settings.current.subnets[1].shared == false
    - nm_change_epg_1_settings.current.subnets[2].description == "My description for a subnet"
    - nm_change_epg_1_settings.current.subnets[2].ip == "172.17.0.1/24"
    - nm_change_epg_1_settings.current.subnets[2].noDefaultGateway == false
    - nm_change_epg_1_settings.current.subnets[2].scope == "public"
    - nm_change_epg_1_settings.current.subnets[2].shared == true
    - nm_change_epg_1_settings.current.subnets[3].description == "My description for a subnet"
    - nm_change_epg_1_settings.current.subnets[3].ip == "192.168.1.254/24"
    - nm_change_epg_1_settings.current.subnets[3].noDefaultGateway == true
    - nm_change_epg_1_settings.current.subnets[3].scope == "private"
    - nm_change_epg_1_settings.current.subnets[3].shared == false
    - nm_change_epg_1_subnets is changed
    - nm_change_epg_1_subnets.current.subnets | length == 3
    - nm_change_epg_1_subnets.current.name == "ansible_test_1"
    - nm_change_epg_1_subnets.current.vrfRef.templateName == nm_change_epg_1_subnets.current.bdRef.templateName == "Template1"
    - nm_change_epg_1_subnets.current.vrfRef.vrfName == "VRF"
    - nm_change_epg_1_subnets.current.bdRef.bdName == "ansible_test_1"
    - nm_change_epg_1_subnets.current.uSegEpg == true
    - nm_change_epg_1_subnets.current.intraEpg == 'enforced'
    - nm_change_epg_1_subnets.current.mCastSource == true
    - nm_change_epg_1_subnets.current.proxyArp == true
    - nm_change_epg_1_subnets.current.preferredGroup == true
    - nm_change_epg_1_subnets.current.subnets[0].description == "10.1.0.127/24"
    - nm_change_epg_1_subnets.current.subnets[0].ip == "10.1.0.127/24"
    - nm_change_epg_1_subnets.current.subnets[0].noDefaultGateway == false
    - nm_change_epg_1_subnets.current.subnets[0].scope == "private"
    - nm_change_epg_1_subnets.current.subnets[0].shared == false
    - nm_change_epg_1_subnets.current.subnets[1].description == "New description for a subnet"
    - nm_change_epg_1_subnets.current.subnets[1].ip == "172.17.0.1/24"
    - nm_change_epg_1_subnets.current.subnets[1].noDefaultGateway == false
    - nm_change_epg_1_subnets.current.subnets[1].scope == "private"
    - nm_change_epg_1_subnets.current.subnets[1].shared == false
    - nm_change_epg_1_subnets.current.subnets[2].description == "My description for a subnet"
    - nm_change_epg_1_subnets.current.subnets[2].ip == "192.168.1.254/24"
    - nm_change_epg_1_subnets.current.subnets[2].noDefaultGateway == false
    - nm_change_epg_1_subnets.current.subnets[2].scope == "private"
    - nm_change_epg_1_subnets.current.subnets[2].shared == false


# # QUERY ALL EPGs
- name: Query all EPGs in an ANP (check_mode)
  mso_schema_template_anp_epg: &epg_query
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    state: query
  check_mode: yes
  register: cm_query_all_epgs

- name: Query all EPGs (normal mode)
  mso_schema_template_anp_epg:
    <<: *epg_query
  register: nm_query_all_epgs

- name: Verify query_all_epgs
  assert:
    that:
    - cm_query_all_epgs is not changed
    - nm_query_all_epgs is not changed
    - cm_query_all_epgs.current | length == nm_query_all_epgs.current | length == 2


# QUERY AN EPG
- name: Query EPG 1 (check_mode)
  mso_schema_template_anp_epg:
    <<: *epg_query
    epg: ansible_test_1
  check_mode: yes
  register: cm_query_epg_1

- name: Query EPG 1 (normal mode)
  mso_schema_template_anp_epg:
    <<: *epg_query
    epg: ansible_test_1
  register: nm_query_epg_1

- name: Query EPG 3 (normal mode)
  mso_schema_template_anp_epg:
    <<: *epg_query
    template: Template 2
    anp: ANP2
    epg: ansible_test_3
  register: nm_query_epg_3

- name: Query EPG 4 (normal mode)
  mso_schema_template_anp_epg:
    <<: *epg_query
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template 3
    anp: ANP3
    epg: ansible_test_4
  register: nm_query_epg_4

- name: Verify query_epg_x
  assert:
    that:
    - cm_query_epg_1 is not changed
    - nm_query_epg_1 is not changed
    - nm_query_epg_3 is not changed
    - nm_query_epg_4 is not changed
    - nm_query_epg_1.current.subnets | length == 3
    - nm_query_epg_1.current.name == "ansible_test_1"
    - nm_query_epg_1.current.vrfRef.templateName == nm_query_epg_1.current.bdRef.templateName == "Template1"
    - nm_query_epg_1.current.vrfRef.vrfName == "VRF"
    - nm_query_epg_1.current.bdRef.bdName == "ansible_test_1"
    - nm_query_epg_1.current.uSegEpg == true
    - nm_query_epg_1.current.intraEpg == 'enforced'
    - nm_query_epg_1.current.mCastSource == true
    - nm_query_epg_1.current.proxyArp == true
    - nm_query_epg_1.current.preferredGroup == true
    - nm_query_epg_1.current.subnets[0].description == "10.1.0.127/24"
    - nm_query_epg_1.current.subnets[0].ip == "10.1.0.127/24"
    - nm_query_epg_1.current.subnets[0].noDefaultGateway == false
    - nm_query_epg_1.current.subnets[0].scope == "private"
    - nm_query_epg_1.current.subnets[0].shared == false
    - nm_query_epg_1.current.subnets[1].description == "New description for a subnet"
    - nm_query_epg_1.current.subnets[1].ip == "172.17.0.1/24"
    - nm_query_epg_1.current.subnets[1].noDefaultGateway == false
    - nm_query_epg_1.current.subnets[1].scope == "private"
    - nm_query_epg_1.current.subnets[1].shared == false
    - nm_query_epg_1.current.subnets[2].description == "My description for a subnet"
    - nm_query_epg_1.current.subnets[2].ip == "192.168.1.254/24"
    - nm_query_epg_1.current.subnets[2].noDefaultGateway == false
    - nm_query_epg_1.current.subnets[2].scope == "private"
    - nm_query_epg_1.current.subnets[2].shared == false
    - nm_query_epg_3.current.name == "ansible_test_3"
    - nm_query_epg_4.current.name == "ansible_test_4"
    - nm_query_epg_3.current.vrfRef.templateName == nm_query_epg_4.current.vrfRef.templateName == "Template1"
    - nm_query_epg_3.current.vrfRef.vrfName == nm_query_epg_4.current.vrfRef.vrfName == "VRF"
    - nm_query_epg_3.current.bdRef.templateName == nm_query_epg_4.current.bdRef.templateName == "Template1"
    - nm_query_epg_3.current.bdRef.bdName == nm_query_epg_4.current.bdRef.bdName == "ansible_test_1"
    - nm_query_epg_3.current.uSegEpg == true
    - nm_query_epg_3.current.intraEpg == 'enforced'
    - nm_query_epg_3.current.mCastSource == true
    - nm_query_epg_3.current.proxyArp == true
    - nm_query_epg_3.current.preferredGroup == true
    - nm_query_epg_3.current.subnets[0].description == "10.0.0.128/24"
    - nm_query_epg_3.current.subnets[0].ip == "10.0.0.128/24"
    - nm_query_epg_3.current.subnets[0].noDefaultGateway == false
    - nm_query_epg_3.current.subnets[0].scope == "private"
    - nm_query_epg_3.current.subnets[0].shared == false
    - nm_query_epg_3.current.subnets[1].description == "1234567890"
    - nm_query_epg_3.current.subnets[1].ip == "10.0.1.254/24"
    - nm_query_epg_3.current.subnets[1].noDefaultGateway == false
    - nm_query_epg_3.current.subnets[1].scope == "private"
    - nm_query_epg_3.current.subnets[1].shared == false
    - nm_query_epg_3.current.subnets[2].description == "My description for a subnet"
    - nm_query_epg_3.current.subnets[2].ip == "172.16.0.1/24"
    - nm_query_epg_3.current.subnets[2].noDefaultGateway == false
    - nm_query_epg_3.current.subnets[2].scope == "public"
    - nm_query_epg_3.current.subnets[2].shared == true
    - nm_query_epg_3.current.subnets[3].description == "My description for a subnet"
    - nm_query_epg_3.current.subnets[3].ip == "192.168.0.254/24"
    - nm_query_epg_3.current.subnets[3].noDefaultGateway == true
    - nm_query_epg_3.current.subnets[3].scope == "private"
    - nm_query_epg_3.current.subnets[3].shared == false

# REMOVE EPG
- name: Remove EPG (check_mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    state: absent
  check_mode: yes
  register: cm_remove_epg

- name: Verify cm_remove_epg
  assert:
    that:
    - cm_remove_epg is changed
    - cm_remove_epg.current == {}

- name: Remove EPG (normal mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    state: absent
  register: nm_remove_epg

- name: Verify nm_remove_epg
  assert:
    that:
    - nm_remove_epg is changed
    - nm_remove_epg.current == {}

- name: Remove EPG again (check_mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    state: absent
  check_mode: yes
  register: cm_remove_epg_again

- name: Verify cm_remove_epg_again
  assert:
    that:
    - cm_remove_epg_again is not changed
    - cm_remove_epg_again.current == {}

- name: Remove EPG again (normal mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    state: absent
  register: nm_remove_epg_again

- name: Verify nm_remove_epg_again
  assert:
    that:
    - nm_remove_epg_again is not changed
    - nm_remove_epg_again.current == {}

- name: Remove EPG (normal mode)
  mso_schema_template_anp_epg:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    state: absent
  ignore_errors: yes

# Add EPG when MSO version >= 3.3
- name: Execute tasks only for MSO version >= 3.3
  when: version.current.version is version('3.3', '>=')
  block:
  - name: Add EPG (for version greater than 3.3)
    mso_schema_template_anp_epg: &new_epg
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template 1
      anp: ANP
      epg: ansible_test_1
      description: 'Description of ANP EPG'
      state: present
    register: add_epg_desc

  - name: Verify Add description
    assert:
      that:
      - add_epg_desc is changed
      - add_epg_desc.current.description == "Description of ANP EPG"

  - name: Add EPG service type parameters (for version greater than 3.3)
    mso_schema_template_anp_epg:
      <<: *new_epg
      epg_type: 'service'
      deployment_type: 'third_party'
      service_type: 'Azure-Storage'
      access_type: 'public_and_private'
    register: add_epg

  - name: Get Validation status for service type parameters
    mso_schema_validate:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      state: query
    ignore_errors: yes
    register: query_validate

  - name: Verify validation
    assert:
      that:
      - query_validate is not changed
      - query_validate.msg == "MSO Error 400{{':'}} Bad Request{{':'}} Patch Failed, Received{{':'}} For Deployment type 'Third-party' access type 'PublicAndPrivate' is not supported exception while trying to update schema"

  - name: Add EPG service type parameters (for version greater than 3.3)
    mso_schema_template_anp_epg:
      <<: *new_epg
      epg_type: 'service'
      deployment_type: 'cloud_native'
      service_type: 'Azure-Storage'
      access_type: 'public'
    register: add_epg

  - name: Get Validation status for service type parameters
    mso_schema_validate:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      state: query
    ignore_errors: yes
    register: query_validate

  - name: Verify validation
    assert:
      that:
      - query_validate is not changed
      - query_validate.current.result == "true"

  - name: Add new EPG service type parameters (for version greater than 3.3)
    mso_schema_template_anp_epg:
      <<: *new_epg
      epg_type: 'service'
      deployment_type: 'third_party'
      service_type: 'Azure-Storage'
      access_type: 'private'
    register: add_epg

  - name: Get Validation status for service type parameters
    mso_schema_validate:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      state: query
    ignore_errors: yes
    register: query_validate

  - name: Verify validation
    assert:
      that:
      - query_validate is not changed
      - query_validate.current.result == "true"

# Add QoS level to EPG
- name: Add EPG (for version greater than 3.1)
  mso_schema_template_anp_epg:
    <<: *epg_present
    name: ansible_test_5
    qos_level: 'level2'
  register: add_epg
  when: version.current.version is version('3.1', '>=')

- name: Verify Add contract for version greater than 3.1
  assert:
    that:
    - add_epg is changed
  when: version.current.version is version('3.1', '>=')

# QUERY NON-EXISTING EPG
- name: Query non-existing EPG (check_mode)
  mso_schema_template_anp_epg:
    <<: *epg_query
    epg: non_existing_epg
  check_mode: yes
  ignore_errors: yes
  register: cm_query_non_epg

- name: Query non-existing EPG (normal mode)
  mso_schema_template_anp_epg:
    <<: *epg_query
    epg: non_existing_epg
  ignore_errors: yes
  register: nm_query_non_epg

- name: Verify query_non_epg
  assert:
    that:
    - cm_query_non_epg is not changed
    - nm_query_non_epg is not changed
    - cm_query_non_epg == nm_query_non_epg
    - cm_query_non_epg.msg == nm_query_non_epg.msg == "EPG 'non_existing_epg' not found"

# QUERY NON-EXISTING ANP
- name: Query non-existing ANP (check_mode)
  mso_schema_template_anp_epg:
    <<: *epg_query
    anp: non_existing_anp
  check_mode: yes
  ignore_errors: yes
  register: cm_query_non_anp

- name: Query non-existing ANP (normal mode)
  mso_schema_template_anp_epg:
    <<: *epg_query
    anp: non_existing_anp
  ignore_errors: yes
  register: nm_query_non_anp

- name: Verify query_non_anp
  assert:
    that:
    - cm_query_non_anp is not changed
    - nm_query_non_anp is not changed
    - cm_query_non_anp == nm_query_non_anp
    - cm_query_non_anp.msg == nm_query_non_anp.msg == "Provided anp 'non_existing_anp' does not exist. Existing anps{{':'}} ANP"

# USE A NON-EXISTING STATE
- name: Non-existing state for EPG (check_mode)
  mso_schema_template_anp_epg:
    <<: *epg_query
    epg: ansible_test_2
    state: non-existing-state
  check_mode: yes
  ignore_errors: yes
  register: cm_non_existing_state

- name: Non-existing state for EPG (normal_mode)
  mso_schema_template_anp_epg:
    <<: *epg_query
    epg: ansible_test_2
    state: non-existing-state
  ignore_errors: yes
  register: nm_non_existing_state

- name: Verify non_existing_state
  assert:
    that:
    - cm_non_existing_state is not changed
    - nm_non_existing_state is not changed
    - cm_non_existing_state == nm_non_existing_state
    - cm_non_existing_state.msg == nm_non_existing_state.msg == "value of state must be one of{{':'}} absent, present, query, got{{':'}} non-existing-state"

# USE A NON-EXISTING SCHEMA
- name: Non-existing schema for EPG (check_mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    schema: non-existing-schema
    epg: ansible_test_2
  check_mode: yes
  ignore_errors: yes
  register: cm_non_existing_schema

- name: Non-existing schema for EPG (normal_mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    schema: non-existing-schema
    epg: ansible_test_2
  ignore_errors: yes
  register: nm_non_existing_schema

- name: Verify non_existing_schema
  assert:
    that:
    - cm_non_existing_schema is not changed
    - nm_non_existing_schema is not changed
    - cm_non_existing_schema == nm_non_existing_schema
    - cm_non_existing_schema.msg == nm_non_existing_schema.msg == "Provided schema 'non-existing-schema' does not exist."

- name: Non-existing BD schema for EPG (check_mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    epg: ansible_test_2
    bd:
      name: ansible_test_1
      schema: non-existing-schema
      template: Template 1
  check_mode: yes
  ignore_errors: yes
  register: cm_non_existing_bd_schema

- name: Non-existing BD schema for EPG (normal_mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    epg: ansible_test_2
    bd:
      name: ansible_test_1
      schema: non-existing-schema
      template: Template 1
  ignore_errors: yes
  register: nm_non_existing_bd_schema

- name: Verify non_existing_bd_schema
  assert:
    that:
    - cm_non_existing_bd_schema is not changed
    - nm_non_existing_bd_schema is not changed
    - cm_non_existing_bd_schema == nm_non_existing_bd_schema
    - cm_non_existing_bd_schema.msg == nm_non_existing_bd_schema.msg == "Referenced schema 'non-existing-schema' in bdref does not exist"

- name: Non-existing VRF schema for EPG (check_mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    epg: ansible_test_2
    vrf:
      name: VRF
      schema: non-existing-schema
      template: Template 1
  check_mode: yes
  ignore_errors: yes
  register: cm_non_existing_vrf_schema

- name: Non-existing VRF schema for EPG (normal_mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    epg: ansible_test_2
    vrf:
      name: VRF
      schema: non-existing-schema
      template: Template 1
  ignore_errors: yes
  register: nm_non_existing_vrf_schema

- name: Verify non_existing_vrf_schema
  assert:
    that:
    - cm_non_existing_vrf_schema is not changed
    - nm_non_existing_vrf_schema is not changed
    - cm_non_existing_vrf_schema == nm_non_existing_vrf_schema
    - cm_non_existing_vrf_schema.msg == nm_non_existing_vrf_schema.msg == "Referenced schema 'non-existing-schema' in vrfref does not exist"

# USE A NON-EXISTING TEMPLATE
- name: Non-existing template for EPG (check_mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    template: non-existing-template
    epg: ansible_test_2
  check_mode: yes
  ignore_errors: yes
  register: cm_non_existing_template

- name: Non-existing template for EPG (normal_mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    template: non-existing-template
    epg: ansible_test_2
  ignore_errors: yes
  register: nm_non_existing_template

- name: Verify non_existing_template
  assert:
    that:
    - cm_non_existing_template is not changed
    - nm_non_existing_template is not changed
    - cm_non_existing_template == nm_non_existing_template
    - cm_non_existing_template.msg == nm_non_existing_template.msg == "Provided template 'non-existing-template' does not exist. Existing templates{{':'}} Template1, Template2"

# Checking if contract are removed after re-applying an EPG. (#13 | #62137)
- name: Add Contracts to EPG 2
  mso_schema_template_anp_epg_contract:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_2
    contract:
      name: '{{ item.name }}'
      template: '{{ item.template }}'
      type: '{{ item.type }}'
    state: present
  loop:
  - { name: Contract1, template: Template 1, type: consumer }
  - { name: Contract1, template: Template 1, type: provider }
  - { name: Contract2, template: Template 2, type: consumer }
  - { name: Contract2, template: Template 2, type: provider }

- name: Query EPG 2
  mso_schema_template_anp_epg:
    <<: *epg_query
    epg: ansible_test_2
  register: nm_query_contract_epg

- name: Verify that 4 contracts are in EPG 2 using nm_query_contract_epg
  assert:
    that:
    - nm_query_contract_epg.current.contractRelationships | length == 4


- name: Add EPG 2 again (normal_mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    epg: ansible_test_2
  register: nm_add_epg_2_again

- name: Verify that EPG 2 didn't change
  assert:
    that:
    - nm_add_epg_2_again is not changed

- name: Query EPG 2
  mso_schema_template_anp_epg:
    <<: *epg_query
    epg: ansible_test_2
  register: nm_query_contract_epg

- name: Verify that 4 contracts are in EPG 2 using nm_query_contract_epg
  assert:
    that:
    - nm_query_contract_epg.current.contractRelationships | length == 4

# Checking if issue when querying EPG and VRF is not defined (#66)
- name: Add new test EPG 3 (normal mode)
  mso_schema_template_anp_epg: &epg_present_2
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_3
    bd:
      name: ansible_test_1
  register: nm_add_epg_3

- name: Verify nm_add_epg_3
  assert:
    that:
    - nm_add_epg_3 is changed
    - nm_add_epg_3.current.name == 'ansible_test_3'
    - "'vrfRef' not in nm_add_epg_3.current"

- name: Query test EPG 3
  mso_schema_template_anp_epg:
    <<: *epg_present_2
  register: nm_query_epg_3

- name: Verify nm_query_epg_3
  assert:
    that:
    - nm_query_epg_3 is not changed
    - nm_query_epg_3.current.name == 'ansible_test_3'
    - "'vrfRef' not in nm_query_epg_3.current"

# Checking if modifying an EPG with existing contracts throw an MSO error. (#82)
- name: Change EPG 2 to add VRF (normal_mode)
  mso_schema_template_anp_epg:
    <<: *epg_present
    epg: ansible_test_2
    vrf:
      name: VRF2
    bd:
      name: ansible_test_2
  register: nm_change_epg_2_vrf

- name: Verify that EPG 2 did change
  assert:
    that:
    - nm_change_epg_2_vrf is changed
    - nm_change_epg_2_vrf.current.vrfRef.templateName == "Template1"
    - nm_change_epg_2_vrf.current.vrfRef.vrfName == "VRF2"
    - nm_change_epg_2_vrf.current.bdRef.bdName == "ansible_test_2"

- name: Query EPG 2
  mso_schema_template_anp_epg:
    <<: *epg_query
    epg: ansible_test_2
  register: nm_query_contract_epg_2

- name: Verify that 4 contracts are in EPG 2 using nm_query_contract_epg_2
  assert:
    that:
    - nm_query_contract_epg_2.current.contractRelationships | length == 4