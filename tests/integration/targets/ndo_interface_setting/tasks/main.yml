# Test code for the MSO modules
# Copyright: (c) 2024, Anvitha Jain (@anvjain) <anvjain@cisco.com>

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI MultiSite host, username and password
  ansible.builtin.fail:
    msg: 'Please define the following variables: mso_hostname, mso_username and mso_password.'
  when: mso_hostname is not defined or mso_username is not defined or mso_password is not defined

# CLEAN ENVIRONMENT
- name: Set vars
  ansible.builtin.set_fact:
    mso_info: &mso_info
      host: '{{ mso_hostname }}'
      username: '{{ mso_username }}'
      password: '{{ mso_password }}'
      validate_certs: '{{ mso_validate_certs | default(false) }}'
      use_ssl: '{{ mso_use_ssl | default(true) }}'
      use_proxy: '{{ mso_use_proxy | default(true) }}'
      output_level: '{{ mso_output_level | default("debug") }}'

# QUERY VERSION
- name: Query MSO version
  cisco.mso.mso_version:
    <<: *mso_info
    state: query
  register: version


- name: Execute tasks only for MSO version >= 4.3
  when: version.current.version is version('4.3', '>=')
  block:
    - name: Remove fabric template
      cisco.mso.ndo_template: &template_absent
        <<: *mso_info
        name: ansible_fabric_policy_template
        type: fabric_policy
        state: absent

    - name: Create a fabric template
      cisco.mso.ndo_template:
        <<: *template_absent
        state: present

    # Create domains
    - name: Create a physical domain
      cisco.mso.ndo_physical_domain:
        <<: *mso_info
        template: ansible_fabric_policy_template
        name: '{{ item }}'
        state: present
      loop:
        - 'ansible_physical_domain'
        - 'ansible_physical_domain_2'

    - name: Create a l3 domain
      cisco.mso.ndo_l3_domain:
        <<: *mso_info
        template: ansible_fabric_policy_template
        name: '{{ item }}'
        state: present
      loop:
        - 'ansible_l3_domain'
        - 'ansible_l3_domain_2'

    #  Create SyncE Interface Policy
    - name: Create a SyncE Interface Policy
      cisco.mso.ndo_synce_interface_policy:
        <<: *mso_info
        template: ansible_fabric_policy_template
        interface_policy: '{{ item }}'
        state: present
      loop:
        - 'ansible_synce_interface_policy'
        - 'ansible_synce_interface_policy_2'

    # Create MACsec Policy
    - name: Create a MACsec Policy
      cisco.mso.ndo_macsec_policy:
        <<: *mso_info
        template: ansible_fabric_policy_template
        macsec_policy: '{{ item }}'
        interface_type: access
        state: present
      loop:
        - 'ansible_macsec_policy'
        - 'ansible_macsec_policy_2'

    # CREATE

    # Interface Policy group interface_type physical
    - name: Create a Interface Policy group of interface_type 'physical' (check mode)
      cisco.mso.ndo_interface_setting: &add_interface_policy_group
        <<: *mso_info
        template: ansible_fabric_policy_template
        name: ansible_interface_policy_group
        interface_type: physical
        state: present
      check_mode: true
      register: cm_add_interface_policy_group

    - name: Create a Interface Policy group of interface_type 'physical'
      cisco.mso.ndo_interface_setting:
        <<: *add_interface_policy_group
      register: nm_add_interface_policy_group

    - name: Create Interface Policy group again
      cisco.mso.ndo_interface_setting:
        <<: *add_interface_policy_group
      register: nm_add_interface_policy_group_again

    - name: Assert Interface Policy group of interface_type 'physical' was created
      assert:
        that:
          - cm_add_interface_policy_group is changed
          - nm_add_interface_policy_group is changed
          - cm_add_interface_policy_group.previous == nm_add_interface_policy_group.previous == {}
          - cm_add_interface_policy_group.current == cm_add_interface_policy_group.proposed
          - cm_add_interface_policy_group.current.name == nm_add_interface_policy_group.current.name == "ansible_interface_policy_group"
          - cm_add_interface_policy_group.current.type == nm_add_interface_policy_group.current.type == "physical"
          - nm_add_interface_policy_group.current.cdp.adminState == "disabled"
          - nm_add_interface_policy_group.current.lldp.receiveState == "enabled"
          - nm_add_interface_policy_group.current.lldp.transmitState == "enabled"
          - nm_add_interface_policy_group.current.llfc.receiveState == "disabled"
          - nm_add_interface_policy_group.current.llfc.transmitState == "disabled"
          - nm_add_interface_policy_group.current.pfc.adminState == "auto"
          - nm_add_interface_policy_group.current.l2Interface.qinq == "disabled"
          - nm_add_interface_policy_group.current.l2Interface.reflectiveRelay == "disabled"
          - nm_add_interface_policy_group.current.l2Interface.vlanScope == "global"
          - nm_add_interface_policy_group.current.stp.bpduFilterEnabled == "disabled"
          - nm_add_interface_policy_group.current.stp.bpduGuardEnabled == "disabled"
          - nm_add_interface_policy_group.current.linkLevel.speed == "inherit"
          - nm_add_interface_policy_group.current.linkLevel.autoNegotiation == "on"
          - nm_add_interface_policy_group.current.linkLevel.bringUpDelay == 0
          - nm_add_interface_policy_group.current.linkLevel.debounceInterval == 100
          - nm_add_interface_policy_group.current.linkLevel.fec == "inherit"
          - nm_add_interface_policy_group.current.mcp.adminState == "enabled"
          - nm_add_interface_policy_group.current.mcp.mcpMode == "off"
          - nm_add_interface_policy_group.current.mcp.initialDelayTime == 0
          - nm_add_interface_policy_group.current.mcp.txFreq == 0
          - nm_add_interface_policy_group.current.mcp.txFreqMsec == 500
          - nm_add_interface_policy_group.current.mcp.gracePeriod == 3
          - nm_add_interface_policy_group.current.mcp.gracePeriodMsec == 0
          - nm_add_interface_policy_group.current.portChannelPolicy.minLinks == 0
          - nm_add_interface_policy_group.current.portChannelPolicy.maxLinks == 0
          - nm_add_interface_policy_group.current.portChannelPolicy.hashFields == None
          - nm_add_interface_policy_group.current.uuid is defined
          - nm_add_interface_policy_group_again is not changed
          - nm_add_interface_policy_group_again.previous.name == nm_add_interface_policy_group_again.current.name == "ansible_interface_policy_group"
          - nm_add_interface_policy_group_again.previous.type == nm_add_interface_policy_group_again.current.type == "physical"
          - nm_add_interface_policy_group_again.previous.cdp.adminState == nm_add_interface_policy_group_again.current.cdp.adminState == "disabled"
          - nm_add_interface_policy_group_again.previous.lldp.receiveState == nm_add_interface_policy_group_again.current.lldp.receiveState == "enabled"
          - nm_add_interface_policy_group_again.previous.lldp.transmitState == nm_add_interface_policy_group_again.current.lldp.transmitState == "enabled"
          - nm_add_interface_policy_group_again.previous.llfc.receiveState == nm_add_interface_policy_group_again.current.llfc.receiveState == "disabled"
          - nm_add_interface_policy_group_again.previous.llfc.transmitState == nm_add_interface_policy_group_again.current.llfc.transmitState == "disabled"
          - nm_add_interface_policy_group_again.previous.pfc.adminState == nm_add_interface_policy_group_again.current.pfc.adminState == "auto"
          - nm_add_interface_policy_group_again.previous.l2Interface.qinq == nm_add_interface_policy_group_again.current.l2Interface.qinq == "disabled"
          - nm_add_interface_policy_group_again.previous.l2Interface.reflectiveRelay == nm_add_interface_policy_group_again.current.l2Interface.reflectiveRelay == "disabled"
          - nm_add_interface_policy_group_again.previous.l2Interface.vlanScope == nm_add_interface_policy_group_again.current.l2Interface.vlanScope == "global"
          - nm_add_interface_policy_group_again.previous.stp.bpduFilterEnabled == nm_add_interface_policy_group_again.current.stp.bpduFilterEnabled == "disabled"
          - nm_add_interface_policy_group_again.previous.stp.bpduGuardEnabled == nm_add_interface_policy_group_again.current.stp.bpduGuardEnabled == "disabled"
          - nm_add_interface_policy_group_again.previous.linkLevel.speed == nm_add_interface_policy_group_again.current.linkLevel.speed == "inherit"
          - nm_add_interface_policy_group_again.previous.linkLevel.autoNegotiation == nm_add_interface_policy_group_again.current.linkLevel.autoNegotiation == "on"
          - nm_add_interface_policy_group_again.previous.linkLevel.bringUpDelay == nm_add_interface_policy_group_again.current.linkLevel.bringUpDelay == 0
          - nm_add_interface_policy_group_again.previous.linkLevel.debounceInterval == nm_add_interface_policy_group_again.current.linkLevel.debounceInterval == 100
          - nm_add_interface_policy_group_again.previous.linkLevel.fec == nm_add_interface_policy_group_again.current.linkLevel.fec == "inherit"
          - nm_add_interface_policy_group_again.previous.mcp.adminState == nm_add_interface_policy_group_again.current.mcp.adminState == "enabled"
          - nm_add_interface_policy_group_again.previous.mcp.mcpMode == nm_add_interface_policy_group_again.current.mcp.mcpMode == "off"
          - nm_add_interface_policy_group_again.previous.mcp.initialDelayTime == nm_add_interface_policy_group_again.current.mcp.initialDelayTime == 0
          - nm_add_interface_policy_group_again.previous.mcp.txFreq == nm_add_interface_policy_group_again.current.mcp.txFreq == 0
          - nm_add_interface_policy_group_again.previous.mcp.txFreqMsec == nm_add_interface_policy_group_again.current.mcp.txFreqMsec == 500
          - nm_add_interface_policy_group_again.previous.mcp.gracePeriod == nm_add_interface_policy_group_again.current.mcp.gracePeriod == 3
          - nm_add_interface_policy_group_again.previous.mcp.gracePeriodMsec == nm_add_interface_policy_group_again.current.mcp.gracePeriodMsec == 0
          - nm_add_interface_policy_group_again.previous.portChannelPolicy.minLinks == nm_add_interface_policy_group_again.current.portChannelPolicy.minLinks == 0
          - nm_add_interface_policy_group_again.previous.portChannelPolicy.maxLinks == nm_add_interface_policy_group_again.current.portChannelPolicy.maxLinks == 0
          - nm_add_interface_policy_group_again.previous.portChannelPolicy.hashFields == nm_add_interface_policy_group_again.current.portChannelPolicy.hashFields == None
          - nm_add_interface_policy_group_again.previous.uuid is defined
          - nm_add_interface_policy_group_again.current.uuid is defined


    # Interface Policy group interface_type PC/VPC
    - name: Create a Interface Policy group of interface_type 'port_channel' (check mode)
      cisco.mso.ndo_interface_setting: &add_interface_policy_group_pc
        <<: *mso_info
        template: ansible_fabric_policy_template
        name: ansible_interface_policy_group_pc
        interface_type: port_channel
        speed: 100G
        auto_negotiation: on_enforce
        vlan_scope: port_local
        cdp_admin_state: enabled
        port_channel_mode: lacp_active
        min_links: 5
        max_links: 50
        controls: ["fast_sel_hot_stdby", "graceful_conv", "susp_individual", "symmetric_hash"]
        load_balance_hashing: destination_ip
        link_level_debounce_interval: 200
        link_level_bring_up_delay: 500
        link_level_fec: ieee_rs_fec
        l2_interface_qinq: edge_port
        l2_interface_reflective_relay: enabled
        lldp:
          status: disabled
          transmit_state: disabled
          receive_state: disabled
        stp_bpdu_filter: enabled
        stp_bpdu_guard: enabled
        llfc_transmit_state: enabled
        llfc_receive_state: enabled
        mcp:
          admin_state: disabled
        pfc_admin_state: off
        synce: ansible_synce_interface_policy
        access_macsec_policy: ansible_macsec_policy
        domains: ["ansible_physical_domain", "ansible_l3_domain"]
        state: present
      check_mode: true
      register: cm_add_interface_policy_group_pc
    
    - name: Create a Interface Policy group of interface_type 'port_channel'
      cisco.mso.ndo_interface_setting:
        <<: *add_interface_policy_group_pc
      register: nm_add_interface_policy_group_pc

    - name: Assert Interface Policy group of interface_type 'port_channel' was created
      assert:
        that:
          - cm_add_interface_policy_group_pc is changed
          - nm_add_interface_policy_group_pc is changed
          - cm_add_interface_policy_group_pc.previous == nm_add_interface_policy_group_pc.previous == {}
          - cm_add_interface_policy_group_pc.current == cm_add_interface_policy_group_pc.proposed
          - cm_add_interface_policy_group_pc.current.name == nm_add_interface_policy_group_pc.current.name == "ansible_interface_policy_group_pc"
          - cm_add_interface_policy_group_pc.current.type == nm_add_interface_policy_group_pc.current.type == "portchannel"
          - cm_add_interface_policy_group_pc.current.cdp.adminState == nm_add_interface_policy_group_pc.current.cdp.adminState == "enabled"
          - cm_add_interface_policy_group_pc.current.lldp.receiveState == nm_add_interface_policy_group_pc.current.lldp.receiveState == "disabled"
          - cm_add_interface_policy_group_pc.current.lldp.transmitState == nm_add_interface_policy_group_pc.current.lldp.transmitState == "disabled"
          - cm_add_interface_policy_group_pc.current.llfc.receiveState == nm_add_interface_policy_group_pc.current.llfc.receiveState == "enabled"
          - cm_add_interface_policy_group_pc.current.llfc.transmitState == nm_add_interface_policy_group_pc.current.llfc.transmitState == "enabled"
          - cm_add_interface_policy_group_pc.current.pfc.adminState == nm_add_interface_policy_group_pc.current.pfc.adminState == "off"
          - cm_add_interface_policy_group_pc.current.l2Interface.qinq == nm_add_interface_policy_group_pc.current.l2Interface.qinq == "edgePort"
          - cm_add_interface_policy_group_pc.current.l2Interface.reflectiveRelay == nm_add_interface_policy_group_pc.current.l2Interface.reflectiveRelay == "enabled"
          - cm_add_interface_policy_group_pc.current.l2Interface.vlanScope == nm_add_interface_policy_group_pc.current.l2Interface.vlanScope == "portlocal"
          - cm_add_interface_policy_group_pc.current.stp.bpduFilterEnabled == nm_add_interface_policy_group_pc.current.stp.bpduFilterEnabled == "enabled"
          - cm_add_interface_policy_group_pc.current.stp.bpduGuardEnabled == nm_add_interface_policy_group_pc.current.stp.bpduGuardEnabled == "enabled"
          - cm_add_interface_policy_group_pc.current.linkLevel.speed == nm_add_interface_policy_group_pc.current.linkLevel.speed == "100G"
          - cm_add_interface_policy_group_pc.current.linkLevel.autoNegotiation == nm_add_interface_policy_group_pc.current.linkLevel.autoNegotiation == "on-enforce"
          - cm_add_interface_policy_group_pc.current.linkLevel.bringUpDelay == nm_add_interface_policy_group_pc.current.linkLevel.bringUpDelay == 500
          - cm_add_interface_policy_group_pc.current.linkLevel.debounceInterval == nm_add_interface_policy_group_pc.current.linkLevel.debounceInterval == 200
          - cm_add_interface_policy_group_pc.current.linkLevel.fec == nm_add_interface_policy_group_pc.current.linkLevel.fec == "ieee-rs-fec"
          - cm_add_interface_policy_group_pc.current.mcp.adminState == nm_add_interface_policy_group_pc.current.mcp.adminState == "disabled"
          - cm_add_interface_policy_group_pc.current.portChannelPolicy.minLinks == nm_add_interface_policy_group_pc.current.portChannelPolicy.minLinks == 5
          - cm_add_interface_policy_group_pc.current.portChannelPolicy.maxLinks == nm_add_interface_policy_group_pc.current.portChannelPolicy.maxLinks == 50
          - cm_add_interface_policy_group_pc.current.portChannelPolicy.hashFields == nm_add_interface_policy_group_pc.current.portChannelPolicy.hashFields == "dst-ip"
          - cm_add_interface_policy_group_pc.current.portChannelPolicy.control | length == nm_add_interface_policy_group_pc.current.portChannelPolicy.control | length == 4
          - cm_add_interface_policy_group_pc.current.portChannelPolicy.control.0 == nm_add_interface_policy_group_pc.current.portChannelPolicy.control.0 == "fast-sel-hot-stdby"
          - cm_add_interface_policy_group_pc.current.portChannelPolicy.control.1 == nm_add_interface_policy_group_pc.current.portChannelPolicy.control.1 == "graceful-conv"
          - cm_add_interface_policy_group_pc.current.portChannelPolicy.control.2 == nm_add_interface_policy_group_pc.current.portChannelPolicy.control.2 == "susp-individual"
          - cm_add_interface_policy_group_pc.current.portChannelPolicy.control.3 == nm_add_interface_policy_group_pc.current.portChannelPolicy.control.3 == "symmetric-hash"
          - cm_add_interface_policy_group_pc.current.syncEthPolicy == nm_add_interface_policy_group_pc.current.syncEthPolicy
          - cm_add_interface_policy_group_pc.current.accessMACsecPolicy == nm_add_interface_policy_group_pc.current.accessMACsecPolicy
          - cm_add_interface_policy_group_pc.current.domains | length == nm_add_interface_policy_group_pc.current.domains | length == 2


    # UPDATE
    - name: Update a Interface Policy group of interface_type 'physical' (check mode)
      cisco.mso.ndo_interface_setting: &update_interface_policy_group
        <<: *add_interface_policy_group_pc
        description: "This is a test interface policy group"
        speed: 400G
        auto_negotiation: on
        vlan_scope: global
        cdp_admin_state: disabled
        port_channel_mode: mac_pinning
        min_links: 6
        max_links: 60
        controls: ["fast_sel_hot_stdby", "graceful_conv", "susp_individual", "load_defer", "symmetric_hash"]
        load_balance_hashing: source_ip
        link_level_debounce_interval: 300
        link_level_bring_up_delay: 600
        link_level_fec: cl91_rs_fec
        l2_interface_qinq: double_q_tag_port
        l2_interface_reflective_relay: disabled
        lldp:
          status: enabled
          transmit_state: enabled
          receive_state: enabled
        stp_bpdu_filter: disabled
        stp_bpdu_guard: disabled
        llfc_transmit_state: disabled
        llfc_receive_state: disabled
        mcp:
          admin_state: enabled
          strict_mode: on
          initial_delay_time: 255
          transmission_frequency_sec: 40
          transmission_frequency_msec: 40
          grace_period_sec: 60
          grace_period_msec: 60
        pfc_admin_state: on
        synce: ansible_synce_interface_policy_2
        access_macsec_policy: ansible_macsec_policy_2
        domains: ["ansible_physical_domain_2", "ansible_l3_domain_2"]
        state: present
      check_mode: true
      register: cm_update_interface_policy_group

    - name: Update a Interface Policy group of interface_type 'physical'
      cisco.mso.ndo_interface_setting:
        <<: *update_interface_policy_group
      register: nm_update_interface_policy_group

    - name: Update Interface Policy group again
      cisco.mso.ndo_interface_setting:
        <<: *update_interface_policy_group
      register: update_interface_policy_group_again

    - name: Assert Interface Policy group was updated
      assert:
        that:
          - cm_update_interface_policy_group is changed
          - nm_update_interface_policy_group is changed
          - cm_update_interface_policy_group.previous == nm_update_interface_policy_group.previous
          - cm_update_interface_policy_group.current == cm_update_interface_policy_group.proposed
          - cm_update_interface_policy_group.current.name == nm_update_interface_policy_group.current.name == "ansible_interface_policy_group_pc"
          - cm_update_interface_policy_group.current.type == nm_update_interface_policy_group.current.type == "portchannel"
          - cm_update_interface_policy_group.previous.cdp.adminState == nm_update_interface_policy_group.previous.cdp.adminState == "enabled"
          - cm_update_interface_policy_group.current.cdp.adminState == nm_update_interface_policy_group.current.cdp.adminState == "disabled"
          - cm_update_interface_policy_group.previous.lldp.receiveState == nm_update_interface_policy_group.previous.lldp.receiveState == "disabled"
          - cm_update_interface_policy_group.current.lldp.receiveState == nm_update_interface_policy_group.current.lldp.receiveState == "enabled"
          - cm_update_interface_policy_group.previous.lldp.transmitState == nm_update_interface_policy_group.previous.lldp.transmitState == "disabled"
          - cm_update_interface_policy_group.current.lldp.transmitState == nm_update_interface_policy_group.current.lldp.transmitState == "enabled"
          - cm_update_interface_policy_group.previous.llfc.receiveState == nm_update_interface_policy_group.previous.llfc.receiveState == "enabled"
          - cm_update_interface_policy_group.current.llfc.receiveState == nm_update_interface_policy_group.current.llfc.receiveState == "disabled"
          - cm_update_interface_policy_group.previous.llfc.transmitState == nm_update_interface_policy_group.previous.llfc.transmitState == "enabled"
          - cm_update_interface_policy_group.current.llfc.transmitState == nm_update_interface_policy_group.current.llfc.transmitState == "disabled"
          - cm_update_interface_policy_group.previous.pfc.adminState == nm_update_interface_policy_group.previous.pfc.adminState == "off"
          - cm_update_interface_policy_group.current.pfc.adminState == nm_update_interface_policy_group.current.pfc.adminState == "on"
          - cm_update_interface_policy_group.previous.l2Interface.qinq == nm_update_interface_policy_group.previous.l2Interface.qinq == "edgePort"
          - cm_update_interface_policy_group.current.l2Interface.qinq == nm_update_interface_policy_group.current.l2Interface.qinq == "doubleQtagPort"
          - cm_update_interface_policy_group.previous.l2Interface.reflectiveRelay == nm_update_interface_policy_group.previous.l2Interface.reflectiveRelay == "enabled"
          - cm_update_interface_policy_group.current.l2Interface.reflectiveRelay == nm_update_interface_policy_group.current.l2Interface.reflectiveRelay == "disabled"
          - cm_update_interface_policy_group.previous.l2Interface.vlanScope == nm_update_interface_policy_group.previous.l2Interface.vlanScope == "portlocal"
          - cm_update_interface_policy_group.current.l2Interface.vlanScope == nm_update_interface_policy_group.current.l2Interface.vlanScope == "global"
          - cm_update_interface_policy_group.previous.stp.bpduFilterEnabled == nm_update_interface_policy_group.previous.stp.bpduFilterEnabled == "enabled"
          - cm_update_interface_policy_group.current.stp.bpduFilterEnabled == nm_update_interface_policy_group.current.stp.bpduFilterEnabled == "disabled"
          - cm_update_interface_policy_group.previous.stp.bpduGuardEnabled == nm_update_interface_policy_group.previous.stp.bpduGuardEnabled == "enabled"
          - cm_update_interface_policy_group.current.stp.bpduGuardEnabled == nm_update_interface_policy_group.current.stp.bpduGuardEnabled == "disabled"
          - cm_update_interface_policy_group.previous.linkLevel.speed == nm_update_interface_policy_group.previous.linkLevel.speed == "100G"
          - cm_update_interface_policy_group.current.linkLevel.speed == nm_update_interface_policy_group.current.linkLevel.speed == "400G"
          - cm_update_interface_policy_group.previous.linkLevel.autoNegotiation == nm_update_interface_policy_group.previous.linkLevel.autoNegotiation == "on-enforce"
          - cm_update_interface_policy_group.current.linkLevel.autoNegotiation == nm_update_interface_policy_group.current.linkLevel.autoNegotiation == "on"
          - cm_update_interface_policy_group.previous.linkLevel.bringUpDelay == nm_update_interface_policy_group.previous.linkLevel.bringUpDelay == 500
          - cm_update_interface_policy_group.current.linkLevel.bringUpDelay == nm_update_interface_policy_group.current.linkLevel.bringUpDelay == 600
          - cm_update_interface_policy_group.previous.linkLevel.debounceInterval == nm_update_interface_policy_group.previous.linkLevel.debounceInterval == 200
          - cm_update_interface_policy_group.current.linkLevel.debounceInterval == nm_update_interface_policy_group.current.linkLevel.debounceInterval == 300
          - cm_update_interface_policy_group.previous.linkLevel.fec == nm_update_interface_policy_group.previous.linkLevel.fec == "ieee-rs-fec"
          - cm_update_interface_policy_group.current.linkLevel.fec == nm_update_interface_policy_group.current.linkLevel.fec == "cl91-rs-fec"
          - cm_update_interface_policy_group.previous.mcp.adminState == nm_update_interface_policy_group.previous.mcp.adminState == "disabled"
          - cm_update_interface_policy_group.current.mcp.adminState == nm_update_interface_policy_group.current.mcp.adminState == "enabled"
          - cm_update_interface_policy_group.previous.mcp.mcpMode == nm_update_interface_policy_group.previous.mcp.mcpMode == "off"
          - cm_update_interface_policy_group.current.mcp.mcpMode == nm_update_interface_policy_group.current.mcp.mcpMode == "on"
          - cm_update_interface_policy_group.previous.mcp.initialDelayTime == nm_update_interface_policy_group.previous.mcp.initialDelayTime == 0
          - cm_update_interface_policy_group.current.mcp.initialDelayTime == nm_update_interface_policy_group.current.mcp.initialDelayTime == 255
          - cm_update_interface_policy_group.previous.mcp.txFreq == nm_update_interface_policy_group.previous.mcp.txFreq == 0
          - cm_update_interface_policy_group.current.mcp.txFreq == nm_update_interface_policy_group.current.mcp.txFreq == 40
          - cm_update_interface_policy_group.previous.mcp.txFreqMsec == nm_update_interface_policy_group.previous.mcp.txFreqMsec == 500
          - cm_update_interface_policy_group.current.mcp.txFreqMsec == nm_update_interface_policy_group.current.mcp.txFreqMsec == 40
          - cm_update_interface_policy_group.previous.mcp.gracePeriod == nm_update_interface_policy_group.previous.mcp.gracePeriod == 3
          - cm_update_interface_policy_group.current.mcp.gracePeriod == nm_update_interface_policy_group.current.mcp.gracePeriod == 60
          - cm_update_interface_policy_group.previous.mcp.gracePeriodMsec == nm_update_interface_policy_group.previous.mcp.gracePeriodMsec == 0
          - cm_update_interface_policy_group.current.mcp.gracePeriodMsec == nm_update_interface_policy_group.current.mcp.gracePeriodMsec == 60
          - cm_update_interface_policy_group.previous.portChannelPolicy.minLinks == nm_update_interface_policy_group.previous.portChannelPolicy.minLinks == 5
          - cm_update_interface_policy_group.current.portChannelPolicy.minLinks == nm_update_interface_policy_group.current.portChannelPolicy.minLinks == 6
          - cm_update_interface_policy_group.previous.portChannelPolicy.maxLinks == nm_update_interface_policy_group.previous.portChannelPolicy.maxLinks == 50
          - cm_update_interface_policy_group.current.portChannelPolicy.maxLinks == nm_update_interface_policy_group.current.portChannelPolicy.maxLinks == 60
          - cm_update_interface_policy_group.previous.portChannelPolicy.hashFields == nm_update_interface_policy_group.previous.portChannelPolicy.hashFields == "dst-ip"
          - cm_update_interface_policy_group.current.portChannelPolicy.hashFields == nm_update_interface_policy_group.current.portChannelPolicy.hashFields == "src-ip"
          - cm_update_interface_policy_group.previous.portChannelPolicy.control | length == nm_update_interface_policy_group.previous.portChannelPolicy.control | length == 4
          - cm_update_interface_policy_group.previous.portChannelPolicy.control.0 == nm_update_interface_policy_group.previous.portChannelPolicy.control.0 == "fast-sel-hot-stdby"
          - cm_update_interface_policy_group.previous.portChannelPolicy.control.1 == nm_update_interface_policy_group.previous.portChannelPolicy.control.1 == "graceful-conv"
          - cm_update_interface_policy_group.previous.portChannelPolicy.control.2 == nm_update_interface_policy_group.previous.portChannelPolicy.control.2 == "susp-individual"
          - cm_update_interface_policy_group.previous.portChannelPolicy.control.3 == nm_update_interface_policy_group.previous.portChannelPolicy.control.3 == "symmetric-hash"
          - cm_update_interface_policy_group.current.portChannelPolicy.control | length == nm_update_interface_policy_group.current.portChannelPolicy.control | length == 5
          - cm_update_interface_policy_group.current.portChannelPolicy.control.0 == nm_update_interface_policy_group.current.portChannelPolicy.control.0 == "fast-sel-hot-stdby"
          - cm_update_interface_policy_group.current.portChannelPolicy.control.1 == nm_update_interface_policy_group.current.portChannelPolicy.control.1 == "graceful-conv"
          - cm_update_interface_policy_group.current.portChannelPolicy.control.2 == nm_update_interface_policy_group.current.portChannelPolicy.control.2 == "susp-individual"
          - cm_update_interface_policy_group.current.portChannelPolicy.control.3 == nm_update_interface_policy_group.current.portChannelPolicy.control.3 == "load-defer"
          - cm_update_interface_policy_group.current.portChannelPolicy.control.4 == nm_update_interface_policy_group.current.portChannelPolicy.control.4 == "symmetric-hash"
          - cm_update_interface_policy_group.previous.syncEthPolicy == nm_update_interface_policy_group.previous.syncEthPolicy
          - cm_update_interface_policy_group.current.syncEthPolicy == nm_update_interface_policy_group.current.syncEthPolicy
          - cm_update_interface_policy_group.previous.accessMACsecPolicy == nm_update_interface_policy_group.previous.accessMACsecPolicy
          - cm_update_interface_policy_group.current.accessMACsecPolicy == nm_update_interface_policy_group.current.accessMACsecPolicy
          - cm_update_interface_policy_group.current.domains | length == nm_update_interface_policy_group.current.domains | length == 2
          - cm_update_interface_policy_group.current.domains[0] == nm_update_interface_policy_group.current.domains[0]
          - cm_update_interface_policy_group.current.domains[1] == nm_update_interface_policy_group.current.domains[1]
          - update_interface_policy_group_again is not changed
          - update_interface_policy_group_again.previous == update_interface_policy_group_again.current

    # Update Interface Policy group name with mcp_strict_mode off and remove domains
    - name: Update a Interface Policy group of interface_type 'physical' with MCP strict_mode off
      cisco.mso.ndo_interface_setting: &update_mcp
        <<: *update_interface_policy_group
        uuid: '{{ nm_update_interface_policy_group.current.uuid }}'
        name: ansible_interface_policy_group_changed
        domains: []
        mcp:
          strict_mode: off
      register: nm_update_interface_policy_name

    - name: Updated a Interface Policy group of interface_type 'physical' with MCP adminState disabled and remove control
      cisco.mso.ndo_interface_setting:
        <<: *update_mcp
        controls: []
        mcp:
          admin_state: disabled
      register: nm_update_interface_policy_mcp

    - name: Assert Interface Policy group name was updated with UUID updated control and MCP values
      assert:
        that:
          - nm_update_interface_policy_name is changed
          - nm_update_interface_policy_name.previous.name == "ansible_interface_policy_group_pc"
          - nm_update_interface_policy_name.current.name == "ansible_interface_policy_group_changed"
          - nm_update_interface_policy_name.previous.uuid is defined 
          - nm_update_interface_policy_name.current.uuid is defined
          - nm_update_interface_policy_name.previous.type == nm_update_interface_policy_name.current.type == "portchannel"
          - nm_update_interface_policy_name.previous.mcp.mcpMode == "on"
          - nm_update_interface_policy_name.current.mcp.mcpMode == "off"
          - nm_update_interface_policy_name.previous.mcp.adminState == nm_update_interface_policy_name.current.mcp.adminState == "enabled"
          - nm_update_interface_policy_name.previous.mcp.initialDelayTime == nm_update_interface_policy_name.current.mcp.initialDelayTime == 255
          - nm_update_interface_policy_name.previous.mcp.txFreq == nm_update_interface_policy_name.current.mcp.txFreq == 40
          - nm_update_interface_policy_name.previous.mcp.txFreqMsec == nm_update_interface_policy_name.current.mcp.txFreqMsec == 40
          - nm_update_interface_policy_name.previous.mcp.gracePeriod == nm_update_interface_policy_name.current.mcp.gracePeriod == 60
          - nm_update_interface_policy_name.previous.mcp.gracePeriodMsec == nm_update_interface_policy_name.current.mcp.gracePeriodMsec == 60
          - nm_update_interface_policy_name.previous.domains | length == 2
          - nm_update_interface_policy_name.current.domains is not defined
          - nm_update_interface_policy_mcp is changed
          - nm_update_interface_policy_mcp.previous.name == nm_update_interface_policy_mcp.current.name == "ansible_interface_policy_group_changed"
          - nm_update_interface_policy_mcp.previous.mcp.adminState == "enabled"
          - nm_update_interface_policy_mcp.current.mcp.adminState == "disabled"
          - nm_update_interface_policy_mcp.previous.portChannelPolicy.control | length == 5
          - nm_update_interface_policy_mcp.current.portChannelPolicy.control is not defined

    # QUERY
    - name: Query all Interface Policy groups in a template
      cisco.mso.ndo_interface_setting: &query_interface_policy_group
        <<: *mso_info
        template: ansible_fabric_policy_template
        state: query
      register: query_all

    - name: Query one Interface Policy group in a template with name
      cisco.mso.ndo_interface_setting:
        <<: *query_interface_policy_group
        name: ansible_interface_policy_group
      register: query_one

    - name: Verify query_one and query_all
      assert:
        that:
          - query_all is not changed
          - query_one is not changed
          - query_all.current | length >= 2
          - query_all.current.0.name == "ansible_interface_policy_group"
          - query_all.current.1.name == "ansible_interface_policy_group_changed"
          - query_one.current.name == "ansible_interface_policy_group"
          - query_one.current.type == "physical"

    - name: Query one Interface Policy group in a template with UUID
      cisco.mso.ndo_interface_setting:
        <<: *mso_info
        template: ansible_fabric_policy_template
        uuid: '{{ nm_add_interface_policy_group.current.uuid }}'
        state: query
      register: query_one_uuid

    - name: Verify query_one_uuid
      assert:
        that:
          - query_one_uuid is not changed
          - query_one_uuid.current.name == "ansible_interface_policy_group"

    # Create Interface Policy group without interface_type
    - name: Create a Interface Policy group without interface_type
      cisco.mso.ndo_interface_setting:
        <<: *mso_info
        template: ansible_fabric_policy_template
        name: ansible_interface_policy_group_without_interface_type
        state: present
      ignore_errors: true
      register: interface_policy_group_without_interface_type

    - name: Assert Interface Policy group without interface_type
      assert:
        that:
          - interface_policy_group_without_interface_type is failed
          - interface_policy_group_without_interface_type.msg == "Error{{':'}} Missing required argument 'interface_type' for creating an Interface Policy Group."

    # ERROR for LLDP
    - name: Create another Interface Policy group of interface_type 'physical'
      cisco.mso.ndo_interface_setting:
        <<: *mso_info
        template: ansible_fabric_policy_template
        name: ansible_interface_policy_group_2
        interface_type: physical
        lldp:
          status: disabled
          receive_state: enabled
          transmit_state: disabled
        description: "This is a test interface policy group"
        state: present
      ignore_errors: true
      register: nm_add_interface_policy_lldp

    - name: Assert adding the Interface Policy group with LLDP error
      assert:
        that:
          - nm_add_interface_policy_lldp is failed
          - nm_add_interface_policy_lldp.msg == "LLDP receive_state and transmit_state must be 'disabled' when LLDP status is disabled."

    # Non-existing domain
    - name: Create a Interface Policy group with non-existing domain
      cisco.mso.ndo_interface_setting:
        <<: *mso_info
        template: ansible_fabric_policy_template
        name: ansible_interface_policy_group_2
        interface_type: physical
        domains: ["non_existing_domain"]
        state: present
      ignore_errors: true
      register: nm_add_interface_policy_domain

    - name: Assert adding the Interface Policy group with non-existing domain
      assert:
        that:
          - nm_add_interface_policy_domain is failed
          - nm_add_interface_policy_domain.msg == "Domain 'non_existing_domain' not found in the template 'ansible_fabric_policy_template'."

    #  Non-existing syncE policy
    - name: Create a Interface Policy group with non-existing syncE policy
      cisco.mso.ndo_interface_setting:
        <<: *mso_info
        template: ansible_fabric_policy_template
        name: ansible_interface_policy_group_2
        interface_type: physical
        synce: non_existing_synce_interface_policy
        state: present
      ignore_errors: true
      register: nm_add_interface_policy_synce 

    - name: Assert adding the Interface Policy group with non-existing syncE policy
      assert:
        that:
          - nm_add_interface_policy_synce is failed
          - nm_add_interface_policy_synce.msg == "SyncE policy 'non_existing_synce_interface_policy' not found in the template 'ansible_fabric_policy_template'."

    # Non-existing access_macsec_policy
    - name: Create a Interface Policy group with non-existing access_macsec_policy
      cisco.mso.ndo_interface_setting:
        <<: *mso_info
        template: ansible_fabric_policy_template
        name: ansible_interface_policy_group_2
        interface_type: physical
        access_macsec_policy: non_existing_macsec_policy
        state: present
      ignore_errors: true
      register: nm_add_interface_policy_macsec

    - name: Assert adding the Interface Policy group with non-existing access_macsec_policy
      assert:
        that:
          - nm_add_interface_policy_macsec is failed
          - nm_add_interface_policy_macsec.msg == "Access MACsec policy 'non_existing_macsec_policy' not found in the template 'ansible_fabric_policy_template'."

    # Errors on update
    - name: Create another Interface Policy group of interface_type 'physical'
      cisco.mso.ndo_interface_setting: &add_interface_policy_group_2
        <<: *add_interface_policy_group
        name: ansible_interface_policy_group_2
        description: "Ansible test interface policy group"
        domains: ["ansible_physical_domain", "ansible_l3_domain"]
        synce: ansible_synce_interface_policy
        access_macsec_policy: ansible_macsec_policy
        mcp:
          admin_state: enabled
          strict_mode: on
          initial_delay_time: 250
          transmission_frequency_sec: 4
          transmission_frequency_msec: 4
          grace_period_sec: 6
          grace_period_msec: 6
      register: nm_add_interface_policy_2

    # updating interface_type of the interface policy group
    - name: Update Interface Policy group ansible_interface_policy_group_2 with interface_type 'port_channel'
      cisco.mso.ndo_interface_setting:
        <<: *add_interface_policy_group_2
        interface_type: port_channel
      ignore_errors: true
      register: nm_update_interface_policy_type

    - name: Assert updating the Interface Policy group with interface_type error
      assert:
        that:
          - nm_add_interface_policy_2 is changed
          - nm_add_interface_policy_2.current.name == nm_update_interface_policy_type.previous.name == "ansible_interface_policy_group_2"
          - nm_add_interface_policy_2.current.type == nm_update_interface_policy_type.previous.type == "physical"
          - nm_update_interface_policy_type is failed
          - nm_update_interface_policy_type.msg == "Interface type cannot be changed."

    # updating lldp when status is disabled
    - name: Update Interface Policy group ansible_interface_policy_group_2 with LLDP
      cisco.mso.ndo_interface_setting:
        <<: *add_interface_policy_group_2
        lldp:
          status: disabled
          transmit_state: disabled
          receive_state: enabled
      ignore_errors: true
      register: nm_update_interface_policy_lldp

    - name: Assert updating the Interface Policy group with LLDP error
      assert:
        that:
          - nm_update_interface_policy_lldp is failed
          - nm_update_interface_policy_lldp.msg == "LLDP receive_state and transmit_state must be 'disabled' when LLDP status is disabled."

    # updating non-existing domain
    - name: Update Interface Policy group ansible_interface_policy_group_2 with non-existing domain
      cisco.mso.ndo_interface_setting:
        <<: *add_interface_policy_group_2
        domains: ["non_existing_domain"]
      ignore_errors: true
      register: nm_update_interface_policy_domain

    - name: Assert updating the Interface Policy group with non-existing domain
      assert:
        that:
          - nm_add_interface_policy_2 is changed
          - nm_add_interface_policy_2.current.name == nm_update_interface_policy_domain.previous.name == "ansible_interface_policy_group_2"
          - nm_add_interface_policy_2.current.type == nm_update_interface_policy_domain.previous.type == "physical"
          - nm_add_interface_policy_2.current.description == nm_update_interface_policy_domain.previous.description == "Ansible test interface policy group"
          - nm_add_interface_policy_2.current.domains | length == nm_update_interface_policy_domain.previous.domains | length == 2
          - nm_update_interface_policy_domain is failed
          - nm_update_interface_policy_domain.msg == "Domain 'non_existing_domain' not found in the template 'ansible_fabric_policy_template'."

    # updating non-existing syncE policy
    - name: Update Interface Policy group ansible_interface_policy_group_2 with non-existing syncE policy
      cisco.mso.ndo_interface_setting:
        <<: *add_interface_policy_group_2
        synce: non_existing_synce_interface_policy
      ignore_errors: true
      register: nm_update_interface_policy_synce

    - name: Assert updating the Interface Policy group with non-existing syncE policy
      assert:
        that:
          - nm_add_interface_policy_2 is changed
          - nm_add_interface_policy_2.current.name == nm_update_interface_policy_synce.previous.name == "ansible_interface_policy_group_2"
          - nm_add_interface_policy_2.current.type == nm_update_interface_policy_synce.previous.type == "physical"
          - nm_add_interface_policy_2.current.description == nm_update_interface_policy_synce.previous.description == "Ansible test interface policy group"
          - nm_update_interface_policy_synce is failed
          - nm_update_interface_policy_synce.msg == "SyncE policy 'non_existing_synce_interface_policy' not found in the template 'ansible_fabric_policy_template'."

    # updating non-existing access_macsec_policy
    - name: Update Interface Policy group ansible_interface_policy_group_2 with non-existing access_macsec_policy
      cisco.mso.ndo_interface_setting:
        <<: *add_interface_policy_group_2
        access_macsec_policy: non_existing_macsec_policy
      ignore_errors: true
      register: nm_update_interface_policy_macsec

    - name: Assert updating the Interface Policy group with non-existing access_macsec_policy
      assert:
        that:
          - nm_add_interface_policy_2 is changed
          - nm_add_interface_policy_2.current.name == nm_update_interface_policy_macsec.previous.name == "ansible_interface_policy_group_2"
          - nm_add_interface_policy_2.current.type == nm_update_interface_policy_macsec.previous.type == "physical"
          - nm_add_interface_policy_2.current.description == nm_update_interface_policy_macsec.previous.description == "Ansible test interface policy group"
          - nm_update_interface_policy_macsec is failed
          - nm_update_interface_policy_macsec.msg == "Access MACsec policy 'non_existing_macsec_policy' not found in the template 'ansible_fabric_policy_template'."

    # DELETE
    - name: Delete a Interface Policy group with name (check mode)
      cisco.mso.ndo_interface_setting: &delete_interface_policy_group
        <<: *mso_info
        template: ansible_fabric_policy_template
        name: ansible_interface_policy_group_changed
        state: absent
      check_mode: true
      register: cm_delete_interface_policy_group

    - name: Delete a Interface Policy group with name
      cisco.mso.ndo_interface_setting:
        <<: *delete_interface_policy_group
      register: nm_delete_interface_policy_group

    - name: Delete Interface Policy group with name again
      cisco.mso.ndo_interface_setting:
        <<: *delete_interface_policy_group
      register: nm_delete_interface_policy_group_again

    - name: Assert that the Interface Policy group with name was deleted
      assert:
        that:
          - cm_delete_interface_policy_group is changed
          - nm_delete_interface_policy_group is changed
          - cm_delete_interface_policy_group.current == nm_delete_interface_policy_group.current == {}
          - cm_delete_interface_policy_group.previous.name == nm_delete_interface_policy_group.previous.name == "ansible_interface_policy_group_changed"
          - cm_delete_interface_policy_group.previous.type == nm_delete_interface_policy_group.previous.type == "portchannel"
          - nm_delete_interface_policy_group.previous.uuid is defined
          - nm_delete_interface_policy_group_again is not changed
          - nm_delete_interface_policy_group_again.previous == nm_delete_interface_policy_group_again.current == {}

    - name: Delete a Interface Policy group with UUID
      cisco.mso.ndo_interface_setting:
        <<: *mso_info
        template: ansible_fabric_policy_template
        uuid: '{{ query_one.current.uuid }}'
        state: absent
      register: nm_delete_interface_policy_group_uuid

    - name: Assert that the Interface Policy group with UUID was deleted
      assert:
        that:
          - nm_delete_interface_policy_group_uuid is changed
          - nm_delete_interface_policy_group_uuid.previous.uuid is defined
          - nm_delete_interface_policy_group_uuid.previous.name == "ansible_interface_policy_group"
          - nm_delete_interface_policy_group_uuid.previous.type == "physical"
          - nm_delete_interface_policy_group_uuid.current == {}

    # Errors and no policies found
    - name: Delete a Interface Policy group with name
      cisco.mso.ndo_interface_setting:
        <<: *delete_interface_policy_group
        name: ansible_interface_policy_group_2
      register: nm_delete_interface_policy_group

    - name: Query all Interface Policy group in the template when all are deleted
      cisco.mso.ndo_interface_setting:
        <<: *query_interface_policy_group
      register: query_all_none

    - name: Update Interface Policy group with non-existing UUID
      cisco.mso.ndo_interface_setting:
        <<: *mso_info
        template: ansible_fabric_policy_template
        uuid: non-existing-uuid
        state: present
      ignore_errors: true
      register: update_non_existing_uuid

    - name: Assert no Interface Policy group found
      assert:
        that:
          - nm_delete_interface_policy_group is changed
          - nm_delete_interface_policy_group.previous.name == "ansible_interface_policy_group_2"
          - nm_delete_interface_policy_group.previous.type == "physical"
          - nm_delete_interface_policy_group.current == {}
          - query_all_none is not changed
          - query_all_none.current == {}
          - update_non_existing_uuid is failed
          - update_non_existing_uuid.msg == "Interface Policy Groups with the UUID{{":"}} 'non-existing-uuid' not found"

    # Create Interface Policy group interface_type physical for coverage
    - name: Create a Interface Policy group of interface_type 'physical' without MCP admin_state
      cisco.mso.ndo_interface_setting:
        <<: *mso_info
        template: ansible_fabric_policy_template
        name: ansible_interface_policy_group_cov
        interface_type: physical
        mcp:
          strict_mode: off
        state: present
      register: add_interface_policy_group_cov

    - name: Assert Interface Policy group of interface_type 'physical' was created
      assert:
        that:
          - add_interface_policy_group_cov is changed
          - add_interface_policy_group_cov.previous == {}
          - add_interface_policy_group_cov.current.name == "ansible_interface_policy_group_cov"
          - add_interface_policy_group_cov.current.type == "physical"
          - add_interface_policy_group_cov.current.mcp.mcpMode == "off"

    # CLEANUP TEMPLATE

    - name: Ensure templates do not exist
      cisco.mso.ndo_template:
        <<: *template_absent