# Test code for the MSO modules
# Copyright: (c) 2020, Lionel Hercot (@lhercot) <lhercot@cisco.com>
# Copyright: (c) 2018, Dag Wieers (@dagwieers) <dag@wieers.com> (based on mso_site test case)
# 

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI MultiSite host, username and password
  fail:
    msg: 'Please define the following variables: mso_hostname, mso_username and mso_password.'
  when: mso_hostname is not defined or mso_username is not defined or mso_password is not defined

- name: Set vars
  set_fact:
    mso_info: &mso_info
      host: '{{ mso_hostname }}'
      username: '{{ mso_username }}'
      password: '{{ mso_password }}'
      validate_certs: '{{ mso_validate_certs | default(false) }}'
      use_ssl: '{{ mso_use_ssl | default(true) }}'
      use_proxy: '{{ mso_use_proxy | default(false) }}'
      output_level: '{{ mso_output_level | default("info") }}'

# CLEAN ENVIRONMENT
# - name: Ensure site exist
#   mso_site: &site_present
#     host: '{{ mso_hostname }}'
#     username: '{{ mso_username }}'
#     password: '{{ mso_password }}'
#     validate_certs: '{{ mso_validate_certs | default(false) }}'
#     use_ssl: '{{ mso_use_ssl | default(true) }}'
#     use_proxy: '{{ mso_use_proxy | default(true) }}'
#     output_level: '{{ mso_output_level | default("info") }}'
#     site: '{{ mso_site | default("ansible_test") }}'
#     apic_username: '{{ apic_username }}'
#     apic_password: '{{ apic_password }}'
#     apic_site_id: '{{ apic_site_id | default(101) }}'
#     urls:
#     - https://{{ apic_hostname }}
#     state: present

- name: Remove schemas
  mso_schema:
    <<: *mso_info
    schema: '{{ item }}'
    state: absent
  loop:
  - '{{ mso_schema | default("ansible_test") }}_2'
  - '{{ mso_schema | default("ansible_test") }}'

- name: Ensure tenant ansible_test exist
  mso_tenant: &tenant_present
    <<: *mso_info
    tenant: ansible_test
    users:
    - '{{ mso_username }}'
    # sites:
    # - '{{ mso_site | default("ansible_test") }}'
    state: present

- name: Ensure schema 1 with Template 1 exist
  mso_schema_template:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    tenant: ansible_test
    template: Template 1
    state: present

- name: Ensure schema 1 with Template 2 exist
  mso_schema_template:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    tenant: ansible_test
    template: Template 2
    state: present

- name: Ensure schema 2 with Template 3 exist
  mso_schema_template:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    tenant: ansible_test
    template: Template 3
    state: present

- name: Ensure ANP exist
  mso_schema_template_anp:
    <<: *mso_info
    schema: '{{ item.schema }}'
    template: '{{ item.template }}'
    anp: ANP
    state: present
  loop:
  - { schema: '{{ mso_schema | default("ansible_test") }}', template: 'Template 1' }
  - { schema: '{{ mso_schema | default("ansible_test") }}_2', template: 'Template 3' }

- name: Ensure Filter 1 exist
  mso_schema_template_filter_entry:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    filter: Filter1
    entry: Filter1-Entry
    state: present

- name: Ensure Contract1 exist
  mso_schema_template_contract_filter: &contract_present
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    contract: Contract1
    filter: Filter1
    filter_schema: '{{ mso_schema | default("ansible_test") }}'
    filter_template: Template 1
    state: present

- name: Ensure Filter 2 exist
  mso_schema_template_filter_entry:
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 2
    filter: Filter2
    entry: Filter2-Entry
    state: present

- name: Ensure Contract2 exist
  mso_schema_template_contract_filter: &contract2_present
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 2
    contract: Contract2
    filter: Filter2
    filter_schema: '{{ mso_schema | default("ansible_test") }}'
    filter_template: Template 2
    state: present

- name: Ensure EPGs exist
  mso_schema_template_anp_epg:
    <<: *mso_info
    schema: '{{ item.schema }}'
    template: '{{ item.template }}'
    anp: ANP
    epg: '{{ item.epg }}'
    state: present
  loop:
  - { schema: '{{ mso_schema | default("ansible_test") }}', template: 'Template 1', epg: 'ansible_test_1' }
  - { schema: '{{ mso_schema | default("ansible_test") }}_2', template: 'Template 3', epg: 'ansible_test_3' }

# ADD Contract to EPG
- name: Add Contract1 to EPG (check_mode)
  mso_schema_template_anp_epg_contract: &contract_epg_present
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    contract:
      name: Contract1
      type: consumer
    state: present
  check_mode: true
  register: cm_add_contract_rel

- name: Verify cm_add_contract_rel
  assert:
    that:
    - cm_add_contract_rel is changed
    - cm_add_contract_rel.previous == {}
    - cm_add_contract_rel.current.contractRef.templateName == "Template1"
    - cm_add_contract_rel.current.contractRef.contractName == "Contract1"
    - cm_add_contract_rel.current.relationshipType == "consumer"

- name: Add Contract to EPG (normal mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_present
  register: nm_add_contract_rel

- name: Verify nm_add_contract_rel
  assert:
    that:
    - nm_add_contract_rel is changed
    - nm_add_contract_rel.previous == {}
    - nm_add_contract_rel.current.contractRef.templateName == "Template1"
    - nm_add_contract_rel.current.contractRef.contractName == "Contract1"
    - nm_add_contract_rel.current.relationshipType == "consumer"
    - cm_add_contract_rel.current.contractRef.schemaId ==  nm_add_contract_rel.current.contractRef.schemaId

- name: Add Contract to EPG again (check_mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_present
  check_mode: true
  register: cm_add_contract_rel_again

- name: Verify cm_add_contract_rel_again
  assert:
    that:
    - cm_add_contract_rel_again is not changed
    - cm_add_contract_rel_again.previous.contractRef.templateName == "Template1"
    - cm_add_contract_rel_again.current.contractRef.templateName == "Template1"
    - cm_add_contract_rel_again.previous.contractRef.contractName == "Contract1"
    - cm_add_contract_rel_again.current.contractRef.contractName == "Contract1"
    - cm_add_contract_rel_again.previous.relationshipType == "consumer"
    - cm_add_contract_rel_again.current.relationshipType == "consumer"
    - cm_add_contract_rel_again.previous.contractRef.schemaId ==  cm_add_contract_rel_again.current.contractRef.schemaId


- name: Add Contract to EPG again (normal mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_present
  register: nm_add_contract_rel_again

- name: Verify nm_add_contract_rel_again
  assert:
    that:
    - nm_add_contract_rel_again is not changed
    - nm_add_contract_rel_again.previous.contractRef.templateName == "Template1"
    - nm_add_contract_rel_again.current.contractRef.templateName == "Template1"
    - nm_add_contract_rel_again.previous.contractRef.contractName == "Contract1"
    - nm_add_contract_rel_again.current.contractRef.contractName == "Contract1"
    - nm_add_contract_rel_again.previous.relationshipType == "consumer"
    - nm_add_contract_rel_again.current.relationshipType == "consumer"
    - nm_add_contract_rel_again.previous.contractRef.schemaId ==  nm_add_contract_rel_again.current.contractRef.schemaId

- name: Add Contract1 to EPG - provider (normal mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_present
    contract:
      name: Contract1
      type: provider
  register: nm_add_contract1_rel_provider

- name: Add Contract2 to EPG - consumer (normal mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_present
    contract:
      name: Contract2
      template: Template 2
      type: consumer
  register: nm_add_contract2_rel_consumer

- name: Add Contract1 to EPG 3 - provider (normal mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_present
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template 3
    anp: ANP
    epg: ansible_test_3
    contract:
      name: Contract1
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template 1
      type: provider
  register: nm_add_contract3_rel_provider

- name: Verify nm_add_contract1_rel_provider, nm_add_contract2_rel_consumer and nm_add_contract3_rel_provider
  assert:
    that:
      - nm_add_contract1_rel_provider is changed
      - nm_add_contract2_rel_consumer is changed
      - nm_add_contract3_rel_provider is changed
      - nm_add_contract1_rel_provider.current.contractRef.contractName == nm_add_contract3_rel_provider.current.contractRef.contractName == "Contract1"
      - nm_add_contract2_rel_consumer.current.contractRef.contractName == "Contract2"
      - nm_add_contract1_rel_provider.current.contractRef.templateName == nm_add_contract3_rel_provider.current.contractRef.templateName == "Template1"
      - nm_add_contract2_rel_consumer.current.contractRef.templateName == "Template2"
      - nm_add_contract1_rel_provider.current.contractRef.schemaId == nm_add_contract2_rel_consumer.current.contractRef.schemaId == nm_add_contract3_rel_provider.current.contractRef.schemaId
      - nm_add_contract2_rel_consumer.current.relationshipType == "consumer"
      - nm_add_contract1_rel_provider.current.relationshipType == nm_add_contract3_rel_provider.current.relationshipType == "provider"

# # QUERY ALL Contract to EPG
- name: Query all contract relationship for EPG (check_mode)
  mso_schema_template_anp_epg_contract: &contract_epg_query
    <<: *mso_info
    schema: '{{ mso_schema | default("ansible_test") }}'
    template: Template 1
    anp: ANP
    epg: ansible_test_1
    state: query
  check_mode: true
  register: cm_query_all_contract_rels

- name: Query all contract relationship for EPG (normal mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
  register: nm_query_all_contract_rels

- name: Verify query_all_contract_rels
  assert:
    that:
    - cm_query_all_contract_rels is not changed
    - nm_query_all_contract_rels is not changed
    - cm_query_all_contract_rels.current | length == nm_query_all_contract_rels.current | length == 3


# QUERY A Contract to EPG
- name: Query Contract1 relationship for EPG - consumer (check_mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    contract:
      name: Contract1
      type: consumer
  check_mode: true
  register: cm_query_contract1_consumer_rel

- name: Query Contract1 relationship for EPG - consumer (normal mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    contract:
      name: Contract1
      type: consumer
  register: nm_query_contract1_consumer_rel

- name: Query Contract1 relationship for EPG - provider (normal mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    contract:
      name: Contract1
      type: provider
  register: nm_query_contract1_provider_rel

- name: Query Contract1 relationship for EPG - consumer (normal mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    contract:
      name: Contract2
      template: Template 2
      type: consumer
  register: nm_query_contract2_consumer_rel

- name: Query Contract1 relationship for EPG - provider (normal mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    schema: '{{ mso_schema | default("ansible_test") }}_2'
    template: Template 3
    anp: ANP
    epg: ansible_test_3
    contract:
      name: Contract1
      schema: '{{ mso_schema | default("ansible_test") }}'
      template: Template 1
      type: provider
  register: nm_query_contract3_provider_rel

- name: Verify query_contractX_YYYYY_rel
  assert:
    that:
    - cm_query_contract1_consumer_rel is not changed
    - nm_query_contract1_consumer_rel is not changed
    - nm_query_contract1_provider_rel is not changed
    - nm_query_contract2_consumer_rel is not changed
    - nm_query_contract3_provider_rel is not changed
    - cm_query_contract1_consumer_rel == nm_query_contract1_consumer_rel
    - cm_query_contract1_consumer_rel.current.contractRef.contractName == nm_query_contract1_consumer_rel.current.contractRef.contractName == nm_query_contract1_provider_rel.current.contractRef.contractName == nm_query_contract3_provider_rel.current.contractRef.contractName == "Contract1"
    - nm_query_contract2_consumer_rel.current.contractRef.contractName == "Contract2"
    - cm_query_contract1_consumer_rel.current.contractRef.templateName == nm_query_contract1_consumer_rel.current.contractRef.templateName == nm_query_contract1_provider_rel.current.contractRef.templateName == nm_query_contract3_provider_rel.current.contractRef.templateName == "Template1"
    - nm_query_contract2_consumer_rel.current.contractRef.templateName == "Template2"
    - cm_query_contract1_consumer_rel.current.contractRef.schemaId == nm_query_contract1_consumer_rel.current.contractRef.schemaId == nm_query_contract1_provider_rel.current.contractRef.schemaId == nm_query_contract2_consumer_rel.current.contractRef.schemaId == nm_query_contract3_provider_rel.current.contractRef.schemaId
    - cm_query_contract1_consumer_rel.current.relationshipType == nm_query_contract1_consumer_rel.current.relationshipType == nm_query_contract2_consumer_rel.current.relationshipType == "consumer"
    - nm_query_contract1_provider_rel.current.relationshipType == nm_query_contract3_provider_rel.current.relationshipType == "provider"
    

# REMOVE Contract to EPG
- name: Remove Contract to EPG (check_mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_present
    state: absent
  check_mode: true
  register: cm_remove_contract_rel

- name: Verify cm_remove_contract_rel
  assert:
    that:
    - cm_remove_contract_rel is changed
    - cm_remove_contract_rel.current == {}

- name: Remove Contract to EPG (normal mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_present
    state: absent
  register: nm_remove_contract_rel

- name: Verify nm_remove_contract_rel
  assert:
    that:
    - nm_remove_contract_rel is changed
    - nm_remove_contract_rel.current == {}

- name: Remove Contract to EPG again (check_mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_present
    state: absent
  check_mode: true
  register: cm_remove_contract_rel_again

- name: Verify cm_remove_contract_rel_again
  assert:
    that:
    - cm_remove_contract_rel_again is not changed
    - cm_remove_contract_rel_again.current == {}

- name: Remove Contract to EPG again (normal mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_present
    state: absent
  register: nm_remove_contract_rel_again

- name: Verify nm_remove_contract_rel_again
  assert:
    that:
    - nm_remove_contract_rel_again is not changed
    - nm_remove_contract_rel_again.current == {}


# QUERY NON-EXISTING Contract to EPG
- name: Query non-existing contract (check_mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    contract:
      name: non_existing_contract
      type: provider
  check_mode: true
  ignore_errors: true
  register: cm_query_non_contract

- name: Query non-existing contract (normal mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    contract:
      name: non_existing_contract
      type: provider
  ignore_errors: true
  register: nm_query_non_contract

- name: Verify query_non_contract
  assert:
    that:
    - cm_query_non_contract is not changed
    - nm_query_non_contract is not changed
    - cm_query_non_contract == nm_query_non_contract
    - cm_query_non_contract.msg is match("Contract '/schemas/[0-9a-zA-Z]*/templates/Template1/contracts/non_existing_contract' not found")
    - nm_query_non_contract.msg is match("Contract '/schemas/[0-9a-zA-Z]*/templates/Template1/contracts/non_existing_contract' not found")

# QUERY NON-EXISTING EPG
- name: Query non-existing EPG (check_mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    epg: non_existing_epg
  check_mode: true
  ignore_errors: true
  register: cm_query_non_epg

- name: Query non-existing EPG (normal mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    epg: non_existing_epg
  ignore_errors: true
  register: nm_query_non_epg

- name: Verify query_non_epg
  assert:
    that:
    - cm_query_non_epg is not changed
    - nm_query_non_epg is not changed
    - cm_query_non_epg == nm_query_non_epg
    - cm_query_non_epg.msg == nm_query_non_epg.msg == "Provided epg 'non_existing_epg' does not exist. Existing epgs{{':'}} ansible_test_1"

# QUERY NON-EXISTING ANP
- name: Query non-existing ANP (check_mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    anp: non_existing_anp
  check_mode: true
  ignore_errors: true
  register: cm_query_non_anp

- name: Query non-existing ANP (normal mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    anp: non_existing_anp
  ignore_errors: true
  register: nm_query_non_anp

- name: Verify query_non_anp
  assert:
    that:
    - cm_query_non_anp is not changed
    - nm_query_non_anp is not changed
    - cm_query_non_anp == nm_query_non_anp
    - cm_query_non_anp.msg == nm_query_non_anp.msg == "Provided anp 'non_existing_anp' does not exist. Existing anps{{':'}} ANP"

# USE A NON-EXISTING STATE
- name: Non-existing state for contract relationship (check_mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    state: non-existing-state
  check_mode: true
  ignore_errors: true
  register: cm_non_existing_state

- name: Non-existing state for contract relationship (normal_mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    state: non-existing-state
  ignore_errors: true
  register: nm_non_existing_state

- name: Verify non_existing_state
  assert:
    that:
    - cm_non_existing_state is not changed
    - nm_non_existing_state is not changed
    - cm_non_existing_state == nm_non_existing_state
    - cm_non_existing_state.msg == nm_non_existing_state.msg == "value of state must be one of{{':'}} absent, present, query, got{{':'}} non-existing-state"

# USE A NON-EXISTING SCHEMA
- name: Non-existing schema for contract relationship (check_mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    schema: non-existing-schema
  check_mode: true
  ignore_errors: true
  register: cm_non_existing_schema

- name: Non-existing schema for contract relationship (normal_mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    schema: non-existing-schema
  ignore_errors: true
  register: nm_non_existing_schema

- name: Verify non_existing_schema
  assert:
    that:
    - cm_non_existing_schema is not changed
    - nm_non_existing_schema is not changed
    - cm_non_existing_schema == nm_non_existing_schema
    - cm_non_existing_schema.msg == nm_non_existing_schema.msg == "Provided schema 'non-existing-schema' does not exist."

- name: Non-existing contract schema for contract relationship (check_mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    contract:
      name: Contract1
      schema: non-existing-schema
      template: Template 1
      type: provider
  check_mode: true
  ignore_errors: true
  register: cm_non_existing_contract_schema

- name: Non-existing contract schema for contract relationship (normal_mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    contract:
      name: Contract1
      schema: non-existing-schema
      template: Template 1
      type: provider
  ignore_errors: true
  register: nm_non_existing_contract_schema

- name: Verify non_existing_contract_schema
  assert:
    that:
    - cm_non_existing_contract_schema is not changed
    - nm_non_existing_contract_schema is not changed
    - cm_non_existing_contract_schema == nm_non_existing_contract_schema
    - cm_non_existing_contract_schema.msg == nm_non_existing_contract_schema.msg == "Provided schema 'non-existing-schema' does not exist."

# USE A NON-EXISTING TEMPLATE
- name: Non-existing template for contract relationship (check_mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    template: non-existing-template
  check_mode: true
  ignore_errors: true
  register: cm_non_existing_template

- name: Non-existing template for contract relationship (normal_mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    template: non-existing-template
  ignore_errors: true
  register: nm_non_existing_template

- name: Verify non_existing_template
  assert:
    that:
    - cm_non_existing_template is not changed
    - nm_non_existing_template is not changed
    - cm_non_existing_template == nm_non_existing_template
    - cm_non_existing_template.msg == nm_non_existing_template.msg == "Provided template 'non-existing-template' does not exist. Existing templates{{':'}} Template1, Template2"

- name: Non-existing contract template for contract relationship (check_mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    contract:
      name: Contract1
      template: non-existing-template
      type: provider
  check_mode: true
  ignore_errors: true
  register: cm_non_existing_contract_template

- name: Non-existing contract template for contract relationship (normal_mode)
  mso_schema_template_anp_epg_contract:
    <<: *contract_epg_query
    contract:
      name: Contract1
      template: non-existing-template
      type: provider
  ignore_errors: true
  register: nm_non_existing_contract_template

- name: Verify non_existing_contract_template
  assert:
    that:
    - cm_non_existing_contract_template is not changed
    - nm_non_existing_contract_template is not changed
    - cm_non_existing_contract_template == nm_non_existing_contract_template
    - cm_non_existing_contract_template.msg is match("Contract '/schemas/[0-9a-zA-Z]*/templates/non-existing-template/contracts/Contract1' not found")
    - nm_non_existing_contract_template.msg is match("Contract '/schemas/[0-9a-zA-Z]*/templates/non-existing-template/contracts/Contract1' not found")