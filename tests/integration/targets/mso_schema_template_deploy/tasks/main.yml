# Test code for the MSO modules
# Copyright: (c) 2020, Cindy Zhao (@cizhao) <cizhao@cisco.com>

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI MultiSite host, username and password
  fail:
    msg: 'Please define the following variables: mso_hostname, mso_username and mso_password.'
  when: mso_hostname is not defined or mso_username is not defined or mso_password is not defined


# CLEAN ENVIRONMENT
- name: Set vars
  ansible.builtin.set_fact:
    mso_info: &mso_info
      host: '{{ mso_hostname }}'
      username: '{{ mso_username }}'
      password: '{{ mso_password }}'
      validate_certs: '{{ mso_validate_certs | default(false) }}'
      use_ssl: '{{ mso_use_ssl | default(true) }}'
      use_proxy: '{{ mso_use_proxy | default(true) }}'
      output_level: '{{ mso_output_level | default("info") }}'

- name: Query MSO version
  cisco.mso.mso_version:
    <<: *mso_info
    state: query
  register: version

# mso_schema_template_deploy is deprecated in MSO/NDO v4.0+, different api endpoint thus different module
- name: Execute tasks only for MSO version < 4.0
  when: version.current.version is version('4.0', '<')
  block:
  - name: Ensure site exist
    cisco.mso.mso_site:
      <<: *mso_info
      site: '{{ mso_site | default("ansible_test") }}'
      apic_username: '{{ apic_username }}'
      apic_password: '{{ apic_password }}'
      apic_site_id: '{{ apic_site_id | default(101) }}'
      urls:
      - https://{{ apic_hostname }}
      state: present

  - name: Undeploy template
    cisco.mso.mso_schema_template_deploy:
      <<: *mso_info
      schema: ansible_test
      template: "{{ item }}"
      site: '{{ mso_site | default("ansible_test") }}'
      state: undeploy
    ignore_errors: true
    loop:
      - Template 1
      - Template 2
      - Template 3
      - Template 4
      - Template_5
      - Template 5
      - Template5

  - name: Remove schemas
    cisco.mso.mso_schema:
      <<: *mso_info
      schema: '{{ item }}'
      state: absent
    loop:
    - '{{ mso_schema | default("ansible_test") }}_2'
    - '{{ mso_schema | default("ansible_test") }}'

  - name: Ensure tenant ansible_test exists
    cisco.mso.mso_tenant:
      <<: *mso_info
      tenant: ansible_test
      users:
        - '{{ mso_username }}'
      sites:
      - '{{ mso_site | default("ansible_test") }}'
      state: present

  - name: Ensure schema 1 with Template 1, and Template 2, Template 3 exist
    cisco.mso.mso_schema_template:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      tenant: ansible_test
      template: '{{ item }}'
      state: present
    loop:
    - Template 1
    - Template 2
    - Template 3
    - Template 4
    - Template_5

  - name: Add physical site to a schema
    cisco.mso.mso_schema_site:
      <<: *mso_info
      schema: '{{ mso_schema | default("ansible_test") }}'
      site: '{{ mso_site | default("ansible_test") }}'
      template: '{{ item }}'
      state: present
    loop:
    - Template 1
    - Template 2
    - Template 3
    - Template 4
    - Template_5

  - name: Deploy templates (check_mode)
    cisco.mso.mso_schema_template_deploy: &schema_deploy
      <<: *mso_info
      schema: ansible_test
      template: "{{ item }}"
      site: '{{ mso_site | default("ansible_test") }}'
      state: deploy
    check_mode: true
    register: cm_deploy_template
    loop:
    - Template 1
    - Template 2
    - Template 3
    - Template 4
    - Template_5

  - name: Verify cm_deploy_template
    ansible.builtin.assert:
      that:
      - item is not changed
    loop: "{{ cm_deploy_template.results }}"

  - name: Deploy templates (normal_mode)
    cisco.mso.mso_schema_template_deploy:
      <<: *schema_deploy
      schema: ansible_test
      template: "{{ item }}"
      site: '{{ mso_site | default("ansible_test") }}'
      state: deploy
    register: nm_deploy_template
    loop:
    - Template 1
    - Template 2
    - Template 3
    - Template 4
    - Template_5

  - name: Verify nm_deploy_template
    ansible.builtin.assert:
      that:
      - item is not changed
      - item.msg == "Successfully deployed"
    loop: "{{ nm_deploy_template.results }}"

  - name: Get deployment status
    cisco.mso.mso_schema_template_deploy:
      <<: *schema_deploy
      schema: ansible_test
      template: "{{ item }}"
      state: status
    register: query_deploy_status
    loop:
    - Template 1
    - Template 2
    - Template 3
    - Template 4
    - Template_5

  - name: Verify query_deploy_status
    ansible.builtin.assert:
      that:
      - item is not changed
      - item.status.0.status.siteStatus == "Succeeded"
    loop: "{{ query_deploy_status.results }}"

  - name: Undeploy templates
    cisco.mso.mso_schema_template_deploy:
      <<: *schema_deploy
      schema: ansible_test
      template: '{{ item }}'
      site: '{{ mso_site | default("ansible_test") }}'
      state: undeploy
    register: undeploy_template
    loop:
      - Template 1
      - Template 2
      - Template 3
      - Template 4
      - Template_5

  - name: Verify undeploy_template
    ansible.builtin.assert:
      that:
      - item is not changed
      - item.msg == "Successfully Un-deployed"
    loop: "{{ undeploy_template.results }}"
    when: version.current.version is version('3.1', '>=')

  - name: Verify undeploy_template
    ansible.builtin.assert:
      that:
      - item is not changed
      - item.msg == "Successfully deployed"
    loop: "{{ undeploy_template.results }}"
    when: version.current.version is version('3.1', '<')
  
    # Validate schema when MSO version >= 3.3
  - name: Execute tasks only for MSO version >= 3.3
    when: version.current.version is version('3.3', '>=')
    block:
    - name: Add VRF1 with validation error
      cisco.mso.mso_schema_template_vrf: &fail_validation
        <<: *mso_info
        schema: '{{ mso_schema | default("ansible_test") }}'
        template: Template 2
        vrf: VRF1
        layer3_multicast: true
        vzany: true
        state: present

    - name: Deploy template with validation error
      cisco.mso.mso_schema_template_deploy:
        <<: *mso_info
        schema: ansible_test
        template: Template 2
        site: '{{ mso_site | default("ansible_test") }}'
        state: deploy
      register: failed_validaton_deploy
      ignore_errors: true

    - name: Verify validation errors before deploy and redploy
      ansible.builtin.assert:
        that:
        - failed_validaton_deploy.msg ==  "MSO Error 400{{':'}} Bad Request{{':'}} Patch Failed, Received{{':'}} vzAny contract must be configured if vzAny flag is set. VRF(s) {{':'}} VRF1 exception while trying to update schema"

    - name: Remove VRF1 with validation error
      cisco.mso.mso_schema_template_vrf:
        <<: *fail_validation
        state: absent